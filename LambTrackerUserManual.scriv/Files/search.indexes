<?xml version="1.0" encoding="UTF-8"?>
<SearchIndexes Version="1.0">
    <Documents>
        <Document ID="34E3762A-8A82-4B46-B89F-3B0A0E7B6518">
            <Title>Modifications for Other Species and Languages</Title>
            <Text>LambTracker is designed so that it is relatively easy to modify to handle other species. Specifically the gestation length, EBV age range data and sex table will need modifications. The evaluations and other things will also be important to change. 
Most of the information about headers and labels is located in the Strings section for ease in translation to another language. 
</Text>
        </Document>
        <Document ID="2A702746-4441-4897-A992-674B5C71761D">
            <Title>Paperback Novel</Title>
            <Text>MY GREAT NOVEL
Anton Mouse
Copyright Â© 2011 Anton Mouse All rights reserved.
ISBN: ISBN-13:
Insert dedication here.
CHAPTER ONE
The Mayor of Castanets
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst.
***
1
Anton Mouse
Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem.
Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim.
2
My Great Novel
Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero. Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum.
Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
3
CHAPTER TWO
A Womb with a View
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero.
In hac habitasse platea dictumst.
4
My Great Novel
Proin quis pellentesque magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi.
Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi.
Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
***
5
Anton Mouse
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero. Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum. Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
6
CHAPTER THREE
Madame Ovary
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero.
In hac habitasse platea dictumst. Proin quis pellentesque
7
Anton Mouse
magna. Mauris in erat est. Nullam ac risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem.
Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis.
Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi.
8
My Great Novel
***
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero. Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo
sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue.
Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum.
Sed porta tortor non mauris iaculis vel molestie nisl interdum. Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
9
CHAPTER FOUR
The Sound and the Brewery
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac
10
My Great Novel
risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi. Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis.
Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero.
11
Anton Mouse
Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum.
Sed porta tortor non mauris iaculis vel molestie nisl interdum. Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
12
CHAPTER FIVE
Do Sheep Dream of Fluffy Androids?
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac
13
Anton Mouse
risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi.
Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero.
14
My Great Novel
Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum. Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
15
CHAPTER SIX
The End of Pointless Punning
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi rhoncus adipiscing velit, sit amet cursus libero vehicula sed. Nulla sed urna tellus. Proin non ligula at ligula mollis tempor nec non ipsum. Maecenas non ultricies elit. Ut ac eros ac eros scelerisque commodo. Suspendisse accumsan risus nec leo sagittis dignissim.
Aenean mollis iaculis mattis. Integer quam eros, ullamcorper at auctor ut, semper ac quam. Donec et felis vitae justo laoreet laoreet. Nam eu purus vel nisl venenatis sodales. Quisque tempor blandit dolor, non placerat dui tristique commodo. Curabitur scelerisque hendrerit lectus, laoreet semper dui commodo porta. Morbi ullamcorper, ipsum tristique sollicitudin tristique, leo arcu accumsan eros, consequat euismod ipsum sem quis libero.
Morbi ut tortor ipsum. Maecenas ut rhoncus metus. Etiam pellentesque hendrerit dignissim. Sed aliquam, sem quis pulvinar pharetra, urna nunc pharetra orci, eu varius velit lacus eu nisl. Ut et quam non mauris convallis ullamcorper sed non libero. In hac habitasse platea dictumst. Proin quis pellentesque magna. Mauris in erat est. Nullam ac
16
My Great Novel
risus mi, vitae lacinia nibh. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Vestibulum dignissim elementum neque, vitae consectetur lectus pharetra nec.
Fusce odio orci, fringilla a vulputate feugiat, placerat eget massa. Integer non magna eget dolor pulvinar vestibulum sit amet at mi. Cras blandit leo erat, id accumsan velit. Integer hendrerit, diam ut tincidunt sodales, diam lorem viverra nisl, vel porttitor ante metus et sem. Suspendisse potenti. Suspendisse eget lacus enim, sed placerat enim. Ut sit amet arcu id lacus gravida luctus ullamcorper pellentesque justo.
Cras laoreet, ligula non sagittis ornare, dolor sapien pharetra leo, non hendrerit nisi libero at enim. Nulla facilisi. Aenean volutpat hendrerit orci, at commodo massa vestibulum congue. Aenean interdum, erat quis interdum porttitor, odio tortor ullamcorper nisl, eget tincidunt velit massa ut turpis.
Praesent lacinia condimentum erat, a tempor elit viverra eget. Curabitur id erat quis massa feugiat semper. Suspendisse semper eros vitae mauris dignissim imperdiet mattis mauris accumsan. Suspendisse potenti. Vivamus vitae risus neque, id tempus mi.
Integer quis dolor et felis blandit auctor sed eget lectus. Donec sagittis ultricies diam, vitae porta nisi vehicula facilisis. Nullam et nunc a lacus tempus viverra. Ut pharetra tortor quis sem pretium pellentesque fermentum diam viverra. Vestibulum luctus sapien vel nibh vulputate eu tempor orci vehicula. Proin ultricies lobortis orci, id facilisis sapien ornare non.
Nulla facilisi. Praesent bibendum, ipsum et mattis dictum, neque lacus bibendum enim, sed porta massa metus in enim. Nullam orci nisi, imperdiet at vehicula eu, lacinia vel libero.
17
Anton Mouse
Donec in nisi lectus, sollicitudin porta est. In vitae risus nisi. Aenean eget hendrerit metus. Sed venenatis est at justo sagittis ullamcorper.
Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aenean eget ullamcorper nisi. Aliquam gravida ultrices lobortis. Suspendisse eget dignissim lorem. Suspendisse potenti. Pellentesque blandit orci quis tellus aliquet ut pharetra ante pellentesque. Sed sit amet dui orci. Sed ac euismod nulla. Proin ut eros libero.
Mauris vitae tellus elit, non gravida augue. Fusce in dui mi. Aliquam augue sapien, vulputate at porttitor ut, mollis in ipsum. Sed porta tortor non mauris iaculis vel molestie nisl interdum.
Aenean ut felis urna. Cras ac est quis neque pharetra fermentum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Praesent sem dui, luctus a feugiat vitae, porta sed turpis.
Duis vitae nulla felis. In adipiscing libero massa. Sed neque mauris, gravida non bibendum congue, congue at massa.
Quisque elit ligula, tempor laoreet sagittis quis, accumsan quis purus. Aliquam eu purus condimentum libero tristique fringilla a ut massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.
18
</Text>
        </Document>
        <Document ID="66605F3C-0E26-4DE0-8238-33B34EB9AC08">
            <Title>January</Title>
            <Text>January on the farm is one of the slower times of the year. Once the primary breeding period has passed all the rams are removed from the ewe bunch. Caitlin and Keith typically keep their flock away from rams for two weeks to ensure they can easily identify the sire of all lambs. Depending on your flock requirements you may choose to increase or decrease the time between primer and backup breeding periods. 
(* How do we handle a ram bank being used on a bunch of ewes? What about range flocks with multiple rams in a single ewe bunch? Could we use DNA or parentage verification data to determine the sire of any lambs produced then? *) 
Caitlin and Keith went out to pull the primary rams out of the breeding groups. It was a cold clear day. Catching the rams was fairly simple, they put in fresh hay and then called the sheep over. Keith grabbed the ram by the horns and marched him over to the gate. It took both of them to prevent the ewes from following out the open gate. Sometimes it is not a good thing to have smart sheep who can identify an open gate from across the pasture. Once he was out they stashed him in a temporary pen.
They moved to the next breeding pen and retrieved the ram from there. 
One nifty idea they had discovered is that it was a lot easier to integrate a breeding ram back into the main ram bunch if you tricked everyone into thinking they were all new.
Earlier in the week they had purchased a quart of the cheapest, smelliest menâs cologne from the nearest big box store. The cologne is poured into a spray bottle. Then all the rams, both the breeding rams pulled from the ewes and the other rams are put into a small working pen together. Caitlin went into the pen and sprayed each ramâs flanks, top of his head between the horns and the chest area of the breeding rams. Once all the rams have their new smell the entire bunch is turned out into a fairly large pasture. Because they all smell the same they will not fight as much and any fighting that does occur is less of a risk given that there is a big area for them to run away from a larger or stronger ram who might injure them.
Once Keith and Caitlin developed this method they had far fewer injuries during the ram re-introduction than they had had before. 
Of course most of the ewes get at least two opportunities to get pregnant, once with a primary ram and once with a backup ram. 
In between the two periods the ewes will get sorted into their backup breeding groups based on the choices made in LambTracker desktop. 
During the sorting any issues with the sheep will show up as an alert. Sheep with alerts can be checked and dealt with accordingly. 
35-45 days after the inseminations of the AI ewes is the optimal time to do an ultrasound of those ewes and see who is pregnant. If you plan to ultrasound the ewes from a live breeding it is generally recommend that you wait until 30 to 35 days after the ram is removed. 
Keith set up the LambTracker desktop system to collect ultrasound data. (* Need to decide how to handle scan data of 1, 2 or 3 lambs and perhaps storage of pictures. *)</Text>
        </Document>
        <Document ID="73E86CF7-EC45-4B23-B81E-B88C1359F744">
            <Title>October</Title>
            <Text>October is the start of the slaughtering and selling season on this farm. 
After evaluating all the sheep and ranking them decisions are made on which sheep to send to butcher and which will be offered for sale. Once those decisions are made each sheep gets a modified alert that indicates the keep, sell or slaughter status. 

To enter in carcass dates first remove the sheep with a date of the day they are slaughtered.

Then create an evaluation with carcass weight as the only characteristic.

Use the evaluate sheep , looking up by tag number to get the individual sheep and add their carcass weights as required then Save Scores.

The evaluation automatically calculated the age in days based on when the animal was butchered and enters that into the sheep evaluation record. 
</Text>
        </Document>
        <Document ID="5052E54F-562A-480A-A937-BDF9822505EC">
            <Title>Novel Format</Title>
            <Synopsis>This document tells you everything you need to know to get up and running. Good luck getting your 50,000 words this year!</Synopsis>
            <Text>NATIONAL NOVEL WRITING MONTH 2013

#

Before You Begin
It's that time of year again! Thanks for choosing to make Scrivener part of your novel-writing adventure this year. Although you can just dive in and start using Scrivener straight away, to get the most out of the program we recommend taking a look at some of the following resources:

Tutorial:	An interactive tutorial is available from the Help menu (you can also find it under the âGetting Startedâ section of the template chooser, which appears when you go to File &gt; New Projectâ¦). This is a Scrivener project that walks you through all of the main features of the program as you use it. Itâs thorough and takes a couple of hours to go through, but once youâve finished it youâll be well on your way to becoming a Scrivener expert, and will be able to decide which of its tools will work best for you.

Videos:	We have a range of tutorial videos available on our website at http://www.literatureandlatte.com/video.php. A ten-minute introductory video that whisks through Scrivenerâs main features (ideal for getting started quickly) can be found here:
	http://www.literatureandlatte.com/videos/ScrivIntroLarge.mov
	A smaller version is available here:
	http://www.literatureandlatte.com/videos/ScrivIntroSmall.mov

Manual:	I know, no one likes reading the manual, but you may want to take a look at the âQuick Startâ guide in the PDF manual all the same, which you can view by selecting âScrivener Manualâ from the âHelpâ menu.

About This Template
This template has been designed to provide some useful tools for your daily writing sessions, and a few general writing tools for novelists, such as character and location sketches (which you can customise). At the end of the month, you will want to compile (File &gt; Compile) your novel for export. By default, when you do so, this project will generate a document in the standard manuscript format for novels. The necessary settings are also provided to make it easy to compile to a paperback-style PDF for self-publishing or an epub or Kindle e-book. When it comes time to upload your book to the NaNoWriMo servers, you may want the text to be scrambled so that no one else can read it, and thereâs a preset for that too. Please see the section below on âCompilingâ for more information.

What This Template Provides
This template is mostly the same as the standard âNovelâ project template, except that a few tweaks have been made for NaNoWriMo. Project Targets have already been set up for you (Project &gt; Show Project Targets), with a total manuscript target of 50,000 words. You can keep this panel open as you write and watch the bars fill up. The daily session goal has been set (via the âOptionsâ¦â) to calculate the word count target automatically based on how many days there are left until 30th November, so this will change each day, depending on how much youâve written so far. You can change these options and have a stable daily goal instead if you prefer, though.

How To Use this Template
	â¢	Create a new folder under âManuscriptâ for each chapter and title each folder with the name of the chapter. If you donât intend to use chapter names, just use something descriptive that tells you what the chapter is about. (You do not need toâand indeed shouldnâtâtitle the folders âChapter Oneâ and so on, because chapter numbering will be taken care of automatically during the Compile process.) The first chapter folder has been created for you with the placeholder title âChapterâ.
	â¢	Create a new text document for each scene inside the chapter folders. (Upon export, scenes will be separated with the â#â character for standard manuscript format, or with a blank line for other formats.)
	â¢	If you want to keep track of your daily writing by creating a new file for each dayâs work, select âDaily Targetâ from the Project &gt; New From Template menu at the start of the day to create a new document. This will create a blank document that has already been set up with a word-count goal of 1,667 words (if you write that many words every day, you will reach the target of 50,000 words after 30 days). As you write, you can watch the progress bar in the footer area fill up as you approach your goal. You can change the target by clicking on the small target icon in the right of the footer bar below the editor.
	â¢	Information about characters can be placed in the âCharactersâ folder, and information about locations can be placed in the âPlacesâ folder. (These are just regular folders that have had custom icons assigned to them using the Documents &gt; Change Icon feature.)
	â¢	Character and setting sketch sheets have been provided which can be used for filling out information about the people and places in your novel. These are located in the âTemplate Sheetsâ folder. You should not edit the documents in the âTemplate Sheetsâ folder directly unless you wish to change the templates (which you are free to doâyou may wish to customise the sketch sheets to contain your own list of questions, or you may wish to get rid of them entirely). Instead, to create a new character sheet, click on the Characters folder (or wherever you want to create your new character sheet) and from the Project menu, select New From Template &gt; Character Sketch. This creates a new character sketch document for you to edit and fill in with your character details. You can create setting sketch sheets in the same way. Alternatively, you can just click âAddâ, or hit cmd-N, with the Characters or Places folder selected.

Remember that only the text of documents contained inside the âManuscriptâ folder counts towards your word count, so you can place support materials and make notes anywhere else.

Also, itâs important to know that this template is merely one suggested way of working with Scrivenerâyou donât have to write scenes individually (see âWorking with chapters instead of scenesâ under âMaking Changesâ below, for instance). Youâre free to structure things however you want and adjust the Compile settings to match. This template just uses one common way of structuring a novel (chapters and scenes), and is designed to work well with some of Scrivenerâs compile presets.

Compiling
	â¢	Title pages and front matter are all provided in the âFront Matterâ folder (between the âPlacesâ and âResearchâ folder. You will choose different front matter depending on the format to which you are compiling.
	â¢	Scrivener remembers your compile settings, so you only need to follow the instructions below when you want to compile to a different format. After that, you can just go to File &gt; Compileâ¦ and click the âCompileâ button straight away.
	â¢	Tip: You can open this document in a QuickReference panel and have it open alongside the Compile panel if you need to refer to these instructions while compiling.

		To compile with scrambled text for uploading to the NaNo servers:
	â¦	Go to File &gt; Compileâ¦
	â¦	Select âNaNoWriMo (Obfuscated)â from the âFormat Asâ pop-up button. (If this doesnât appear in the list, choose âManage Compile Format Presetsâ¦â from the bottom of the menu. This opens a panel that shows all available presetsâyou can choose which ones appear in the list and to hide ones you donât use. Tick âNaNoWriMo (Obfuscated)â and click âOKâ, after which you will be able to select it from the âFormat Asâ menu.)
	â¦	Ensure that the âSummaryâ tab is selected at the top of the Compile panel. (This isnât strictly necessaryâthe below options can also be found in the âContentsâ pane of the âAll Optionsâ tab.)
	â¦	Un-tick the âAdd front matterâ button.
	â¦	Click on âCompileâ.
	â¦	Make sure that âAppend â.txtâ extensionâ is ticked in the save panel that appears, then save to your desired location.
	â¦	This will create a plain text (.txt) file with the letters swapped around so that it is unreadable, but which has exactly the same word count as your text. You can upload this to the NaNoWriMo servers to validate your word count without anyone being able to read what youâve written.

		To compile to standard manuscript format:
	â¦	Edit the âTitle Pageâ document inside the Front Matter/Manuscript Format folder to ensure that it contains the correct information (note that it will have been filled in by default with information from Address Book).
	â¦	Go to File &gt; Compileâ¦
	â¦	Select âStandard Manuscript Formatâ from the âFormat Asâ pop-up button if it is not already selected. (If âNovel (NaNoWriMo)â is selected, thatâs fine tooâthatâs just the default format for this particular template, which is the same as standard manuscript format.)
	â¦	Ensure that the âSummaryâ tab is selected at the top of the Compile panel. (This isnât strictly necessaryâthe below options can also be found in the âContentsâ pane of the âAll Optionsâ tab.)
	â¦	Ensure that the âAdd front matterâ button is ticked and select the âManuscript Formatâ folder from the pop-up button next to it (this is already selected by default).
	â¦	Click on âCompileâ.

		To compile to paperback PDF format:
	â¦	Edit the front matter pages contained inside the Front Matter/Paperback Novel folder.
	â¦	Go to File &gt; Compileâ¦
	â¦	Select âPaperback Novelâ from the âFormat Asâ pop-up button if it is not already selected.
	â¦	Ensure that the âSummaryâ tab is selected at the top of the Compile panel. (This isnât strictly necessaryâthe below options can also be found in the âContentsâ pane of the âAll Optionsâ tab.)
	â¦	Ensure that the âAdd front matterâ button is ticked and select the âPaperback Novelâ folder from the pop-up button next to it if it is not already selected.
	â¦	Click on âCompileâ.

		To compile to e-book format:
	â¦	Edit or remove the dedication page contained inside the Front Matter/E-Book folder. Feel free to add any other front matter documents as required.
	â¦	Import a cover image (the recommended size is 600x800 pixels, preferably in JPG or PNG format). You can store this anywhere, but it makes sense to place it in the âE-Bookâ front matter folder. A placeholder cover image is already providedâyou will want to delete that once you have imported your own.
	â¦	Go to File &gt; Compileâ¦
	â¦	Select âE-Bookâ from the âFormat Asâ pop-up button if it is not already selected.
	â¦	Ensure that the âSummaryâ tab is selected at the top of the Compile panel. (This isnât strictly necessaryâthe below options can also be found in the âContentsâ, âCoverâ and âLayoutâ panes of the âAll Optionsâ tab.)
	â¦	If you have front matter documents other than the cover image, ensure that the âAdd front matterâ button is ticked and select the âE-Bookâ folder from the pop-up button next to it if it is not already selected. If you donât have any front matter documents, you can un-tick âAdd front matterâ. (Un-ticking this does not affect the cover image.)
	â¦	If you have imported your own cover image, be sure to select it from the âCover imageâ pop-up button.
	â¦	If you donât want an HTML table of contents included, un-tick âGenerate HTML table of contentsâ. This must be ticked when exporting to Kindle format but is less important when exporting to epub format, because most epub readers generate their own table of contents anyway.
	â¦	From the âCompile Forâ pop-up button, choose whether to export to epub or Kindle format.
	â¦	Click on âCompileâ.

Making Changes
There are various minor changes you can make to the settings to tweak this template so that it better suits your needs, as follows:
	â¢	Project and author name: The default book title and author name used in headers and elsewhere can be customised by going to Project &gt; Meta-Data Settingsâ¦ and choosing the âProject Propertiesâ tab.
	â¢	Chapter subtitles: If you donât want to include the names of your chapter folders below the chapter numbering text in the compiled document, go to the âFormattingâ pane in the âAll Optionsâ tab of the Compile sheet and deselect âTitleâ in the list of elements to include.
	â¢	Page header and footer: You can edit the page header in the âPage Settingsâ pane of the Compile sheet (under âAll Optionsâ).
	â¢	Page size: The âPaperback Novelâ format is set to export to a page size of 5.06â x 7.81â, which is one of the formats you can use with CreateSpace. You can customise this by clicking on the âPage Setupâ¦â button in the âPage Settingsâ pane of Compile.
	â¢	Font: You can use âQuick Font Overrideâ in Compile to change the font used throughout the final document (this is available from both the âSummaryâ and âAll Optionsâ tabs). Note that fonts are not included in e-books, howeverâe-readers choose their own fonts (and you would need to pay a hefty fee for a licence to embed a particular font in an e-book).
	â¢	Making your own special folders: The âCharactersâ and âPlacesâ folders are really just regular folders that have been set up in a particular way, and you are free to create other folders that work in a similar manner.
	1.	To create a folder with a custom icon, add a new folder, place it where you want it, ensure it is selected, and then go to Documents &gt; Change Icon to choose a different icon.
	2.	To create your own template sheets, simply create a new document inside the âTemplate Sheetsâ folder and set it up however you want (whether by adding text, changing the title, setting default meta-data, or whatever). Now this document will be available as the basis of new documents from the New From Template menu. (You can add a custom icon to this if you so wish, too.)
	3.	To set things up so that when the special folder created in (1) is selected and you hit âAddâ, a new document based on the template document you set up in (2) is created, select the folder and go to Documents &gt; Default New Subdocument Type and select the special template document you created.
	â¢	Working with chapters instead of scenes: By default, this project is set up so that you write each scene as a separate text document. If you donât like to break things up quite that much and would prefer to write an entire chapter in each text document, make the following changes:
	1.	Rename the âSceneâ document to use your chapter title and move it so that it is on the same level as the âChapterâ folder rather than being inside it.
	2.	Move the âChapterâ folder to the Trash.
	3.	Create a new text document for each chapter.
	4.	In the âSeparatorsâ pane of the Compile sheet (under âAll Optionsâ), change the âText separatorâ setting to âPage breakâ.
	5.	You can use the âReplacementsâ pane of Compile to replace or remove whatever scene separator you use when exporting or printing to different formats.
	â¢	Everything else: The above constitutes only the most common changes. You can completely change the output format by changing the various settings available under the âAll Optionsâ tab of Compile.

Sample Documents
The âSample Outputâ folder inside the Research folder contains examples of documents that have been created by compiling from this template. âStandard Manuscriptâ shows the results when compiling to âStandard Manuscript Formatâ; âPaperback Novelâ shows the results when compiling to âPaperback Novelâ format; âiBooks E-bookâ shows the results when compiling to âE-Bookâ format and opening the resulting epub file in iBooks on the iPad; and finally, âNaNoWriMo (Obfuscated)â shows the results when compiling to âNaNoWriMo (Obfuscated)ââa completely unreadable file but with the same word and character count as your text.

Final Note
Scrivener project templates are flexible and are not intended to restrict you to a particular workflow. You can change, delete or move the files and folders contained in the template, and you can create your own templates by setting up a skeletal project with the files, folders and settings you would like to use for new projects and using File &gt; Save As Template.

That's it! We wish you the best of luck in reaching your goal this year, and remember that if you win, you will receive a coupon which can be used to buy Scrivener for only 50% of the regular price. This coupon can be used for the Mac or Windows versions of Scrivener. And if you donât win, you can always enter âNANOWRIMOâ into the coupon code section of our store to get a 20% discount. (The âNANOWRIMOâ coupon can also be used to get 20% off our freeform note-taking app, Scapple, which may be useful for getting down ideas in the planning stages.)

Happy writing!
	âLiterature &amp; Latte Team</Text>
        </Document>
        <Document ID="3E8864C6-FDA1-4970-9499-D8D0535FB39A">
            <Title>First Steps</Title>
            <Text>Before you start implementing LambTracker we suggest you take some time to decide whether you even need it. Nearly every flock will require at least some sort of record keeping. Depending on your needs you may be best served by keeping a simple paper notebook. There are many cases though where the extensive records that can be easily kept in LambTracker will be useful. 
To help you determine whether LambTracker would be useful you should answer these questions. 

I know or need to know the sire and dam for each lamb born.
I maintain individual permanent ID on every sheep.

If you cannot answer yes to all of the above then itâs going to be difficult for you to use LambTracker. Assuming you can use LambTracker then you have to decide if you want or need to use this sort of system. To help you decide answer these questions. 

I need to track individual sheep performance including a variety of parameters that I decide on.
I need to know birth and other weights.
I am recording the flock with NSIP or LambPlan for EBV calculations.
I need to send in pedigree data to register lambs with my breed association.
I need to track slaughter withdrawals on an individual basis.

If you answer yes to all or most of these questions thent he features of LambTracker may prove useful for you.

For this set of questions the answers will determine whether you will be using all modules.

The LambTracker system consists of several parts:
The SQLite Database is the core of the LambTracker system. It is where all the data and information on the sheep is kept and updated. It contains the history of the flock and also plans for the future with breeding plans. The database system includes all drugs used, the contacts including veterinarians, suppliers, customers and data from outside sources like NSIP EBV calculations. As various modules have been implemented the database has been expanded to provide support for storing and accessing that data. The database is designed to be normalized to level 2 and has proven to be fairly robust as weâve added modules and data types. 
The second major piece of LambTracker is the Mobile Application. LambTracker Mobile is an Android application that uses bluetooth to talk to the EEID tag reader hardware. Within the application are several modules that are used to perform flock functions. LambTracker is designed to display properly on a Kindle Fire Android tablet. We are currently working to improve the display options for other sizes and types of Android tablets. Due to the large volume of data to display in most modules it is not recommended to try to run LambTracker on an Android mobile phone. 
The third piece of the LambTracker system is the Desktop Application. LambTracker desktop is used to set up the system. From the desktop you can add sheep, add drugs, contacts, and create reports. Setting up breeding plans, the sorting and removing sheep are all done within the desktop application.  There is no current desktop application. Our initial incarnation used Chrome browser to run the Android applicaiton but that is no loger available. 
A fourth optional piece of LambTracker is EID hardware and ear tags. While not required it can make collecting data much faster and read errors are much reduced. LambTracker is designed to work with any individual ID system you choose but it is critical that every sheep be identified as an individual. 

</Text>
        </Document>
        <Document ID="07D29C36-9159-44D6-BC3D-C208B175DAF5">
            <Title>Places</Title>
        </Document>
        <Document ID="EAAF0C44-5AF4-451D-AA9D-EEDFCA46E64D">
            <Title>Getting Started</Title>
        </Document>
        <Document ID="BAD00C6F-AE51-4E59-B995-FF451F35D72D">
            <Title>EvaluateSheep Code</Title>
            <Text>package com.weyr_associates.lambtracker;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.weyr_associates.lambtracker.EvaluateSheep.IncomingHandler;

import android.R.string;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.LightingColorFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.RatingBar;
import android.widget.TextView;
import android.database.Cursor;


public class EvaluateSheep extends Activity {
	
	public Button button;
	
	String     	cmd;
	Integer 	i;
	
	public int trait01, trait02, trait03, trait04, trait05, trait06, trait07, trait08, trait09, trait10;
	public int trait11, trait12, trait13, trait14, trait15;
	public int trait11_unitid, trait12_unitid, trait13_unitid, trait14_unitid, trait15_unitid;
	public String trait01_label, trait02_label, trait03_label, trait04_label, trait05_label, trait06_label, 
		trait07_label, trait08_label, trait09_label, trait10_label, trait11_label, trait12_label, 
		trait13_label, trait14_label, trait15_label ; 
	public String trait11_units, trait12_units, trait13_units, trait14_units, trait15_units; 
	
	public int sheep_id, thissheep_id;
	
	int 		id;
	int   		fedtagid, farmtagid, eidtagid;
	private int			    recNo;
	private int             nRecs;
	List&lt;Integer&gt; which_traits;
	
	public List&lt;String&gt; scored_evaluation_traits, data_evaluation_traits, trait_units;
	
	ArrayAdapter&lt;String&gt; dataAdapter;
	
	public RatingBar trait01_ratingbar ;
	public RatingBar trait02_ratingbar ;
	public RatingBar trait03_ratingbar ;
	public RatingBar trait04_ratingbar ;
	public RatingBar trait05_ratingbar ;
	public RatingBar trait06_ratingbar ;
	public RatingBar trait07_ratingbar ;
	public RatingBar trait08_ratingbar ;
	public RatingBar trait09_ratingbar ;
	public RatingBar trait10_ratingbar ;

	public Float trait01_data, trait02_data, trait03_data, trait04_data, trait05_data, trait06_data, trait07_data ;
	public Float trait08_data, trait09_data, trait10_data;
	public Float trait11_data, trait12_data, trait13_data, trait14_data, trait15_data;
	
	private DatabaseHandler dbh;
	private Cursor 	cursor;

	Messenger mService = null;
	boolean mIsBound;
	
	final Messenger mMessenger = new Messenger(new IncomingHandler());
	// variable to hold the string
	public String LastEID ;

	class IncomingHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case eidService.MSG_UPDATE_STATUS:
				Bundle b1 = msg.getData();
		
				break;
			case eidService.MSG_NEW_EID_FOUND:
				Bundle b2 = msg.getData();

				LastEID = (b2.getString("info1"));
//				We have a good whole EID number	
				gotEID ( null);	
				break;			
			case eidService.MSG_UPDATE_LOG_APPEND:
//				Bundle b3 = msg.getData();
//				Log.i("Evaluate ", "Add to Log.");
				
				break;
			case eidService.MSG_UPDATE_LOG_FULL:
//				Log.i("Evaluate ", "Log Full.");
				
				break;
			case eidService.MSG_THREAD_SUICIDE:
//				Log.i("Evaluate", "Service informed Activity of Suicide.");
				doUnbindService();
				stopService(new Intent(EvaluateSheep.this, eidService.class));
				
				break;
			default:
				super.handleMessage(msg);
			}
		}
	}
	
	 public ServiceConnection mConnection = new ServiceConnection() {
		public void onServiceConnected(ComponentName className, IBinder service) {
			mService = new Messenger(service);
//			Log.i("Evaluate", "At Service.");
			try {
				//Register client with service
				Message msg = Message.obtain(null, eidService.MSG_REGISTER_CLIENT);
				msg.replyTo = mMessenger;
				mService.send(msg);

				//Request a status update.
//				msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
//				mService.send(msg);
				
				//Request full log from service.
//				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
//				mService.send(msg);
				
			} catch (RemoteException e) {
				// In this case the service has crashed before we could even do anything with it
			}
		}
		public void onServiceDisconnected(ComponentName className) {
			// This is called when the connection with the service has been unexpectedly disconnected - process crashed.
			mService = null;
		}
	};    	

	private void CheckIfServiceIsRunning() {
		//If the service is running when the activity starts, we want to automatically bind to it.
//		Log.i("Evaluate", "At isRunning?.");
		if (eidService.isRunning()) {
//			Log.i("Evaluate", "is.");
			doBindService();
		} else {
//			Log.i("Evaluate", "is not, start it");
			startService(new Intent(EvaluateSheep.this, eidService.class));
			doBindService();
		}
//		Log.i("Evaluate", "Done isRunning.");
	} 	
	
	void doBindService() {
		// Establish a connection with the service.  We use an explicit
		// class name because there is no reason to be able to let other
		// applications replace our component.
//		Log.i("Evaluate", "At doBind1.");
		bindService(new Intent(this, eidService.class), mConnection, Context.BIND_AUTO_CREATE);
//		Log.i("Evaluate", "At doBind2.");

		mIsBound = true;
		

		if (mService != null) {
//			Log.i("Evaluate", "At doBind3.");
			try {
				//Request status update
				Message msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
				msg.replyTo = mMessenger;
				mService.send(msg);
//				Log.i("Evaluate", "At doBind4.");
				//Request full log from service.
				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
				mService.send(msg);
			} catch (RemoteException e) {}
		}
//		Log.i("Evaluate", "At doBind5.");
	}
	void doUnbindService() {
//		Log.i("Evaluate", "At DoUnbindservice");
		if (mService != null) {
		try {
			//Stop eidService from sending tags
			Message msg = Message.obtain(null, eidService.MSG_NO_TAGS_PLEASE);
			msg.replyTo = mMessenger;
			mService.send(msg);
			
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}
		if (mIsBound) {
			// If we have received the service, and hence registered with it, then now is the time to unregister.
			if (mService != null) {
				try {
					Message msg = Message.obtain(null, eidService.MSG_UNREGISTER_CLIENT);
					msg.replyTo = mMessenger;
					mService.send(msg);
				} catch (RemoteException e) {
					// There is nothing special we need to do if the service has crashed.
				}
			}
			// Detach our existing connection.
			unbindService(mConnection);
			mIsBound = false;
		}

	}    	
	
	// use EID reader to look up a sheep
	public void gotEID( View v )
   {
		Integer ii;
	   	//	make the scan eid button red
	   	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	   	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	   	// TODO
	   	clearBtn( null );  
	   	TextView TV = (TextView) findViewById (R.id.eidText);
	   	TV.setText( LastEID );
		Log.i("Evaluate", "Got EID " + LastEID);
		TV = (TextView) findViewById (R.id.inputText);
		TV.setText( LastEID );
		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off , sheep_table.alert01 " +
				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +	
				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
				"where id_type_table.id_typeid = 2 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", LastEID);
		Log.i("Got EID", " ready for command " + cmd); 
		Object crsr = dbh.exec( cmd ); 
    	cursor   = (Cursor) crsr;
    	dbh.moveToFirstRecord();
    	if( dbh.getSize() == 0 )
			{ // no sheep with that EID tag in the database so clear out and return
			clearBtn( null );
			TV = (TextView) findViewById( R.id.sheepnameText );
	    	TV.setText( "Cannot find this sheep." );
	    	return;
		}
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	Log.i("Got EID", " got sheep named  " + dbh.getStr(0)); 
    	sheep_id = dbh.getInt(1);
    	Log.i("Got EID", " sheep ID is " + String.valueOf(sheep_id));
    	thissheep_id = sheep_id;
    	Log.i("Got EID", " sheep ID is " + String.valueOf(thissheep_id));
//    	TV = (TextView) findViewById(R.id.eidText)	;
//    	TV.setText(dbh.getStr(3));
    	String alert_text = dbh.getStr(6);
    	Log.i("Got EID ", "Alert Text is " + alert_text);
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
//    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
			// make the alert button red and enable it and pop up the alert text
			btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
//		Now we need to get the farm tag for that sheep and fill the display with data
    	
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);

//    	Log.i("Evaluate ", cmd);    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a farm tag installed
			TV = (TextView) findViewById( R.id.farmText );
			TV.setText( "No tag" );
    	} else {
    		TextView TV5 = (TextView) findViewById(R.id.farmText)	;
    		TV5.setText(dbh.getStr(3));
    		Log.i(" got EID ", "now got a farm tag " + dbh.getStr(3));
//    		ii = dbh.getInt(1);
    		farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	}
//		Now we need to get the federal tag for the sheep
		
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);
    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
    	
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a federal tag installed
			TV = (TextView) findViewById( R.id.fedText );
			TV.setText( "No tag" );
    	} else {
        	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database   	
        	TextView TV5 = (TextView) findViewById(R.id.fedText)	;
        	Log.i(" got EID ", "now got a fed tag " + TV5);
        	TV5.setText(dbh.getStr(3));
        	ii = dbh.getInt(1);
    	}
		// TODO
    	
   }	

	@Override
    public void onCreate(Bundle savedInstanceState)	
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.evaluate_sheep);
        String 			dbname = getString(R.string.real_database_file); 
        String          cmd;
        Button 			btn;
        TextView TV;       
        Object 			crsr;
        dbh = new DatabaseHandler( this, dbname );
       
		CheckIfServiceIsRunning();
		
		cmd = "select * from last_eval_table";
    	crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        
    	trait01 = dbh.getInt(1);
    	cursor.moveToNext();	
    	trait02 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait03 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait04 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait05 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait06 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait07 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait08 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait09 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait10 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait11 = dbh.getInt(1);
    	trait11_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait12 = dbh.getInt(1);
    	trait12_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait13 = dbh.getInt(1);
    	trait13_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait14 = dbh.getInt(1);
    	trait14_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait15 = dbh.getInt(1);
    	trait15_unitid = dbh.getInt(2);
    	
    	cursor.close();
           
        if (trait01!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait01 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait01_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait02!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait02 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait02_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait03!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait03 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait03_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait04!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait04 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait04_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait05!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait05 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait05_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait06!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait06 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait06_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait07!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait07 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait07_lbl );
        TV.setText(dbh.getStr(0));
        }
        if (trait08!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait08 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait08_lbl );
        TV.setText(dbh.getStr(0));
//        Log.i("EvaluateSheep ", "after get the text " + TV);
        }
        if (trait09!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait09 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait09_lbl );
        TV.setText(dbh.getStr(0));
//        Log.i("EvaluateSheep ", "after get the text " + TV);
        }
        if (trait10!=0) {
        cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
        		"evaluation_trait_table.id_traitid=%s", trait10 );
        crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        TV = (TextView) findViewById( R.id.trait10_lbl );
        TV.setText(dbh.getStr(0));
//        Log.i("EvaluateSheep ", "after get the text " + TV);
        }
        if (trait11!=0) {
            cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
            		"evaluation_trait_table.id_traitid=%s", trait11 );
            crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            TV = (TextView) findViewById( R.id.trait11_lbl );
            TV.setText(dbh.getStr(0));
//            Log.i("EvaluateSheep ", "after get the text " + TV);
            }
        if (trait12!=0) {
            cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
            		"evaluation_trait_table.id_traitid=%s", trait12 );
            crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            TV = (TextView) findViewById( R.id.trait12_lbl );
            TV.setText(dbh.getStr(0));
//            Log.i("EvaluateSheep ", "after get the text " + TV);
            }
        if (trait13!=0) {
            cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
            		"evaluation_trait_table.id_traitid=%s", trait13 );
            crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            TV = (TextView) findViewById( R.id.trait13_lbl );
            TV.setText(dbh.getStr(0));
//            Log.i("EvaluateSheep ", "after get the text " + TV);
            }
        if (trait14!=0) {
            cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
            		"evaluation_trait_table.id_traitid=%s", trait14 );
            crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            TV = (TextView) findViewById( R.id.trait14_lbl );
            TV.setText(dbh.getStr(0));
//            Log.i("EvaluateSheep ", "after get the text " + TV);
            }
        if (trait15!=0) {
            cmd = String.format("select evaluation_trait_table.trait_name from evaluation_trait_table where " +
            		"evaluation_trait_table.id_traitid=%s", trait15 );
            crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            TV = (TextView) findViewById( R.id.trait15_lbl );
            TV.setText(dbh.getStr(0));
//            Log.i("EvaluateSheep ", "after get the text " + TV);
            }
        cursor.close();
       	// make the alert button normal and disabled
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false);    
        	}
    public void saveScores( View v )
    {    	
    	String 			dbname = getString(R.string.real_database_file); 
        String          cmd;    
        Object 			crsr;
    	TextView TV;
    	String temp_string;
    	trait11_data = 0.0f;
    	trait12_data = 0.0f;
    	trait13_data = 0.0f;
    	trait14_data = 0.0f;
    	trait15_data = 0.0f;
    	// I got the sheep id from the search by federal or farm or EID tag
    	// it's in the sheep_id variable
    	
//    	Log.i("in save scores", " sheep id is " + String.valueOf(sheep_id));    
    	// Get the rating bar scores
    		trait01_ratingbar = (RatingBar) findViewById(R.id.trait01_ratingbar);
    		trait01_data = trait01_ratingbar.getRating();
//    		Log.i("trait01_ratingbar ", String.valueOf(trait01_data));
    		
    		trait02_ratingbar = (RatingBar) findViewById(R.id.trait02_ratingbar);
    		trait02_data = trait02_ratingbar.getRating();
//    		Log.i("trait02_ratingbar ", String.valueOf(trait02_data));
    		
    		trait03_ratingbar = (RatingBar) findViewById(R.id.trait03_ratingbar);
    		trait03_data = trait03_ratingbar.getRating();	
//    		Log.i("trait03_ratingbar ", String.valueOf(trait03_data));
    		
    		trait04_ratingbar = (RatingBar) findViewById(R.id.trait04_ratingbar);
    		trait04_data = trait04_ratingbar.getRating();
//    		Log.i("trait04_ratingbar ", String.valueOf(trait04_data));
    		
    		trait05_ratingbar = (RatingBar) findViewById(R.id.trait05_ratingbar);
    		trait05_data = trait05_ratingbar.getRating();
//    		Log.i("trait05_ratingbar ", String.valueOf(trait05_data));
    		
    		trait06_ratingbar = (RatingBar) findViewById(R.id.trait06_ratingbar);
    		trait06_data = trait06_ratingbar.getRating();
//    		Log.i("trait06_ratingbar ", String.valueOf(trait06_data));
    		
    		trait07_ratingbar = (RatingBar) findViewById(R.id.trait07_ratingbar);
    		trait07_data = trait07_ratingbar.getRating();
//    		Log.i("trait07_ratingbar ", String.valueOf(trait07_data));
    		
       		trait08_ratingbar = (RatingBar) findViewById(R.id.trait08_ratingbar);
    		trait08_data = trait08_ratingbar.getRating();
//    		Log.i("trait08_ratingbar ", String.valueOf(trait08s_data));
    		
    		trait09_ratingbar = (RatingBar) findViewById(R.id.trait09_ratingbar);
    		trait09_data = trait09_ratingbar.getRating();
//    		Log.i("trait09_ratingbar ", String.valueOf(trait09_data));
    		
    		trait10_ratingbar = (RatingBar) findViewById(R.id.trait10_ratingbar);
    		trait10_data = trait10_ratingbar.getRating();
//    		Log.i("trait10_ratingbar ", String.valueOf(trait10_data));
    		
    		// get the real data scores
    		
    		TV = (TextView) findViewById(R.id.trait11_data);
    		temp_string = TV.getText().toString();
    		if(TextUtils.isEmpty(temp_string)){
    	        // EditText was empty
    	        // so no real data collected just break out
    			trait11_data = 0.0f;
//    			Log.i("save trait11", "float data is " + String.valueOf(trait11_data));
    			trait11_unitid = 0;
    	    }
    		else {
    			trait11_data = Float.valueOf(TV.getText().toString());
    			Log.i("save trait11", "float data is " + String.valueOf(trait11_data));
    			Log.i("trait11_units ", String.valueOf(trait11_units));
    		}
    		
    		TV = (TextView) findViewById(R.id.trait12_data);
    		temp_string = TV.getText().toString();
    		if(TextUtils.isEmpty(temp_string)){
    	        // EditText was empty
    	        // so no real data collected just break out
    			trait12_data = 0.0f;
//    			Log.i("save trait12", "float data is " + String.valueOf(trait12_data));
    			trait12_unitid = 0;
    	    }
    		else {
    			trait12_data = Float.valueOf(temp_string);
        		Log.i("save trait12", "float data is " + String.valueOf(trait12_data));
        		Log.i("trait12_units ", String.valueOf(trait12_units));
    		}
    		
       		TV = (TextView) findViewById(R.id.trait13_data);
    		temp_string = TV.getText().toString();
    		if(TextUtils.isEmpty(temp_string)){
    	        // EditText was empty
    	        // so no real data collected just break out
    			trait13_data = 0.0f;
//    			Log.i("save trait12", "float data is " + String.valueOf(trait12_data));
    			trait13_unitid = 0;
    	    }
    		else {
    			trait13_data = Float.valueOf(temp_string);
//        		Log.i("save trait13", "float data is " + String.valueOf(trait13_data));
//        		Log.i("trait13_units ", String.valueOf(trait13_units));
    		}
    		
       		TV = (TextView) findViewById(R.id.trait14_data);
    		temp_string = TV.getText().toString();
    		if(TextUtils.isEmpty(temp_string)){
    	        // EditText was empty
    	        // so no real data collected just break out
    			trait14_data = 0.0f;
//    			Log.i("save trait14", "float data is " + String.valueOf(trait14_data));
    			trait14_unitid = 0;
    	    }
    		else {
    			trait14_data = Float.valueOf(temp_string);
//        		Log.i("save trait14", "float data is " + String.valueOf(trait14_data));
//        		Log.i("trait14_units ", String.valueOf(trait14_units));
    		}
    		
       		TV = (TextView) findViewById(R.id.trait15_data);
    		temp_string = TV.getText().toString();
    		if(TextUtils.isEmpty(temp_string)){
    	        // EditText was empty
    	        // so no real data collected just break out
    			trait15_data = 0.0f;
//    			Log.i("save trait12", "float data is " + String.valueOf(trait15_data));
    			trait15_unitid = 0;
    	    }
    		else {
    			trait15_data = Float.valueOf(temp_string);
//        		Log.i("save trait15", "float data is " + String.valueOf(trait15_data));
//        		Log.i("trait15_units ", String.valueOf(trait15_units));
    		}
    		// I need to get the traits scored for this pass here:
    		
    		String mytoday = TodayIs();
    		// added time stamp here for Dr. Purdy in finction TodayIs()
//    		Log.i("Date is ", mytoday);
   		
    		// Now that I have all the data I need to write it into the sheep_evaluation_table
    		
//	    	Log.i("number ","eval trait01 "+String.valueOf(trait01));
//	    	Log.i("number ","eval trait02 "+String.valueOf(trait02));
//	    	Log.i("number ","eval trait03 "+String.valueOf(trait03));
//	    	Log.i("number ","eval trait04 "+String.valueOf(trait04));
//	    	Log.i("number ","eval trait05 "+String.valueOf(trait05));
//	    	Log.i("number ","eval trait06 "+String.valueOf(trait06));
//	    	Log.i("number ","eval trait07 "+String.valueOf(trait07));
//	    	Log.i("number ","eval trait08 "+String.valueOf(trait08));
//	    	Log.i("number ","eval trait09 "+String.valueOf(trait09));
//	    	Log.i("number ","eval trait10 "+String.valueOf(trait10));
//    		
//	    	Log.i("number ","eval trait11 "+String.valueOf(trait11));
//	    	Log.i("number ","eval trait11 units "+String.valueOf(trait11_unitid));
//	    	Log.i("number ","eval trait12 "+String.valueOf(trait12));
//	    	Log.i("number ","eval trait12 units "+String.valueOf(trait12_unitid));
//	    	Log.i("number ","eval trait13 "+String.valueOf(trait13));
//	    	Log.i("number ","eval trait13 units "+String.valueOf(trait13_unitid));
//	    	Log.i("number ","eval trait14 "+String.valueOf(trait14));
//	    	Log.i("number ","eval trait14 units "+String.valueOf(trait14_unitid));
//	    	Log.i("number ","eval trait15 "+String.valueOf(trait15));
//	    	Log.i("number ","eval trait15 units "+String.valueOf(trait15_unitid));
    		       		
    		cmd = String.format("insert into sheep_evaluation_table (sheep_id, " +
    		"trait_name01, trait_score01, trait_name02, trait_score02, trait_name03, trait_score03, " +
    		"trait_name04, trait_score04, trait_name05, trait_score05, trait_name06, trait_score06," +
    		"trait_name07, trait_score07, trait_name08, trait_score08, trait_name09, trait_score09, " +
    		"trait_name10, trait_score10, trait_name11, trait_score11, trait_name12, trait_score12, " +
    		"trait_name13, trait_score13, trait_name14, trait_score14, trait_name15, trait_score15, " +
    		"trait_units11, trait_units12, trait_units13, trait_units14, trait_units15, eval_date) " +
    		"values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s," +
    		"%s,%s,%s,%s,%s,%s,%s,%s,%s,'%s') ", 
    				sheep_id, trait01, trait01_data, trait02, trait02_data, trait03, trait03_data,
    				trait04, trait04_data, trait05, trait05_data, trait06, trait06_data,
    				trait07, trait07_data, trait08, trait08_data, trait09, trait09_data, 
    				trait10, trait10_data, trait11, trait11_data, trait12, trait12_data, 
    				trait13, trait13_data, trait14, trait14_data, trait15, trait15_data, 
    				trait11_unitid, trait12_unitid, trait13_unitid, trait14_unitid, trait15_unitid, mytoday );
    		
//    		Log.i("save eval ", cmd);
    		dbh.exec( cmd );
    		cmd = String.format("select sheep_table.alert01 from sheep_table where sheep_table.sheep_id=%d", sheep_id);    		
    		crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            
            String alert_text = (dbh.getStr(0));
            Log.i ("Evaluate Alert", " Alert Text is " + alert_text);
    		alert_text = alert_text + "\n" + "Evaluation Done";
    		
            Log.i ("Evaluate Alert", " Alert Text is " + alert_text);

    		cmd = String.format("update sheep_table set alert01='%s' where sheep_id=%d", alert_text, sheep_id);
//    		Log.i("test alert ", cmd);   
    		dbh.exec( cmd );
    		cursor.close();
    		clearBtn( null );
    }
	
	   public void backBtn( View v )
	    {
//		   	Log.i("evaluate", " Back button pressed before close DB");
		   	dbh.closeDB();
//		   	Log.i("evaluate", " Back button pressed after close DB");
		   	doUnbindService();
			stopService(new Intent(EvaluateSheep.this, eidService.class));
			clearBtn( null );   	
			finish();
	    }
	 
	public void showAlert(View v)
	{
		String	alert_text;
		String 			dbname = getString(R.string.real_database_file); 
        String          cmd;    
        Object 			crsr;
 //       	dbh = new DatabaseHandler( this, dbname );
		// Display alerts here   	
				AlertDialog.Builder builder = new AlertDialog.Builder( this );
				cmd = String.format("select sheep_table.alert01 from sheep_table where sheep_id =%d", sheep_id);
				Log.i("evalGetAlert ", cmd);  
				crsr = dbh.exec( cmd );
		        cursor   = ( Cursor ) crsr;
		        dbh.moveToFirstRecord();		       
		        alert_text = (dbh.getStr(0));
		        Log.i("evalShowAlert ", alert_text); 
				builder.setMessage( alert_text )
			           .setTitle( R.string.alert_warning );
				builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
			           public void onClick(DialogInterface dialog, int idx) {
			               // User clicked OK button   	  
			               }
			       });		
				AlertDialog dialog = builder.create();
				dialog.show();
//				cursor.close();
	}
	
	
	public void helpBtn( View v )
    {
   	// Display help here   	
		AlertDialog.Builder builder = new AlertDialog.Builder( this );
		builder.setMessage( R.string.help_evaluate )
	           .setTitle( R.string.help_warning );
		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
	           public void onClick(DialogInterface dialog, int idx) {
	               // User clicked OK button 
	        	  
	               }
	       });		
		AlertDialog dialog = builder.create();
		dialog.show();
		
    }
	public void clearBtn( View v )
    {
		// clear out the display of everything
		TextView TV ;
		Button btn;
		TV = (TextView) findViewById( R.id.inputText );
		TV.setText( "" );		
		TV = (TextView) findViewById( R.id.sheepnameText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.fedText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.farmText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.eidText );
		TV.setText( "" );
//		Log.i("Clear btn", "Before clear rating bars");
		trait01_ratingbar = (RatingBar) findViewById(R.id.trait01_ratingbar);
		trait01_ratingbar.setRating(0.0f);
		trait02_ratingbar = (RatingBar) findViewById(R.id.trait02_ratingbar);
		trait02_ratingbar.setRating(0.0f);
		trait03_ratingbar = (RatingBar) findViewById(R.id.trait03_ratingbar);
		trait03_ratingbar.setRating(0.0f);
		trait04_ratingbar = (RatingBar) findViewById(R.id.trait04_ratingbar);
		trait04_ratingbar.setRating(0.0f);
		trait05_ratingbar = (RatingBar) findViewById(R.id.trait05_ratingbar);
		trait05_ratingbar.setRating(0.0f);
		trait06_ratingbar = (RatingBar) findViewById(R.id.trait06_ratingbar);
		trait06_ratingbar.setRating(0.0f);
		trait07_ratingbar = (RatingBar) findViewById(R.id.trait07_ratingbar);
		trait07_ratingbar.setRating(0.0f);
		trait08_ratingbar = (RatingBar) findViewById(R.id.trait08_ratingbar);
		trait08_ratingbar.setRating(0.0f);
		trait09_ratingbar = (RatingBar) findViewById(R.id.trait09_ratingbar);
		trait09_ratingbar.setRating(0.0f);
		trait10_ratingbar = (RatingBar) findViewById(R.id.trait10_ratingbar);
		trait10_ratingbar.setRating(0.0f);
//		Log.i("Clear btn", "After clear rating bars");
		TV = (TextView) findViewById( R.id.trait11_data );
		TV.setText ( "" );
		TV = (TextView) findViewById( R.id.trait12_data );
		TV.setText ( "" );
		TV = (TextView) findViewById( R.id.trait13_data );
		TV.setText ( "" );
		TV = (TextView) findViewById( R.id.trait14_data );
		TV.setText ( "" );
		TV = (TextView) findViewById( R.id.trait15_data );
		TV.setText ( "" );
       	// make the alert button normal and disabled
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false); 
    	//Make the scan button normal
    	btn = (Button) findViewById( R.id.scan_eid_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFF000000));  
    	// Enable Save Scores button and make it normal to get set for next sheep
    	btn = (Button) findViewById( R.id.save_evaluation_scores_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFF000000));        	
    	btn.setEnabled(true);
    	
    }
	   private String TodayIs() {
			Calendar calendar = Calendar.getInstance();
			int day = calendar.get(Calendar.DAY_OF_MONTH);
			int month = calendar.get(Calendar.MONTH);
			int year = calendar.get(Calendar.YEAR);
	        //12 hour format
//			int hour = cal.get(Calendar.HOUR);
	        //24 hour format
			int hourofday = calendar.get(Calendar.HOUR_OF_DAY);
			int minute = calendar.get(Calendar.MINUTE);
			int second = calendar.get(Calendar.SECOND);
			  
			return year + "-" + Make2Digits(month + 1) + "-" +  Make2Digits(day) + "_" + Make2Digits(hourofday) + ":" + Make2Digits(minute) + ":" + Make2Digits(second) ;
		}
	    private String Make2Digits(int i) {
			if (i &lt; 10) {
				return "0" + i;
			} else {
				return Integer.toString(i);
			}
		}	
//  user clicked 'Scan' button    
 public void scanEid( View v){
 	// Here is where I need to get a tag scanned and put the data into the variable LastEID
		if (mService != null) {
		try {
			//Start eidService sending tags
			Message msg = Message.obtain(null, eidService.MSG_SEND_ME_TAGS);
			msg.replyTo = mMessenger;
			mService.send(msg);
		   	//	make the scan eid button green
	    	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0x0000FF00, 0xff00ff00));			
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}    	    	
 }
 
	 // user clicked 'Search Fed' button
    public void searchFedTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			fed = TV.getText().toString();
    	Log.i("Evaluate ", " federal tag is " + fed);
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( fed != null &amp;&amp; fed.length() &gt; 0 )
    		{
//			Search for the sheep with the entered federal tag number. 
//    		assumes no duplicate federal tag numbers, ok for our flock not ok for the general case
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off , sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +	
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", fed);
//    		Log.i("Evaluate ", cmd);
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd ); 
    	cursor   = (Cursor) crsr;
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
    		{ // no sheep with that federal tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
// This section would allow for multiple sheep with same tag if we implement next and previous
//    	buttons but is commented out for now as our sheep have unique federal tags
//    	if( dbh.getSize() &gt;1){
//
// 			Enable the previous and next record buttons
//    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
//    		btn2.setEnabled(true);  
//    		//	Set up the various pointers and cursor data needed to traverse the sequence
//    		recNo    = 1;
//    		cursor   = (Cursor) crsr;
//    		nRecs    = cursor.getCount();
//    		colNames = cursor.getColumnNames();
//    		cursor.moveToFirst();
//    	}
		
		// TODO
    	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
		Log.i("Evaluate", " id infor table id is " + String.valueOf(fedtagid));
		
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	Log.i("Evaluate", " sheep name is " + dbh.getStr(0));
    	sheep_id = dbh.getInt(1);
    	thissheep_id = sheep_id;
    	Log.i("Evaluate", " sheep id is " + String.valueOf(thissheep_id));
    	TV = (TextView) findViewById(R.id.fedText)	;
    	TV.setText(dbh.getStr(3));
    	Log.i("Evaluate", " sheep fed tag is " + dbh.getStr(3));
    	String alert_text = dbh.getStr(6);
    	Log.i("Evaluate", " sheep alert text is " + alert_text);
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
//		if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
			// make the alert button red and enable it and pop up the alert text
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
		
    	
//		Now we need to get the farm tag for that sheep and fill the display with data
    	
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);

    	Log.i("Evaluate ", "ready to get farm tags cmd is " + cmd);    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a farm tag installed
			TV = (TextView) findViewById( R.id.farmText );
			TV.setText( "No tag" );
    	} else {
    		TextView TV5 = (TextView) findViewById(R.id.farmText)	;
    		TV5.setText(dbh.getStr(3));
    		ii = dbh.getInt(1);
    		farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	}
    	}
// 	user clicked 'Search Farm Tag' button
    public void searchFarmTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			farm = TV.getText().toString();
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( farm != null &amp;&amp; farm.length() &gt; 0 )
    		{
//			Search for the sheep with the entered farm tag number. 
//    		assumes no duplicate farm tag numbers, ok for our flock not ok for the general case  
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off, sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", farm);
    		
//    		Log.i("Evaluate", "building command search for farm tag ");
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd );   	
    	dbh.moveToFirstRecord();
    	if( dbh.getSize() == 0 )
    		{ // no sheep with that farm tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
//Need to add next and previous buttons if we have duplicate farm tags
//    	if( dbh.getSize() &gt;1){
//
// 			Enable the previous and next record buttons
//    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
//    		btn2.setEnabled(true);  
//    		//	Set up the various pointers and cursor data needed to traverse the sequence
//    		recNo    = 1;
//    		cursor   = (Cursor) crsr;
//    		nRecs    = cursor.getCount();
////    		colNames = cursor.getColumnNames();
//    		cursor.moveToFirst();
//    	}
    	
    	farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	sheep_id = dbh.getInt(1);
    	TV = (TextView) findViewById(R.id.farmText)	;
    	TV.setText(dbh.getStr(3));
    	ii = dbh.getInt(1);
    	
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
    	String alert_text = dbh.getStr(6);
//    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
			// make the alert button red and enable it and pop up the alert text
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
//		Now we need to get the rest of the tags and fill the display with data
		
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", ii);
    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
    	
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a federal tag installed
			TV = (TextView) findViewById( R.id.fedText );
			TV.setText( "No tag" );
    	} else {
        	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database   	
        	TextView TV5 = (TextView) findViewById(R.id.fedText)	;
        	TV5.setText(dbh.getStr(3));
        	ii = dbh.getInt(1);
    	}
    	}    
        
    // user clicked the "next record" button
    public void nextBtn( View v)
    {
    	TextView 	TV;
    	Integer		ii;
    	String		cmd;
    	if (recNo == (nRecs-1)) {
    		// at end so disable next record button
    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
        	btn2.setEnabled(false);   		
    	}
    	if ( cursor.moveToNext() ){
    		// I've moved forward so I need to enable the previous record button
    		Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
    		btn3.setEnabled(true);
//        	id = dbh.getInt( 0 ); // Get the primary key from the current record
//        	Log.i ("DoSheepTask", "In if statement next button and the record id is " + String.valueOf(id) );
    		recNo         += 1;
//display stuff here
		}
    	else {
    		//At the end so disable the next button
           	Button btn2 = (Button) findViewById( R.id.next_rec_btn );
        	btn2.setEnabled(false); 
        	recNo         -= 1;
    	}
    }

    // user clicked the "previous record" button
    public void prevBtn( View v)
    {
    	TextView TV;
    	Integer		ii;
    	String		cmd;
    	if ( cursor.moveToPrevious() ){
    		// I've moved back so enable the next record button
    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
    		btn2.setEnabled(true);  
//        	id = dbh.getInt( 0 ); // Get the primary key from the current record
 //       	Log.i ("DoSheepTask", "In if statement prev button and the record id is " + String.valueOf(id) );
    		recNo  -= 1;
 //display stuff here
		}
    	else {
    		// at beginning so disable the previous button
        	Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
        	btn3.setEnabled(false);
        	recNo         += 1;
    	}
    	if (recNo == 1) {
    		// at beginning so disable prev record button
    		Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
        	btn3.setEnabled(false);   		
    	}
    }


}
</Text>
        </Document>
        <Document ID="E45956D2-D7A1-4A95-8350-FB7FD0C2B314">
            <Title>Cover</Title>
        </Document>
        <Document ID="73CAD068-E9E6-46FD-BB84-1E149C2E84A2">
            <Title>Appendix</Title>
        </Document>
        <Document ID="E3D852D9-0786-4E5C-9CAC-3B4D1B361AC7">
            <Title>Manuscript Format</Title>
        </Document>
        <Document ID="2CC154F6-B447-4A52-B599-40600AAD6EBB">
            <Title>December</Title>
            <Text>December started very cold and snowy. The ewes had been sorted into breeding groups and the primary breeding rams were put in. Keith and Caitlin donât normally use any raddle marker or breeding harnesses on their rams but they do watch them to see if breeding activity is going on. The primary ram was actively breeding his ewes within minutes. 
The other ewe group had been bred via artificial insemination so they were in the waiting period before a backup ram would be introduced. 
There isnât much work for shepherds during December so LambTracker doesnât get much use this month. The only  real big event is once the primary breeding rams are removed from their ewe groups the ewes are re-sorted into groups for a second backup breeding ram. The procedures for setting this breeding record up and for sorting the ewes are the same as those for setting up a primary breeding. 
One key task is to give all the sheep a winter deworming. Keith and Caitlin live in an area where there are a number of parasites that overwinter in the sheep. Most of the local veterinarians recommend giving the entire flock a dewormer to kill nose bots after a good hard frost. 
LambTracker management and medication module is where you set up a deworming task. Keith brought up LambTracker desktop on his Linux computer. Caitlin and already entered in a number of drugs into the system with the drug trade name, the generic name, the drug manufacturer, the lot number, the expiration date, the drug dosage, the administration options and the official slaughter withdrawal time. Since many of the drugs used for sheep in the United States are used off label LambTracker also allows the shepherd to enter in the veterinarian who prescribed the drug and any user defined slaughter withdrawal date as long as it is more than the official one. 
As part of defining a drug record Keith included the dosage based on weight that they planned to use. He also entered in a slaughter withdrawal that was twice the official withdrawal. Keith and Caitlin routinely double the federal slaughter withdrawal time for any treatment they give their sheep. Their customer base demands the traceability and the additional time. 
As they ran the sheep through the sweep Caitlin administered the wormer to each animal. Keith clicked the wormer checkbox on the management screen after verifying that the drug to be given was the one they were using that day. A drug record for each animal was created that also included the default location or route of administration. As each record was updated an alert was set for reach sheep that indicated that they had a slaughter withdrawal hold until the date set based on how many days was in the user slaughter withdrawal for that drug record. 

</Text>
        </Document>
        <Document ID="842EED55-583A-4AF6-853D-2D4F15BA77B3">
            <Title>Caitlin Morgan</Title>
            <Text>Caitlin Morgan

	Role in Story:	Shepherd
	Occupation:	Sheep Farmer
Â 	

Physical Description:	

	Personality:	

	Habits/Mannerisms:	
Â 	

	Background:	

	Internal Conflicts:	

	External Conflicts:	 
Â 	

	Notes:	</Text>
        </Document>
        <Document ID="FC4841FE-B6D8-489C-AF4B-4947C9961E67">
            <Title>Standard Manuscript</Title>
            <Text>Andrew Nonymous
Your manuscript should
have your address
and contact details
on the title page only.
If you have an agent, your
agent's address can be
included beneath.
700 words.
NOVEL STANDARD MANUSCRIPT FORMAT
         by A. Nonymous
                          CHAPTER ONE
                 Folder Names Become Subtitles
     Standard manuscript format is often required for novels
so that work can easily be read by editors. It allows editors
to estimate word count and determine roughly how many pages
will be required to produce a book using the page size, style
and font used by their house. This PDF file was generated
using Scrivener's Compile feature and was created using the
"Novel" project template.
     Manuscripts for full-length novels require a separate
title page. The author's name, address, telephone number and
e-mail address should be shown in the upper-left corner of the
title page, single-spaced. The title of the story should
appear in all-caps about half-way down the page. The author's
name follows the title on the by-line as the author wants it
to appear when published. A real name or pseudonym may be used
Surname / TITLE / 1
and may include initials, actual given name or professional
designation.
     All text should be double-spaced and left-justified with
a ragged right margin. Paragraphs should be indented by about
five spaces (half an inch) and not separated by an additional
blank line. (It used to be traditional to separate each
sentence with two spaces, but in these days of word processors
this is now less common.) A 12-point font such as Courier,
Times New Roman or Arial should be used throughout. In
Scrivener, however, you can write using any font and
formatting you choose - the "Formatting" pane of the Compile
sheet can be used to change the formatting in the compiled
document. In the "Novel" project template, the Compile
settings will deal with changing the font and formatting to
those required for standard manuscript format.
     Top, bottom, left and right margins should all be
approximately one inch, not allowing for the page header. Each
page except for the title page should include a header
comprising the author's real surname, the title of the work
(or a key word from the title) in capitals, and the page
number. In Scrivener, all of this is handled in the "Page
Settings" pane of the Compile sheet.
                               #
     Scene breaks are indicated with the hash character. Do
Surname / TITLE / 2
not simply add an extra line space as this can be missed by
the typesetter. The "Separators" pane of Scrivener's Compile
sheet can handle this for you if you are writing each scene as
a separate text document.
     Indicate italics by underlining. In Scrivener, you can
use italics and set them to be converted to underlines upon
export or print by using "Convert italics to underlines" in
the "Transformations" pane of the Compile sheet.
Surname / TITLE / 3
  
                          CHAPTER TWO
                    Another Chapter Folder
     Begin each new chapter on a new page like this with the
chapter number about a third of the way down the page. In
Scrivener, this can all be dealt with in the Compile settings.
The "Separators" pane of the Compile sheet can be set to start
a new page for each chapter folder, and the "Formatting" pane
can be used to add page padding at the top of the new page and
insert the chapter number (the latter using the "Level
Settings"). All of this has already been done for you in the
"Novel" project template.
     Although it is often said that writers should not use the
word-count features of their computers to determine the number
of words in a manuscript, most publishers and editors will
happily accept a word processor word count these days. In
Scrivener, you can insert a word count of your manuscript by
Surname / TITLE / 4
using Edit &gt; Insert &gt; Draft Word Count (for a manuscript, you
may wish to have the word count rounded to the nearest 100, in
which case select Edit &gt; Insert &gt; Draft Word Count &gt; Rounded
To Nearest 100--this feature is used on the title page of this
manuscript, in fact). Note that the actual word count will not
be inserted, but a tag that will be substituted for the word
count upon export. In reality, the formatting of a manuscript
is often only really crucial when submitting directly to a
publisher--first time novelists will usually submit to an
agent first, and agents are often less picky about format and
will point you in the right direction before submitting your
work to a publisher.
                               #
     Much of the information contained in this document is
based on a description of novel manuscript format by Matt
Carless for the BBC Writers' Room website: http://
www.bbc.co.uk/writersroom
&lt;&lt;&lt;&lt;&gt;&gt;&gt;&gt;
Surname / TITLE / 5
</Text>
        </Document>
        <Document ID="E81B2DDA-56CE-4D5B-A6BD-F4FBFA9B4CF0">
            <Title>ConvertToEID XML</Title>
            <Text>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

   &lt;GridLayout 
        	android:id="@+id/grid1"
	        android:layout_width="wrap_content"
			android:layout_height="wrap_content"
        	android:columnCount="3"
       		android:rowCount="3"&gt;
        
           &lt;TextView
            android:layout_width="150dp"
            android:layout_height="wrap_content"     
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/input_id_lbl" /&gt;
           
           &lt;EditText
            android:id="@+id/inputText"
            android:layout_width="150dp"
            android:layout_height="wrap_content"
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="1"
            android:enabled="true"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
            &lt;requestFocus /&gt;
            &lt;/EditText&gt;
            
  			&lt;TextView
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
        	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
        	android:text="@string/sheep_name_lbl" /&gt;
        
        &lt;TextView
        	android:id="@+id/sheepnameText"
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
           	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:ems="10"
        	android:gravity="left"
        	android:textSize="18sp"
        	android:typeface="monospace" /&gt;       
       &lt;/GridLayout&gt;  
   
    &lt;GridLayout
        android:id="@+id/grid2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="6" &gt;

        &lt;Button
            android:id="@+id/search_fed_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFedTag"
            android:text="@string/search_fed_btn" 
            android:textSize="14sp"/&gt;
 
        &lt;Button
            android:id="@+id/search_farm_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="1"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFarmTag"
            android:text="@string/search_farm_btn" 
            android:textSize="14sp"/&gt;
       
        &lt;Button
            android:id="@+id/scan_eid_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="scanEid"
            android:text="@string/scan_add_eid_btn"
            android:textSize="14sp" /&gt;
        &lt;Button
            android:id="@+id/clear_form_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="1"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:onClick="clearBtn"
            android:text="@string/clear_btn"
            android:textSize="14sp" /&gt;
          
       &lt;Button
            android:id="@+id/alert_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:onClick="showAlert"
            android:text="@string/alert_btn"
            android:textSize="14sp" /&gt; 
        
        &lt;Button
            android:id="@+id/add_new_tag_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:onClick="addNewTag"
            android:text="@string/add_new_tag_btn"
            android:textSize="14sp" /&gt;
               
       &lt;Button
            android:id="@+id/update_database_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="3"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="updateDatabase"
            android:text="@string/update_database_btn"
            android:textSize="14sp" /&gt;
 
    &lt;/GridLayout&gt;
    	
        &lt;GridLayout
        android:id="@+id/grid3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:columnCount="6"
        android:rowCount="6" &gt;

        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/federal_id_lbl" /&gt;

        &lt;EditText
            android:id="@+id/fedText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="1"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
        &lt;/EditText&gt;

        &lt;TextView
            android:layout_width="125dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/tag_color_lbl" /&gt;

        &lt;EditText
            android:id="@+id/fed_colorText"
            android:layout_width="125dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
        &lt;/EditText&gt;
        
        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/tag_location_lbl" /&gt;

        &lt;EditText
            android:id="@+id/fed_locationText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="1"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
        &lt;/EditText&gt;
        &lt;Button
            android:id="@+id/remove_fedtag_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="3"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:onClick="removeFedTag"
            android:text="@string/remove_fedtag_btn"
            android:textSize="14sp" /&gt;
               
        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="2"
            android:inputType="none"
            android:text="@string/farm_id_lbl" /&gt;

        &lt;EditText
            android:id="@+id/farmText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="3"
            android:enabled="true"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" /&gt;
      
        &lt;TextView
            android:layout_width="125dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="2"
            android:inputType="none"
            android:text="@string/tag_color_lbl" /&gt;

        &lt;EditText
            android:id="@+id/farm_colorText"
            android:layout_width="125dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="3"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
        &lt;/EditText&gt;
        
        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="2"
            android:inputType="none"
            android:text="@string/tag_location_lbl" /&gt;

        &lt;EditText
            android:id="@+id/farm_locationText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="3"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
        &lt;/EditText&gt;
        
        &lt;Button
            android:id="@+id/remove_farmtag_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="3"
            android:layout_gravity="left|top"
            android:layout_row="3"
            android:onClick="removeFarmTag"
            android:text="@string/remove_farmtag_btn"
            android:textSize="14sp" /&gt;
        
        &lt;/GridLayout&gt;
       &lt;GridLayout
        android:id="@+id/grid4"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:columnCount="3"
        android:rowCount="4" &gt; 
              
        &lt;TextView
            android:layout_width="215dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/electronic_id_lbl" /&gt;
        
        &lt;EditText
            android:id="@+id/eidText"
            android:layout_width="215dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="1"
            android:enabled="true"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" /&gt;  
        
        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/tag_location_lbl" /&gt;

        &lt;Spinner
  	  		android:id="@+id/eid_tag_location_spinner"
  	  		android:layout_width="180dp"
  	  		android:layout_height="wrap_content"
  	  		android:layout_column="1"
      		android:layout_gravity="left"
      		android:layout_row="1"
  	  		android:textSize="18sp"/&gt;
        
        &lt;TextView
            android:layout_width="125dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="2"
            android:inputType="none"
            android:text="@string/tag_color_lbl" /&gt;
        
        &lt;Spinner
  	  		android:id="@+id/eid_tag_color_spinner"
  	  		android:layout_width="180dp"
  	  		android:layout_height="wrap_content"
  	  		android:layout_column="0"
      		android:layout_gravity="left"
      		android:layout_row="3"
  	  		android:textSize="18sp"/&gt;
        &lt;/GridLayout&gt;

&lt;RelativeLayout
    android:id="@+id/RelativeLayout02"
    android:orientation="horizontal" 
  	android:layout_width="fill_parent"
  	android:layout_height="wrap_content"&gt;
        
       	&lt;Button
            android:id="@+id/back_to_main_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_alignParentLeft="true"
            android:onClick="backBtn"
            android:text="@string/back_btn"
            android:textSize="14sp" /&gt;
       	
       	&lt;Button
            android:id="@+id/take_note"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_centerInParent="true"
            android:onClick="takeNote"
            android:text="@string/take_note_btn"
            android:textSize="14sp" /&gt;
       	
       	&lt;Button
           android:id="@+id/help_btn"
           android:layout_width="100dp"
           android:layout_height="50dp"
           android:layout_alignParentRight="true"
           android:onClick="helpBtn"
           android:text="@string/help_btn"
           android:textSize="14sp" /&gt;
       	&lt;/RelativeLayout&gt;
 &lt;GridLayout
        android:id="@+id/grid5"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:columnCount="4"
        android:rowCount="2" &gt;
      
  &lt;Spinner
        android:id="@+id/tag_type_spinner"
        android:layout_width="180dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left"
        android:layout_row="0"
        android:textSize="18sp" /&gt;
  &lt;Spinner
  	  android:id="@+id/tag_color_spinner"
  	  android:layout_width="180dp"
  	  android:layout_height="wrap_content"
  	  android:layout_column="1"
      android:layout_gravity="left"
      android:layout_row="0"
  	  android:textSize="18sp"/&gt;
  &lt;Spinner
  	  android:id="@+id/tag_location_spinner"
  	  android:layout_width="180dp"
  	  android:layout_height="wrap_content"
  	  android:layout_column="0"
      android:layout_gravity="left"
      android:layout_row="1"
  	  android:textSize="18sp"/&gt;
 
  &lt;/GridLayout&gt;
  &lt;RelativeLayout
    android:id="@+id/RelativeLayout03"
    android:orientation="horizontal" 
  	android:layout_width="fill_parent"
  	android:layout_height="wrap_content"&gt;
   &lt;EditText
            android:id="@+id/new_tag_number"
            android:layout_width="180dp"
            android:layout_height="wrap_content"
            android:layout_alignParentLeft="true"
            android:enabled="true"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
           &lt;/EditText&gt;
	&lt;TextView 
	    	android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_toRightOf="@+id/new_tag_number"
            android:inputType="none"
            android:text="@string/new_tag_lbl"/&gt;
	&lt;Button
            android:id="@+id/update_display_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_alignParentRight="true"
            android:onClick="updateTag"
            android:text="@string/update_display_btn"
            android:textSize="14sp" /&gt;
&lt;/RelativeLayout&gt;

&lt;/LinearLayout&gt;
</Text>
        </Document>
        <Document ID="6103B955-D9E3-4AB0-9939-EE57A8C6057E">
            <Title>Characters</Title>
        </Document>
        <Document ID="43821DE9-05FF-4D89-9399-8B482508BCDA">
            <Title>EvaluateSheep2 Code</Title>
            <Text>package com.weyr_associates.lambtracker;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import com.weyr_associates.lambtracker.EvaluateSheep.IncomingHandler;

import android.R.string;
import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.LightingColorFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RatingBar;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.LinearLayout.LayoutParams;
import android.database.Cursor;

public class EvaluateSheep2 extends Activity {
	
	public Button button;
	
	String     	cmd, tempText;
	String		tempLabel;
	String[] radioBtnText;
	Integer 	i;
	
	public int trait01, trait02, trait03, trait04, trait05, trait06, trait07, trait08, trait09, trait10;
	public int trait11, trait12, trait13, trait14, trait15, trait16, trait17, trait18, trait19, trait20;
	public int trait11_unitid, trait12_unitid, trait13_unitid, trait14_unitid, trait15_unitid;
	public String trait01_label, trait02_label, trait03_label, trait04_label, trait05_label, trait06_label, 
		trait07_label, trait08_label, trait09_label, trait10_label, trait11_label, trait12_label, 
		trait13_label, trait14_label, trait15_label ; 
	public String trait11_units, trait12_units, trait13_units, trait14_units, trait15_units; 
	
	public int sheep_id, thissheep_id;
	public RadioGroup radioGroup;
	int 		id;
	int   		fedtagid, farmtagid, eidtagid;
	private int			    recNo;
	public int             nRecs, nRecs2, nRecs3, nRecs4;
	List&lt;Integer&gt; which_traits;
	List&lt;Float&gt; real_scores;
	public List&lt;String&gt; scored_evaluation_traits, data_evaluation_traits, trait_units, user_evaluation_traits;
	public List &lt;Integer&gt; scored_trait_numbers, data_trait_numbers, user_trait_numbers, user_trait_number_items;
	
	ArrayAdapter&lt;String&gt; dataAdapter;

	public Float trait01_data, trait02_data, trait03_data, trait04_data, trait05_data, trait06_data, trait07_data ;
	public Float trait08_data, trait09_data, trait10_data;
	public Float trait11_data, trait12_data, trait13_data, trait14_data, trait15_data;
	public int trait16_data, trait17_data, trait18_data, trait19_data, trait20_data;
	
	private DatabaseHandler dbh;
	private Cursor 	cursor;

	Messenger mService = null;
	boolean mIsBound;
	
	final Messenger mMessenger = new Messenger(new IncomingHandler());
	// variable to hold the string
	public String LastEID ;

	class IncomingHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case eidService.MSG_UPDATE_STATUS:
				Bundle b1 = msg.getData();
		
				break;
			case eidService.MSG_NEW_EID_FOUND:
				Bundle b2 = msg.getData();

				LastEID = (b2.getString("info1"));
//				We have a good whole EID number	
				gotEID ( null);	
				break;			
			case eidService.MSG_UPDATE_LOG_APPEND:
//				Bundle b3 = msg.getData();
//				Log.i("Evaluate ", "Add to Log.");
				
				break;
			case eidService.MSG_UPDATE_LOG_FULL:
//				Log.i("Evaluate ", "Log Full.");
				
				break;
			case eidService.MSG_THREAD_SUICIDE:
//				Log.i("Evaluate", "Service informed Activity of Suicide.");
				doUnbindService();
				stopService(new Intent(EvaluateSheep2.this, eidService.class));
				
				break;
			default:
				super.handleMessage(msg);
			}
		}
	}
	
	 public ServiceConnection mConnection = new ServiceConnection() {
		public void onServiceConnected(ComponentName className, IBinder service) {
			mService = new Messenger(service);
//			Log.i("Evaluate", "At Service.");
			try {
				//Register client with service
				Message msg = Message.obtain(null, eidService.MSG_REGISTER_CLIENT);
				msg.replyTo = mMessenger;
				mService.send(msg);

				//Request a status update.
//				msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
//				mService.send(msg);
				
				//Request full log from service.
//				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
//				mService.send(msg);
				
			} catch (RemoteException e) {
				// In this case the service has crashed before we could even do anything with it
			}
		}
		public void onServiceDisconnected(ComponentName className) {
			// This is called when the connection with the service has been unexpectedly disconnected - process crashed.
			mService = null;
		}
	};    	

	private void CheckIfServiceIsRunning() {
		//If the service is running when the activity starts, we want to automatically bind to it.
//		Log.i("Evaluate", "At isRunning?.");
		if (eidService.isRunning()) {
//			Log.i("Evaluate", "is.");
			doBindService();
		} else {
//			Log.i("Evaluate", "is not, start it");
			startService(new Intent(EvaluateSheep2.this, eidService.class));
			doBindService();
		}
//		Log.i("Evaluate", "Done isRunning.");
	} 	
	
	void doBindService() {
		// Establish a connection with the service.  We use an explicit
		// class name because there is no reason to be able to let other
		// applications replace our component.
//		Log.i("Evaluate", "At doBind1.");
		bindService(new Intent(this, eidService.class), mConnection, Context.BIND_AUTO_CREATE);
//		Log.i("Evaluate", "At doBind2.");

		mIsBound = true;
		
		if (mService != null) {
//			Log.i("Evaluate", "At doBind3.");
			try {
				//Request status update
				Message msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
				msg.replyTo = mMessenger;
				mService.send(msg);
//				Log.i("Evaluate", "At doBind4.");
				//Request full log from service.
				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
				mService.send(msg);
			} catch (RemoteException e) {}
		}
//		Log.i("Evaluate", "At doBind5.");
	}
	void doUnbindService() {
//		Log.i("Evaluate", "At DoUnbindservice");
		if (mService != null) {
		try {
			//Stop eidService from sending tags
			Message msg = Message.obtain(null, eidService.MSG_NO_TAGS_PLEASE);
			msg.replyTo = mMessenger;
			mService.send(msg);
			
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}
		if (mIsBound) {
			// If we have received the service, and hence registered with it, then now is the time to unregister.
			if (mService != null) {
				try {
					Message msg = Message.obtain(null, eidService.MSG_UNREGISTER_CLIENT);
					msg.replyTo = mMessenger;
					mService.send(msg);
				} catch (RemoteException e) {
					// There is nothing special we need to do if the service has crashed.
				}
			}
			// Detach our existing connection.
			unbindService(mConnection);
			mIsBound = false;
		}
	}    	
	
	// use EID reader to look up a sheep
	public void gotEID( View v )
   {
		Integer ii;
	   	//	make the scan eid button red
	   	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	   	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	   	clearBtn( null );  
	   	TextView TV = (TextView) findViewById (R.id.eidText);
	   	TV.setText( LastEID );
		Log.i("Evaluate", "Got EID " + LastEID);
		TV = (TextView) findViewById (R.id.inputText);
		TV.setText( LastEID );
		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off , sheep_table.alert01 " +
				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +	
				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
				"where id_type_table.id_typeid = 2 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", LastEID);
		Log.i("Got EID", " ready for command " + cmd); 
		Object crsr = dbh.exec( cmd ); 
    	cursor   = (Cursor) crsr;
    	dbh.moveToFirstRecord();
    	if( dbh.getSize() == 0 )
			{ // no sheep with that EID tag in the database so clear out and return
			clearBtn( null );
			TV = (TextView) findViewById( R.id.sheepnameText );
	    	TV.setText( "Cannot find this sheep." );
	    	return;
		}
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	Log.i("Got EID", " got sheep named  " + dbh.getStr(0)); 
    	sheep_id = dbh.getInt(1);
//    	Log.i("Got EID", " sheep ID is " + String.valueOf(sheep_id));
    	thissheep_id = sheep_id;
    	Log.i("Got EID", " sheep ID is " + String.valueOf(thissheep_id));
//    	TV = (TextView) findViewById(R.id.eidText)	;
//    	TV.setText(dbh.getStr(3));
    	String alert_text = dbh.getStr(6);
    	Log.i("Got EID ", "Alert Text is " + alert_text);
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
//    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
			// make the alert button red and enable it and pop up the alert text
			btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
//		Now we need to get the farm tag for that sheep and fill the display with data
    	
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);

//    	Log.i("Evaluate ", cmd);    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a farm tag installed
			TV = (TextView) findViewById( R.id.farmText );
			TV.setText( "No tag" );
    	} else {
    		TextView TV5 = (TextView) findViewById(R.id.farmText)	;
    		TV5.setText(dbh.getStr(3));
    		Log.i(" got EID ", "now got a farm tag " + dbh.getStr(3));
//    		ii = dbh.getInt(1);
    		farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	}
//		Now we need to get the federal tag for the sheep
		
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);
    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
    	
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a federal tag installed
			TV = (TextView) findViewById( R.id.fedText );
			TV.setText( "No tag" );
    	} else {
        	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database   	
        	TextView TV5 = (TextView) findViewById(R.id.fedText)	;
        	Log.i(" got EID ", "now got a fed tag " + TV5);
        	TV5.setText(dbh.getStr(3));
        	ii = dbh.getInt(1);
    	}
   }	

	@Override
    public void onCreate(Bundle savedInstanceState)	
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.evaluate_sheep2);
        String 			dbname = getString(R.string.real_database_file); 
        String          cmd;
        Button 			btn;
        TextView TV;       
        Object 			crsr;
        dbh = new DatabaseHandler( this, dbname );
       
        scored_evaluation_traits = new ArrayList&lt;String&gt;();
    	data_evaluation_traits = new ArrayList&lt;String&gt;();
    	user_evaluation_traits = new ArrayList&lt;String&gt;();

    	scored_trait_numbers = new ArrayList&lt;Integer&gt;();
    	data_trait_numbers = new ArrayList&lt;Integer&gt;();
    	user_trait_numbers = new ArrayList&lt;Integer&gt;();
    	user_trait_number_items = new ArrayList&lt;Integer&gt;();
    	
    	nRecs = 0; 	// Number of scored data items using rating bars
    	nRecs2 = 0;	// Number of real data items using float data
    	nRecs3 = 0;	// Number of user defined data items using custom data
    	nRecs4 = 0;	// Number of custom data items to fill the radio buttons
    	
		CheckIfServiceIsRunning();
		//	Fill the trait name variables from the last evaluation
		cmd = "select * from last_eval_table";
    	crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        dbh.moveToFirstRecord();
        
    	trait01 = dbh.getInt(1);
    	cursor.moveToNext();	
    	trait02 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait03 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait04 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait05 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait06 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait07 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait08 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait09 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait10 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait11 = dbh.getInt(1);
    	trait11_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait12 = dbh.getInt(1);
    	trait12_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait13 = dbh.getInt(1);
    	trait13_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait14 = dbh.getInt(1);
    	trait14_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait15 = dbh.getInt(1);
    	trait15_unitid = dbh.getInt(2);
    	cursor.moveToNext();
    	trait16 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait17 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait18 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait19 = dbh.getInt(1);
    	cursor.moveToNext();
    	trait20 = dbh.getInt(1);
    	cursor.close();
		
    	//	Set up the scored traits and inflate the layout
    	cmd = String.format("select evaluation_trait_table.trait_name, evaluation_trait_table.id_traitid " +
	        	"from evaluation_trait_table inner join last_eval_table where " +
        		" evaluation_trait_table.id_traitid = last_eval_table.id_traitid and evaluation_trait_table.trait_type = 1 ") ;
//    	Log.i("evaluate2", " cmd is " + cmd);
    	crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        nRecs    = cursor.getCount();
        dbh.moveToFirstRecord();
        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
        	scored_trait_numbers.add(cursor.getInt(1));
//        	Log.i("evaluate2", " trait number is " + String.valueOf(cursor.getInt(1)));
	    	scored_evaluation_traits.add(cursor.getString(0));
//	    	Log.i("evaluate2", " trait name is " + cursor.getString(0));
    	}
    	cursor.close();    	
    	Log.i("evaluate2", "number of records in scored traits cursor is " + String.valueOf(nRecs));
    	LayoutInflater inflater = getLayoutInflater();	
//    	Log.i ("evaluate2", scored_evaluation_traits.get(0));
    	for( int ii = 0; ii &lt; nRecs; ii++ ){	
//    		Log.i ("in for loop", " trait name is " + scored_evaluation_traits.get(ii));
			TableLayout table = (TableLayout) findViewById(R.id.TableLayout01);	
//			Log.i("in for loop", " after TableLayout");
	    	TableRow row = (TableRow)inflater.inflate(R.layout.eval_item_entry, table, false);
	    	tempLabel = scored_evaluation_traits.get(ii);
//	    	Log.i("in for loop", " tempLabel is " + tempLabel);
	    	((TextView)row.findViewById(R.id.rb1_lbl)).setText(tempLabel);
//	    	Log.i("in for loop", " after set text view");
	    	table.addView(row);
    	}
    	
    	//	Set up the data traits and inflate the layout
    	cmd = String.format("select evaluation_trait_table.trait_name, evaluation_trait_table.id_traitid " +
	        	"from evaluation_trait_table inner join last_eval_table where " +
        		" evaluation_trait_table.id_traitid = last_eval_table.id_traitid and evaluation_trait_table.trait_type = 2 ") ;
//    	Log.i("test designs", " cmd is " + cmd);
    	crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        nRecs2    = cursor.getCount();
        dbh.moveToFirstRecord();
        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
        	data_trait_numbers.add(cursor.getInt(1));
//        	Log.i("evaluate2", " trait number is " + String.valueOf(cursor.getInt(1)));
	    	data_evaluation_traits.add(cursor.getString(0));
//	    	Log.i("evaluate2", " trait name is " + cursor.getString(0));
    	}
    	cursor.close();    	
//    	Log.i("evaluate2", "number of records in data traits cursor is " + String.valueOf(nRecs2));
    	inflater = getLayoutInflater();	
//    	Log.i ("evaluate2", scored_evaluation_traits.get(0));
    	for( int ii = 0; ii &lt; nRecs2; ii++ ){	
//    		Log.i("in for loop" , " ii is " + String.valueOf(ii));
//    		Log.i ("in for loop", " trait name is " + data_evaluation_traits.get(ii));
			TableLayout table = (TableLayout) findViewById(R.id.TableLayout02);	
//			Log.i("in for loop", " after TableLayout");
	    	TableRow row = (TableRow)inflater.inflate(R.layout.eval_data_item_entry, table, false);
	    	tempLabel = data_evaluation_traits.get(ii);
//	    	Log.i("in for loop", " tempLabel is " + tempLabel);
	    	((TextView)row.findViewById(R.id.data_lbl)).setText(tempLabel);
//	    	Log.i("in for loop", " after set text view");
	    	table.addView(row);
    	}

    	// Set up the user traits  
    	cmd = String.format("select evaluation_trait_table.trait_name, evaluation_trait_table.id_traitid, " +
	        	"custom_evaluation_name_table.custom_eval_number " +
    			"from evaluation_trait_table inner join last_eval_table on " +
	        	" evaluation_trait_table.id_traitid = last_eval_table.id_traitid" +
	        	" inner join custom_evaluation_name_table on evaluation_trait_table.id_traitid = " +
        		" custom_evaluation_name_table.id_traitid where evaluation_trait_table.trait_type = 3 ") ;
//    	Log.i("evaluate2", " cmd is " + cmd);
    	crsr = dbh.exec( cmd );
        cursor   = ( Cursor ) crsr;
        nRecs3    = cursor.getCount();
    	dbh.moveToFirstRecord();
        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
        	user_evaluation_traits.add(cursor.getString(0));
//	    	Log.i("evaluate2", " trait name is " + cursor.getString(0));
	    	user_trait_numbers.add(cursor.getInt(1));
//	    	Log.i("evaluate2", " trait id number is " + String.valueOf(cursor.getInt(1)));
	    	user_trait_number_items.add(cursor.getInt(2));
//	    	Log.i("evaluate2", " number of items for this trait is " + String.valueOf(cursor.getInt(2)));		    	
    	}
    	cursor.close();  
        
    	Log.i("evaluate2", "number of records in user traits cursor is " + String.valueOf(nRecs3));
    	inflater = getLayoutInflater();	
    	for( int ii = 0; ii &lt; nRecs3; ii++ ){	
//    		Log.i("in for loop" , " ii is " + String.valueOf(ii));
    		Log.i ("in for loop", " user trait number is " + String.valueOf(user_trait_numbers.get(ii)));
//    		Log.i ("in for loop", " trait name is " + user_evaluation_traits.get(ii));
    		TV = (TextView) findViewById(R.id.radioGroup1_lbl);       
            TV.setText (user_evaluation_traits.get(ii));
    		Log.i ("in for loop", " number of trait entries is " + String.valueOf(user_trait_number_items.get(ii)));
//			TableLayout table = (TableLayout) findViewById(R.id.TableLayout03);	
//			Log.i("in for loop", " after TableLayout");		    	
	    	//	Get the text for the buttons
	    	tempText = String.valueOf(user_trait_numbers.get(ii));
	    	Log.i("in for loop", "trait numbers is " + tempText);
	    	cmd = String.format("select custom_evaluation_traits_table.custom_evaluation_item " +
	    			" from custom_evaluation_traits_table " +
	    			" where custom_evaluation_traits_table.id_traitid = '%s' "+
	    			" order by custom_evaluation_traits_table.custom_evaluation_order ASC ", tempText);
//	    	Log.i("evaluate2", " cmd is " + cmd);	    	
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        nRecs4    = cursor.getCount();
	        dbh.moveToFirstRecord();		        
	        ArrayList buttons = new ArrayList();
	        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
	        	buttons.add (cursor.getString(0));
		    	Log.i("evaluate2", " radio button text is " + cursor.getString(0));
	    	}
//	        TableRow row = (TableRow)inflater.inflate(R.layout.eval_custom_item, table, false);
	        
	        radioBtnText = (String[]) buttons.toArray(new String [buttons.size()]);
	    	cursor.close();  
	    	// Build the radio buttons here
//	    	radioGroup = ((RadioGroup) row.findViewById(R.id.radioGroup1));
	    	radioGroup = ((RadioGroup) findViewById(R.id.radioGroup1));
	    	addRadioButtons(user_trait_number_items.get(ii), radioBtnText);
    	}
    	
       	// make the alert button normal and disabled
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false);    
    }
	
    private void addRadioButtons(int numButtons, String[] radioBtnText) {
  	  int i;

  	  for(i = 0; i &lt; numButtons; i++){
  	    //instantiate...
  	    RadioButton radioBtn = new RadioButton(this);

  	    //set the values that you would otherwise hardcode in the xml...
  	  	radioBtn.setLayoutParams 
  	      (new LayoutParams 
  	      (LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

  	    //label the button...
  	  	radioBtn.setText(radioBtnText[i]);
//  	  	Log.i("addradiobuttons", radioBtnText[i]);
  	  	radioBtn.setId(i);

  	    //add it to the group.
  	    radioGroup.addView(radioBtn, i);
  	  }
  	}        
    public void saveScores( View v )
    {    	
    	String 			dbname = getString(R.string.real_database_file); 
        String          cmd;    
        Object 			crsr;
        List&lt;Float&gt; 	rating_scores;
    	TextView 		TV;
    	String 			temp_string;
    	Float 			tempData;
    	rating_scores = new ArrayList&lt;Float&gt;();
    	real_scores = new ArrayList&lt;Float&gt;();
		RatingBar ratingBar;
		Button	btn;
    	
		// Disable Save Scores button and make it red to prevent getting 2 records at one time
    	btn = (Button) findViewById( R.id.save_evaluation_scores_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
    	btn.setEnabled(false);    
    	   	
    	// I got the sheep id from the search by federal or farm or EID tag
    	// it's in the sheep_id variable
    	
    	Log.i("in save scores", " sheep id is " + String.valueOf(sheep_id));  
    	
		// 	get the rating bar scores and fill the rating_scores array
		TableLayout table = (TableLayout) findViewById(R.id.TableLayout01);
		Log.i("in save scores", " number rating bars is " + String.valueOf(nRecs)); 
		if (nRecs != 0) {
			for( int ii = 0; ii &lt; nRecs; ii++ ){	
//				Log.i("in save scores", " in 1st for loop ii is" + String.valueOf(ii)); 
				TableRow row1= (TableRow)table.getChildAt(ii);
				ratingBar = (RatingBar) row1.getChildAt(1);
				rating_scores.add(ratingBar.getRating());			
//				Log.i("RatingBar01 ", String.valueOf(ratingBar.getRating()));  
			}
			//	Fill the rest of the array with zeros
			for( int ii = nRecs; ii &lt; 10; ii++ ){	
				rating_scores.add((float) 0.0f);
				Log.i("in save scores ", "Filling remainder of rating bar array with zeros");
			}
		}else{
			//	Nothing to add so fill the entire thing with zeros
			for( int ii = 0; ii &lt; 10; ii++ ){	
				rating_scores.add((float) 0.0f);
				Log.i("in save scores ", "Filling entire rating bar array with zeros");
			}
		}
		
    	// Fill the rating bar score variables from the rating_scores array			
    		trait01_data = rating_scores.get(0);
    		Log.i("trait01_ratingbar ", String.valueOf(trait01_data));
     		trait02_data = rating_scores.get(1);
//    		Log.i("trait02_ratingbar ", String.valueOf(trait02_data));
    		trait03_data = rating_scores.get(2);	
//    		Log.i("trait03_ratingbar ", String.valueOf(trait03_data));    		
    		trait04_data = rating_scores.get(3);
//    		Log.i("trait04_ratingbar ", String.valueOf(trait04_data));    		
    		trait05_data = rating_scores.get(4);
//    		Log.i("trait05_ratingbar ", String.valueOf(trait05_data));    		
    		trait06_data = rating_scores.get(5);
//    		Log.i("trait06_ratingbar ", String.valueOf(trait06_data));    		
    		trait07_data = rating_scores.get(6);
//    		Log.i("trait07_ratingbar ", String.valueOf(trait07_data));    		
    		trait08_data = rating_scores.get(7);
//    		Log.i("trait08_ratingbar ", String.valueOf(trait08_data));    		
    		trait09_data = rating_scores.get(8);
//    		Log.i("trait09_ratingbar ", String.valueOf(trait09_data));    		
    		trait10_data = rating_scores.get(9);
    		Log.i("trait10_ratingbar ", String.valueOf(trait10_data));    				
    		
    		//	get the real data values  	
    		Log.i("in save scores", " number real data points is " + String.valueOf(nRecs2));
    		table = (TableLayout) findViewById(R.id.TableLayout02);
//    		Log.i("in save scores", " after find tablelayout02 ");
    		if (nRecs2 != 0) {
    			for( int ii = 0; ii &lt; nRecs2; ii++ ){	
    			TableRow row1= (TableRow)table.getChildAt(ii);
    			TV = (EditText ) row1.getChildAt(1);
    			try {
    				tempData = Float.valueOf(TV.getText().toString());
				} catch (Exception ex) {
					tempData = 0.0f;
				}
     			real_scores.add(ii,tempData);
//    			Log.i("index ii ", String.valueOf(ii));
//    			Log.i("real_score ", String.valueOf(real_scores.get(ii)));
//    			Log.i("realscore ", String.valueOf(tempData)); 
    			}
    	    	for( int ii = nRecs2; ii &lt; 5; ii++ ){	
    	    		Log.i("in save scores ", "Filling remainder of real data array with zeros");
    	    		real_scores.add((float) 0.0f);
    			}
    		}else {
    			for( int ii = 0; ii &lt; 5; ii++ ){
    				Log.i("in save scores ", "Filling entire real data array with zeros");
    	    		real_scores.add((float) 0.0f);
    			}
    		}
    		//	Fill the real score variables from the real_scores array
    		trait11_data = real_scores.get(0);
    		Log.i("trait11_data ", String.valueOf(trait11_data));
    		trait12_data = real_scores.get(1);
//    		Log.i("trait12_data ", String.valueOf(trait12_data));
    		trait13_data = real_scores.get(2);
//       	Log.i("trait13_data ", String.valueOf(trait13_data));
    		trait14_data = real_scores.get(3);
//       	Log.i("trait14_data ", String.valueOf(trait14_data));
    		trait15_data = real_scores.get(4);
       	Log.i("trait15_data ", String.valueOf(trait15_data));
 	    	
    		//	Get the radio group selected for the user data 
    		//	This will need to be fixed for more than one user defined group but will work for Dr. Purdy's test
    		Log.i("before radio group", " getting ready to get the radio group buttons ");
    		RadioGroup rg=(RadioGroup)findViewById(R.id.radioGroup1);
     		trait16_data = rg.getCheckedRadioButtonId();
    		Log.i("trait16_data ", String.valueOf(trait16_data));
//    		RadioButton b = (RadioButton)findViewById(selected);
//    		b.getText().toString();    		
    		    		
    		String mytoday = TodayIs();
    		// added time stamp here for Dr. Purdy in function TodayIs()
//    		Log.i("Date is ", mytoday);
   		
    		// Now that I have all the data I need to write it into the sheep_evaluation_table
    		
//	    	Log.i("number ","eval trait01 "+String.valueOf(trait01));
//	    	Log.i("number ","eval trait02 "+String.valueOf(trait02));
//	    	Log.i("number ","eval trait03 "+String.valueOf(trait03));
//	    	Log.i("number ","eval trait04 "+String.valueOf(trait04));
//	    	Log.i("number ","eval trait05 "+String.valueOf(trait05));
//	    	Log.i("number ","eval trait06 "+String.valueOf(trait06));
//	    	Log.i("number ","eval trait07 "+String.valueOf(trait07));
//	    	Log.i("number ","eval trait08 "+String.valueOf(trait08));
//	    	Log.i("number ","eval trait09 "+String.valueOf(trait09));
//	    	Log.i("number ","eval trait10 "+String.valueOf(trait10));
//    		
//	    	Log.i("number ","eval trait11 "+String.valueOf(trait11));
//	    	Log.i("number ","eval trait11 units "+String.valueOf(trait11_unitid));
//	    	Log.i("number ","eval trait12 "+String.valueOf(trait12));
//	    	Log.i("number ","eval trait12 units "+String.valueOf(trait12_unitid));
//	    	Log.i("number ","eval trait13 "+String.valueOf(trait13));
//	    	Log.i("number ","eval trait13 units "+String.valueOf(trait13_unitid));
//	    	Log.i("number ","eval trait14 "+String.valueOf(trait14));
//	    	Log.i("number ","eval trait14 units "+String.valueOf(trait14_unitid));
//	    	Log.i("number ","eval trait15 "+String.valueOf(trait15));
//	    	Log.i("number ","eval trait15 units "+String.valueOf(trait15_unitid));
    		
//    		Log.i("number ","eval trait16 "+String.valueOf(trait16_data));
//    		Log.i("number ","eval trait17 "+String.valueOf(trait17_data));
//    		Log.i("number ","eval trait18 "+String.valueOf(trait18_data));
//    		Log.i("number ","eval trait19 "+String.valueOf(trait19_data));
//    		Log.i("number ","eval trait20 "+String.valueOf(trait20_data));
    		
    		       		
    		cmd = String.format("insert into sheep_evaluation_table (sheep_id, " +
    		"trait_name01, trait_score01, trait_name02, trait_score02, trait_name03, trait_score03, " +
    		"trait_name04, trait_score04, trait_name05, trait_score05, trait_name06, trait_score06," +
    		"trait_name07, trait_score07, trait_name08, trait_score08, trait_name09, trait_score09, " +
    		"trait_name10, trait_score10, trait_name11, trait_score11, trait_name12, trait_score12, " +
    		"trait_name13, trait_score13, trait_name14, trait_score14, trait_name15, trait_score15, " +
    		"trait_name16, trait_score16, trait_name17, trait_score17, trait_name18, trait_score18, " +
    		"trait_name19, trait_score19, trait_name20, trait_score20, " +
    		"trait_units11, trait_units12, trait_units13, trait_units14, trait_units15, eval_date) " +
    		"values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s," +
    		"%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,'%s') ", 
    				sheep_id, trait01, trait01_data, trait02, trait02_data, trait03, trait03_data,
    				trait04, trait04_data, trait05, trait05_data, trait06, trait06_data,
    				trait07, trait07_data, trait08, trait08_data, trait09, trait09_data, 
    				trait10, trait10_data, trait11, trait11_data, trait12, trait12_data, 
    				trait13, trait13_data, trait14, trait14_data, trait15, trait15_data, 
    				trait16, trait16_data, trait17, trait17_data, trait18, trait18_data,
    				trait19, trait19_data, trait20, trait20_data, 
    				trait11_unitid, trait12_unitid, trait13_unitid, trait14_unitid, trait15_unitid, mytoday );
    		
//    		Log.i("save eval ", cmd);
    		dbh.exec( cmd );
    		cmd = String.format("select sheep_table.alert01 from sheep_table where sheep_table.sheep_id=%d", sheep_id);    		
    		crsr = dbh.exec( cmd );
            cursor   = ( Cursor ) crsr;
            dbh.moveToFirstRecord();
            
            String alert_text = (dbh.getStr(0));
            Log.i ("Evaluate Alert", " Alert Text is " + alert_text);
    		alert_text = alert_text + "\n" + "Evaluation Done";
    		Log.i ("Evaluate Alert", " Alert Text is " + alert_text);

    		cmd = String.format("update sheep_table set alert01='%s' where sheep_id=%d", alert_text, sheep_id);
//    		Log.i("test alert ", cmd);   
    		dbh.exec( cmd );
    		cursor.close();         	
    		clearBtn( null );
    }
	
	   public void backBtn( View v )
	    {
		   	dbh.closeDB();
		   	doUnbindService();
			stopService(new Intent(EvaluateSheep2.this, eidService.class));
			clearBtn( null );   	
			finish();
	    }
	 
	public void showAlert(View v)
	{
		String	alert_text;
		String 			dbname = getString(R.string.real_database_file); 
        String          cmd;    
        Object 			crsr;
 		// Display alerts here   	
				AlertDialog.Builder builder = new AlertDialog.Builder( this );
				cmd = String.format("select sheep_table.alert01 from sheep_table where sheep_id =%d", sheep_id);
//				Log.i("evalGetAlert ", cmd);  
				crsr = dbh.exec( cmd );
		        cursor   = ( Cursor ) crsr;
		        dbh.moveToFirstRecord();		       
		        alert_text = (dbh.getStr(0));
//		        Log.i("evalShowAlert ", alert_text); 
				builder.setMessage( alert_text )
			           .setTitle( R.string.alert_warning );
				builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
			           public void onClick(DialogInterface dialog, int idx) {
			               // User clicked OK button   	  
			               }
			       });		
				AlertDialog dialog = builder.create();
				dialog.show();
//				cursor.close();
	}
	
	
	public void helpBtn( View v )
    {
   	// Display help here   	
		AlertDialog.Builder builder = new AlertDialog.Builder( this );
		builder.setMessage( R.string.help_evaluate )
	           .setTitle( R.string.help_warning );
		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
	           public void onClick(DialogInterface dialog, int idx) {
	               // User clicked OK button 
	        	  
	               }
	       });		
		AlertDialog dialog = builder.create();
		dialog.show();
		
    }
	public void clearBtn( View v )
    {
		// clear out the display of everything
		TextView TV ;
		RatingBar ratingBar;
		Button btn;
		TV = (TextView) findViewById( R.id.inputText );
		TV.setText( "" );		
		TV = (TextView) findViewById( R.id.sheepnameText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.fedText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.farmText );
		TV.setText( "" );
		TV = (TextView) findViewById( R.id.eidText );
		TV.setText( "" );
		
		//	Clear the rating bars
		TableLayout table = (TableLayout) findViewById(R.id.TableLayout01);
//		Log.i("in clear button", " number rating bars is " + String.valueOf(nRecs)); 
		if (nRecs != 0) {
			for( int ii = 0; ii &lt; nRecs; ii++ ){	
				Log.i("in clear button", " in 1st for loop ii is" + String.valueOf(ii)); 
				TableRow row1= (TableRow)table.getChildAt(ii);
				ratingBar = (RatingBar) row1.getChildAt(1);
				ratingBar.setRating(0.0f);			
//				Log.i("RatingBar01 ", String.valueOf(ratingBar.getRating()));  
			}
		}
		//	Clear the real scored traits
//		Log.i("in clear button", " number scored traits is " + String.valueOf(nRecs2));
		table = (TableLayout) findViewById(R.id.TableLayout02);
		if (nRecs2 != 0) {
			for( int ii = 0; ii &lt; nRecs2; ii++ ){	
			TableRow row1= (TableRow)table.getChildAt(ii);
			TV = (EditText ) row1.getChildAt(1);
			TV.setText ( "" );
			}
		}
				
		//	Clear the radio group checks
		Log.i("in clear button", " ready to clear the radio group "); 
		RadioGroup rg=(RadioGroup)findViewById(R.id.radioGroup1);
		rg.clearCheck();
		
       	// make the alert button normal and disabled
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false); 
    	//Make the scan button normal
    	btn = (Button) findViewById( R.id.scan_eid_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFF000000));  
    	// Enable Save Scores button and make it normal to get set for next sheep
    	btn = (Button) findViewById( R.id.save_evaluation_scores_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFF000000));        	
    	btn.setEnabled(true);
    }
	   private String TodayIs() {
			Calendar calendar = Calendar.getInstance();
			int day = calendar.get(Calendar.DAY_OF_MONTH);
			int month = calendar.get(Calendar.MONTH);
			int year = calendar.get(Calendar.YEAR);
	        //12 hour format
//			int hour = cal.get(Calendar.HOUR);
	        //24 hour format
			int hourofday = calendar.get(Calendar.HOUR_OF_DAY);
			int minute = calendar.get(Calendar.MINUTE);
			int second = calendar.get(Calendar.SECOND);
			  
			return year + "-" + Make2Digits(month + 1) + "-" +  Make2Digits(day) + "_" + Make2Digits(hourofday) + ":" + Make2Digits(minute) + ":" + Make2Digits(second) ;
		}
	    private String Make2Digits(int i) {
			if (i &lt; 10) {
				return "0" + i;
			} else {
				return Integer.toString(i);
			}
		}	
//  user clicked 'Scan' button    
 public void scanEid( View v){
 	// Here is where I need to get a tag scanned and put the data into the variable LastEID
		if (mService != null) {
		try {
			//Start eidService sending tags
			Message msg = Message.obtain(null, eidService.MSG_SEND_ME_TAGS);
			msg.replyTo = mMessenger;
			mService.send(msg);
		   	//	make the scan eid button green
	    	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0x0000FF00, 0xff00ff00));	
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}    	    	
 }
 
	 // user clicked 'Search Fed' button
    public void searchFedTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			fed = TV.getText().toString();
//    	Log.i("Evaluate ", " federal tag is " + fed);
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( fed != null &amp;&amp; fed.length() &gt; 0 )
    		{
//			Search for the sheep with the entered federal tag number. 
//    		assumes no duplicate federal tag numbers, ok for our flock not ok for the general case
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off , sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +	
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", fed);
//    		Log.i("Evaluate ", cmd);
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd ); 
    	cursor   = (Cursor) crsr;
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
    		{ // no sheep with that federal tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
// This section would allow for multiple sheep with same tag if we implement next and previous
//    	buttons but is commented out for now as our sheep have unique federal tags
//    	if( dbh.getSize() &gt;1){
//
// 			Enable the previous and next record buttons
//    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
//    		btn2.setEnabled(true);  
//    		//	Set up the various pointers and cursor data needed to traverse the sequence
//    		recNo    = 1;
//    		cursor   = (Cursor) crsr;
//    		nRecs    = cursor.getCount();
//    		colNames = cursor.getColumnNames();
//    		cursor.moveToFirst();
//    	}
		
    	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
//		Log.i("Evaluate", " id info table id is " + String.valueOf(fedtagid));
		
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
//    	Log.i("Evaluate", " sheep name is " + dbh.getStr(0));
    	sheep_id = dbh.getInt(1);
    	thissheep_id = sheep_id;
//    	Log.i("Evaluate", " sheep id is " + String.valueOf(thissheep_id));
    	TV = (TextView) findViewById(R.id.fedText)	;
    	TV.setText(dbh.getStr(3));
//    	Log.i("Evaluate", " sheep fed tag is " + dbh.getStr(3));
    	String alert_text = dbh.getStr(6);
//    	Log.i("Evaluate", " sheep alert text is " + alert_text);
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
//		if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
			// make the alert button red and enable it and pop up the alert text
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
    	
//		Now we need to get the farm tag for that sheep and fill the display with data
    	
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", thissheep_id);

//    	Log.i("Evaluate ", "ready to get farm tags cmd is " + cmd);    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a farm tag installed
			TV = (TextView) findViewById( R.id.farmText );
			TV.setText( "No tag" );
    	} else {
    		TextView TV5 = (TextView) findViewById(R.id.farmText)	;
    		TV5.setText(dbh.getStr(3));
    		ii = dbh.getInt(1);
    		farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	}
    	}
// 	user clicked 'Search Farm Tag' button
    public void searchFarmTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			farm = TV.getText().toString();
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( farm != null &amp;&amp; farm.length() &gt; 0 )
    		{
//			Search for the sheep with the entered farm tag number. 
//    		assumes no duplicate farm tag numbers, ok for our flock not ok for the general case  
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off, sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", farm);
    		
//    		Log.i("Evaluate", "building command search for farm tag ");
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd );   	
    	dbh.moveToFirstRecord();
    	if( dbh.getSize() == 0 )
    		{ // no sheep with that farm tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
//Need to add next and previous buttons if we have duplicate farm tags
//    	if( dbh.getSize() &gt;1){
//
// 			Enable the previous and next record buttons
//    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
//    		btn2.setEnabled(true);  
//    		//	Set up the various pointers and cursor data needed to traverse the sequence
//    		recNo    = 1;
//    		cursor   = (Cursor) crsr;
//    		nRecs    = cursor.getCount();
////    		colNames = cursor.getColumnNames();
//    		cursor.moveToFirst();
//    	}
    	
    	farmtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	sheep_id = dbh.getInt(1);
    	TV = (TextView) findViewById(R.id.farmText)	;
    	TV.setText(dbh.getStr(3));
    	ii = dbh.getInt(1);
    	
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
    	String alert_text = dbh.getStr(6);
//    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
    	if (alert_text != null &amp;&amp; !alert_text.isEmpty() ){
			// make the alert button red and enable it and pop up the alert text
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
//		Now we need to get the rest of the tags and fill the display with data
		
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"id_info_table.tag_number, id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", ii);
    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
    	
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a federal tag installed
			TV = (TextView) findViewById( R.id.fedText );
			TV.setText( "No tag" );
    	} else {
        	fedtagid = dbh.getInt(4); // Get the id_info_table.id_infoid from the database   	
        	TextView TV5 = (TextView) findViewById(R.id.fedText)	;
        	TV5.setText(dbh.getStr(3));
        	ii = dbh.getInt(1);
    	}
    	}    
        
    // user clicked the "next record" button
    public void nextBtn( View v)
    {
    	TextView 	TV;
    	Integer		ii;
    	String		cmd;
    	if (recNo == (nRecs-1)) {
    		// at end so disable next record button
    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
        	btn2.setEnabled(false);   		
    	}
    	if ( cursor.moveToNext() ){
    		// I've moved forward so I need to enable the previous record button
    		Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
    		btn3.setEnabled(true);
//        	id = dbh.getInt( 0 ); // Get the primary key from the current record
//        	Log.i ("DoSheepTask", "In if statement next button and the record id is " + String.valueOf(id) );
    		recNo         += 1;
//display stuff here
		}
    	else {
    		//At the end so disable the next button
           	Button btn2 = (Button) findViewById( R.id.next_rec_btn );
        	btn2.setEnabled(false); 
        	recNo         -= 1;
    	}
    }

    // user clicked the "previous record" button
    public void prevBtn( View v)
    {
    	TextView TV;
    	Integer		ii;
    	String		cmd;
    	if ( cursor.moveToPrevious() ){
    		// I've moved back so enable the next record button
    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
    		btn2.setEnabled(true);  
//        	id = dbh.getInt( 0 ); // Get the primary key from the current record
 //       	Log.i ("DoSheepTask", "In if statement prev button and the record id is " + String.valueOf(id) );
    		recNo  -= 1;
 //display stuff here
		}
    	else {
    		// at beginning so disable the previous button
        	Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
        	btn3.setEnabled(false);
        	recNo         += 1;
    	}
    	if (recNo == 1) {
    		// at beginning so disable prev record button
    		Button btn3 = (Button) findViewById( R.id.prev_rec_btn );
        	btn3.setEnabled(false);   		
    	}
    }


}
</Text>
        </Document>
        <Document ID="36B94266-023E-4F92-9F5D-B9418E5F87E4">
            <Title>Flock Disaster!</Title>
            <Synopsis>Lambing issues</Synopsis>
            <Text>Dawn was just breaking. The air was crisp and cold but the sky was clear and there was the promise of warm sun later. Caitlin buttoned up her Carhaart jacket, grabbed the Colroy crook and the lamb bag and headed out to the lambing pasture. 
The flock was about  one third done with this first batch of lambs. Things had gone fairly well, there had been a couple of stillborn lambs and one or two minor pulls but nothing major. 
As she walked the pasture checking the sheep she pulled out the EID reader and her small handheld computer. As she checked each ewe or lamb she used the reader to read the EID tag or entered in the sheep name or any other tag she could see. She selected Look Up Sheep and the LambTracker system pulled up each lambing record for that ewe. The status of the lambs, all their identification including paint brands and the details of the lambing were immediately available. 
For ewes that had not yet lambed the system automatically pulled up the previous years data on how their lambing went. 
Caitlin walked up to Jasmine, a friendly ewe that often came up for a scratch. Even though Caitlin knew who Jasmine was she still scanned the EID tag in her right ear to bring up the data. Jasmine was down and straining but things didnât look right.
Looking at the record Caitlin discovered that Jasmine had has several difficult lambings. She required assistance for two out of the last three years. Last year she had twins who were totally tangled, heads and feet everywhere. Caitlin had spent nearly an hour extracting the twins. Fortunately both lived and they had gone on to be the top National Sheep Improvement Program EBV sheep in the flock. 
The year before she had a single lamb with head back that also needed assistance. The year before that she lambed successfully on her own. Normally a ewe with this problem would have been culled but Caitlin also learned that Jasmine was RR at Codon 171 and had a good EBV for wool characteristics. 
If Caitlin wanted to get more information she could drill down into the data and pull up full records on the entire pedigree of Jasmine and the lambs to be. The details of the EBV data on the ram Jasmine was bred to were also available. Jasmine was bred to Mycroft for this year and his lambs typically came a few days late and often were large. 
Caitlin had been working to reduce the birth weights of the flock without losing any of the average daily gains that were a key to remaining profitable in the current sheep market. 
Before implementing the LambTracker system Caitlin would carry a paper sheet with the information she thought would be useful during lambing. Invariably something was left out and after each trip to the lambing pasture sheâd come back in to look up the stuff she missed. 
The paper sheets got torn, muddy or covered in sheep manure or birth fluids. The LambTracker handheld was not without its own set of problems. It was unreadable in full sunlight and didnât handle snow or water or other fluids on the screen. A simple piece of plastic wrap over the screen solved that problem and standing so the screen was in her own shadow solved the first one. There were more rugged sunlight readable handheld computers that LambTracker could run on and they were on the list for purchase later. 
Pulling on an OB sleeve and a nitrile glove Caitlin carefully lubed up and checked. Again Jasmine had twins with tangled legs and feet. It took a bit of time but she was able to sort them out and get the lambs out both alive. 
Using LambTracker she processed the new lambs. First by selecting add a lamb and then adding in the lamb sex and lambing ease. On their farm all lambs are tagged at birth with two tags. A farm tag and an official USDA scrapie EID tag. All ewes and lambs get a paint brand as well so that they can be identified from a distance. Caitlin put in the farm tag data, scanned the EID tag, added a paint brand and marked the rearing type as twin. The LambTracker system automatically filled in the sire, the birth type and added the new lamb to the system.



</Text>
        </Document>
        <Document ID="EBADF4F5-414A-4ED4-9C3E-A56E6A23D0C7">
            <Title>Template Sheets copy</Title>
        </Document>
        <Document ID="A9FB956C-3BD3-4673-8D30-2322455BEC33">
            <Title>ConvertToEID Code</Title>
            <Text>package com.weyr_associates.lambtracker;


import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;


//import com.weyr_associates.lambtracker.MainActivity.IncomingHandler;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.LightingColorFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Spinner;
import android.widget.TextView;
import android.database.Cursor;

public class ConvertToEID extends Activity {
	private DatabaseHandler dbh;
	int             fedtagid, farmtagid, eidtagid;
	public Cursor 	cursor;
	public int 		thissheep_id, new_tag_type, new_tag_color, new_tag_location;
	
	public Button btn;
	public String tag_type_label, tag_color_label, tag_location_label, new_tag_number, eid_tag_color_label ;
	public String eid_tag_location_label, eidText;
	public Spinner tag_type_spinner, tag_location_spinner, tag_color_spinner, eid_tag_color_spinner, eid_tag_location_spinner;
	public List&lt;String&gt; tag_types, tag_locations, tag_colors;
	ArrayAdapter&lt;String&gt; dataAdapter;
	String     	cmd;
	Integer 	i;
		
/////////////////////////////////////////////////////
	
	Messenger mService = null;
	boolean mIsBound;
	
	final Messenger mMessenger = new Messenger(new IncomingHandler());
	// variable to hold the string
	public String LastEID ;
	
	class IncomingHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case eidService.MSG_UPDATE_STATUS:
				Bundle b1 = msg.getData();
		
				break;
			case eidService.MSG_NEW_EID_FOUND:
				Bundle b2 = msg.getData();

				LastEID = (b2.getString("info1"));
//				We have a good whole EID number	
				gotEID ();	
				break;			
			case eidService.MSG_UPDATE_LOG_APPEND:
//				Bundle b3 = msg.getData();
//				Log.i("Convert", "Add to Log.");
				
				break;
			case eidService.MSG_UPDATE_LOG_FULL:
//				Log.i("Convert", "Log Full.");
				
				break;
			case eidService.MSG_THREAD_SUICIDE:
				Log.i("Convert", "Service informed Activity of Suicide.");
				doUnbindService();
				stopService(new Intent(ConvertToEID.this, eidService.class));
				
				break;
			default:
				super.handleMessage(msg);
			}
		}
	}
	
 	 public ServiceConnection mConnection = new ServiceConnection() {
 		public void onServiceConnected(ComponentName className, IBinder service) {
 			mService = new Messenger(service);
 			Log.i("Convert", "At Service.");
 			try {
 				//Register client with service
 				Message msg = Message.obtain(null, eidService.MSG_REGISTER_CLIENT);
 				msg.replyTo = mMessenger;
 				mService.send(msg);

 				//Request a status update.
// 				msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
 //				mService.send(msg);
 				
 				//Request full log from service.
 //				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
 //				mService.send(msg);
 				
 			} catch (RemoteException e) {
 				// In this case the service has crashed before we could even do anything with it
 			}
 		}
 		public void onServiceDisconnected(ComponentName className) {
 			// This is called when the connection with the service has been unexpectedly disconnected - process crashed.
 			mService = null;
 		}
 	};    	

	private void CheckIfServiceIsRunning() {
		//If the service is running when the activity starts, we want to automatically bind to it.
		Log.i("Convert", "At isRunning?.");
		if (eidService.isRunning()) {
//			Log.i("Convert", "is.");
			doBindService();
		} else {
//			Log.i("Convert", "is not, start it");
			startService(new Intent(ConvertToEID.this, eidService.class));
			doBindService();
		}
//		Log.i("Convert", "Done isRunning.");
	} 	
 	
	void doBindService() {
		// Establish a connection with the service.  We use an explicit
		// class name because there is no reason to be able to let other
		// applications replace our component.
//		Log.i("Convert", "At doBind1.");
		bindService(new Intent(this, eidService.class), mConnection, Context.BIND_AUTO_CREATE);
//		Log.i("Convert", "At doBind2.");

		mIsBound = true;
		

		if (mService != null) {
//			Log.i("Convert", "At doBind3.");
			try {
				//Request status update
				Message msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
				msg.replyTo = mMessenger;
				mService.send(msg);
				Log.i("Convert", "At doBind4.");
				//Request full log from service.
				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
				mService.send(msg);
			} catch (RemoteException e) {}
		}
//		Log.i("Convert", "At doBind5.");
	}
 	void doUnbindService() {
// 		Log.i("Convert", "At DoUnbindservice");
 		if (mService != null) {
 		try {
 			//Stop eidService from sending tags
 			Message msg = Message.obtain(null, eidService.MSG_NO_TAGS_PLEASE);
 			msg.replyTo = mMessenger;
 			mService.send(msg);
 			
 		} catch (RemoteException e) {
 			// In this case the service has crashed before we could even do anything with it
 		}
 		}
 		if (mIsBound) {
 			// If we have received the service, and hence registered with it, then now is the time to unregister.
 			if (mService != null) {
 				try {
 					Message msg = Message.obtain(null, eidService.MSG_UNREGISTER_CLIENT);
 					msg.replyTo = mMessenger;
 					mService.send(msg);
 				} catch (RemoteException e) {
 					// There is nothing special we need to do if the service has crashed.
 				}
 			}
 			// Detach our existing connection.
 			unbindService(mConnection);
 			mIsBound = false;
 		}

 	}    	
	
	// use EID reader to look up a sheep
	public void gotEID( )
    {
		Object crsr;
		
	   	//	make the scan eid button red
    	btn = (Button) findViewById( R.id.scan_eid_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
    	// 	Display the EID number
    	TextView TV = (TextView) findViewById (R.id.eidText);
    	TV.setText( LastEID );
    	
		Log.i("Convert", "Got EID");
    	//	Set up the location and color spinners for EID  
    	eid_tag_color_spinner = (Spinner) findViewById(R.id.eid_tag_color_spinner);
    	tag_colors = new ArrayList&lt;String&gt;();        
        // Select All fields from tag colors to build the spinner
        cmd = "select * from tag_colors_table";
        crsr = dbh.exec( cmd );  
        cursor   = ( Cursor ) crsr;
    	dbh.moveToFirstRecord();
    	tag_colors.add("Select a Color");
         // looping through all rows and adding to list
    	for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
    		tag_colors.add(cursor.getString(2));
    	}
    	cursor.close();
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_colors);
    	dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		eid_tag_color_spinner.setAdapter (dataAdapter);
		eid_tag_color_spinner.setSelection(1);
		Log.i("Convert", " Got color spinner set");
		
		eid_tag_location_spinner = (Spinner) findViewById(R.id.eid_tag_location_spinner);
		tag_locations = new ArrayList&lt;String&gt;(); 
		tag_locations.add("Select a Location");
		tag_locations.add("RE");		
		tag_locations.add("LE");
		
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_locations);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		eid_tag_location_spinner.setAdapter (dataAdapter);
		eid_tag_location_spinner.setSelection(1);
		
		Log.i("Convert", " Got location spinner set");
		
	}	
	
/////////////////////////////////////////////////////	
	
	@Override
    public void onCreate(Bundle savedInstanceState)	
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.convert_to_eid);
        String dbname = getString(R.string.real_database_file); 
    	dbh = new DatabaseHandler( this, dbname );
    	
 //////////////////////////////////// 
		CheckIfServiceIsRunning();
		Log.i("Convert", "back from isRunning");  	
////////////////////////////////////    	
    	   	
    	//	make the remove tag buttons red
		Log.i("onCreate", " before setting remove tag buttons red");
    	btn = (Button) findViewById( R.id.remove_fedtag_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
    	Log.i("onCreate", " remove fed tag button is red");
    	btn = (Button) findViewById( R.id.remove_farmtag_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
    	Log.i("onCreate", " after setting remove tag buttons red");
    	
    	//	Disable the alert button until we have an alert for this sheep
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false);
    	Log.i("onCreate", " after disable alert button");
    	
    	//	Disable the Next Record and Prev. Record button until we have multiple records
//    	btn = (Button) findViewById( R.id.next_rec_btn );
//    	btn.setEnabled(false); 
//    	btn = (Button) findViewById( R.id.prev_rec_btn );
//    	btn.setEnabled(false);
    	
    	//	Disable the bottom update tag button until we choose to add or update
       	btn = (Button) findViewById( R.id.update_display_btn );
    	btn.setEnabled(false); 
    	fedtagid = 0;
    	farmtagid = 0;
    	eidtagid = 0;
    	new_tag_number = null;

       	}
    
    // user clicked the 'back' button
    public void backBtn( View v )
	    {
		doUnbindService();
		stopService(new Intent(ConvertToEID.this, eidService.class));
       	dbh.closeDB();
    	clearBtn( null );   	
    	finish();
	    }
    // user clicked the 'help' button
    public void takeNote( View v )
    {
    	final Context context = this;
    	//Implement take a note stuff here
    	if (thissheep_id == 0) {
    		Log.i ("takeNote", " no sheep selected " + String.valueOf(thissheep_id));
    	}
    	else {
    		Log.i ("takeNote", " got a sheep, need to get a note to add");
    		
    		LayoutInflater li = LayoutInflater.from(context);
			View promptsView = li.inflate(R.layout.note_prompt, null);

			AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(
					context);

			// set prompts.xml to alertdialog builder
			alertDialogBuilder.setView(promptsView);

			final EditText userInput = (EditText) promptsView
					.findViewById(R.id.note_text);

			// set dialog message
			alertDialogBuilder
				.setCancelable(false)
				.setPositiveButton("Save Note",
				  new DialogInterface.OnClickListener() {
				    public void onClick(DialogInterface dialog,int id) {
					// get user input and set it to result
					// edit text
					String note_text = String.valueOf(userInput.getText());
					cmd = String.format("insert into note_table (sheep_id, note_text, note_date) " +
	    					"values ( %s, '%s', '%s' )", thissheep_id, note_text, TodayIs());
	    			Log.i("update notes ", "before cmd " + cmd);
	    			dbh.exec( cmd );	
	    			Log.i("update notes ", "after cmd exec");
				    }
				  })
				.setNegativeButton("Cancel",
				  new DialogInterface.OnClickListener() {
				    public void onClick(DialogInterface dialog,int id) {
					dialog.cancel();
				    }
				  });

			// create alert dialog
			AlertDialog alertDialog = alertDialogBuilder.create();

			// show it
			alertDialog.show();
    	}   	
    }
    
// user clicked the 'help' button
    
    public void helpBtn( View v )
    {
   	// Display help here   	
		AlertDialog.Builder builder = new AlertDialog.Builder( this );
		builder.setMessage( R.string.help_convert )
	           .setTitle( R.string.help_warning );
		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
	           public void onClick(DialogInterface dialog, int idx) {
	               // User clicked OK button 
	        	  
	    		   clearBtn( null );
	               }
	       });		
		AlertDialog dialog = builder.create();
		dialog.show();		
    }
    
    // user clicked 'clear' button
    public void clearBtn( View v )
	    {
	    // clear out the display of everything
    	TextView TV10 = (TextView) findViewById( R.id.inputText );
    	TV10.setText( "" );		
    	TextView TV = (TextView) findViewById( R.id.sheepnameText );
	    TV.setText( "" );
	    TextView TV1  = (TextView) findViewById( R.id.eidText );
	    TV1.setText( "" );
	    TextView TV2  = (TextView) findViewById( R.id.fedText );
	    TV2.setText( null );
	    TextView TV3  = (TextView) findViewById( R.id.farmText );
	    TV3.setText( null );
	    TextView TV4 = (TextView) findViewById( R.id.fed_colorText );
	    TV4.setText( "" );
	    TextView TV5 = (TextView) findViewById( R.id.fed_locationText );
	    TV5.setText( "" );
	    TextView TV6 = (TextView) findViewById( R.id.farm_colorText );
	    TV6.setText( "" );
	    TextView TV7 = (TextView) findViewById( R.id.farm_locationText);
	    TV7.setText( "" );
    	eid_tag_color_spinner = (Spinner) findViewById(R.id.eid_tag_color_spinner);
		eid_tag_color_spinner.setSelection(0);

		eid_tag_location_spinner = (Spinner) findViewById(R.id.eid_tag_location_spinner);
		eid_tag_location_spinner.setSelection(0);


	    fedtagid = 0;
    	farmtagid = 0;
    	eidtagid = 0;
    	// make the alert button normal and disabled
    	btn = (Button) findViewById( R.id.alert_btn );
    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFF000000));
    	btn.setEnabled(false); 
    	//	make the scan button normal
    	btn = (Button) findViewById( R.id.scan_eid_btn );
    	btn.getBackground().setColorFilter(null);
    	
    }
 // user clicked 'Search Fed' button
    public void searchFedTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			fed = TV.getText().toString();
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( fed != null &amp;&amp; fed.length() &gt; 0 )
    		{
//			Search for the sheep with the entered federal tag number. 
//    		assumes no duplicate federal tag numbers, ok for our flock not ok for the general case
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
    				"id_info_table.id_infoid, id_info_table.tag_date_off, sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
    				"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
    				"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", fed);
 //   		Log.i("Convert", cmd);
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd );   	
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
    		{ // no sheep with that federal tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
// This section would allow for multiple sheep with same tag if we implement next and previous
//    	buttons but is commented out for now as our sheep have unique federal tags
//    	if( dbh.getSize() &gt;1){
//
// 			Enable the previous and next record buttons
//    		Button btn2 = (Button) findViewById( R.id.next_rec_btn );
//    		btn2.setEnabled(true);  
//    		//	Set up the various pointers and cursor data needed to traverse the sequence
//    		recNo    = 1;
//    		cursor   = (Cursor) crsr;
//    		nRecs    = cursor.getCount();
//    		colNames = cursor.getColumnNames();
//    		cursor.moveToFirst();
//    	}
    	fedtagid = dbh.getInt( 6 ); // Get the id_info_table.id_infoid from the database
		Log.i("Convert", String.valueOf(fedtagid));
		
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	TextView TV2 = (TextView) findViewById(R.id.fedText)	;
    	TV2.setText(dbh.getStr(4));
    	TextView TV3 = (TextView) findViewById(R.id.fed_colorText);
    	TV3.setText(dbh.getStr(3));
    	TextView TV4 = (TextView) findViewById(R.id.fed_locationText);
    	TV4.setText(dbh.getStr(5));
    	ii = dbh.getInt(1);
    	thissheep_id = ii;
    	
    	// Now we need to check and see if there is an alert for this sheep
       	String alert_text = dbh.getStr(8);
       	Log.i("in find fed ", "Alert Text is " + alert_text);
//    	Now to test of the sheep has an alert and if so then display the alert &amp; set the alerts button to red
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
	       	// make the alert button red
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	//	testing whether I can put up an alert box here without issues
	    	showAlert(v);
		}
     	
//		Now we need to get the farm tag for that sheep and fill the display with data
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
		"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", ii);

    	//   	Log.i("Convert", cmd);    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a farm tag installed
			TV = (TextView) findViewById( R.id.farm_colorText );
			TV.setText( "No tag" );
    	} else {
    		TextView TV5 = (TextView) findViewById(R.id.farmText)	;
    		TV5.setText(dbh.getStr(4));
    		TextView TV6 = (TextView) findViewById(R.id.farm_colorText);
    		TV6.setText(dbh.getStr(3));
    		TextView TV7 = (TextView) findViewById(R.id.farm_locationText);
    		TV7.setText(dbh.getStr(5));
    		ii = dbh.getInt(1);
    		farmtagid = dbh.getInt( 6 ); // Get the id_info_table.id_infoid from the database
    	}
    	}
// 	user clicked 'Search Farm Tag' button
    public void searchFarmTag( View v )
    	{
    	String          cmd;
    	TextView		TV = (TextView) findViewById( R.id.inputText );
    	String			farm = TV.getText().toString();
    	Integer			ii;
    	// Hide the keyboard when you click the button
    	InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
    	imm.hideSoftInputFromWindow(v.getWindowToken(), 0);
    	
// 		Start of the actual code to process the button click
    	if( farm != null &amp;&amp; farm.length() &gt; 0 )
    		{
//			Search for the sheep with the entered farm tag number. 
//    		assumes no duplicate farm tag numbers, ok for our flock not ok for the general case
    		
    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
    				"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
    				"id_info_table.id_infoid, id_info_table.tag_date_off, sheep_table.alert01 " +
    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
    				"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
    				"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
    				"where id_type_table.id_typeid = 4 and id_info_table.tag_date_off is null and id_info_table.tag_number='%s'", farm);
    		
//    		Log.i("Convert", "building command ");
    		}	
    	else
    	{
    		return;
     	}
    	Object crsr = dbh.exec( cmd );   	
    	dbh.moveToFirstRecord();
    	if( dbh.getSize() == 0 )
    		{ // no sheep with that farm tag in the database so clear out and return
    		clearBtn( v );
    		TV = (TextView) findViewById( R.id.sheepnameText );
        	TV.setText( "Cannot find this sheep." );
        	return;
    		}
    	
    	farmtagid = dbh.getInt( 6 ); // Get the id_info_table.id_infoid from the database
    	TV = (TextView) findViewById(R.id.sheepnameText);
    	TV.setText(dbh.getStr(0));
    	TV = (TextView) findViewById(R.id.farmText)	;
    	TV.setText(dbh.getStr(4));
    	TV = (TextView) findViewById(R.id.farm_colorText);
    	TV.setText(dbh.getStr(3));
    	TV = (TextView) findViewById(R.id.farm_locationText);
    	TV.setText(dbh.getStr(5));
    	ii = dbh.getInt(1);
    	thissheep_id = ii;
    	
    	// Now we need to check and see if there is an alert for this sheep
       	String alert_text = dbh.getStr(8);
//    	Now to test of the sheep has an alert and if so then set the alerts button to red
		if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
	       	// make the alert button red and enable it and pop up the alert text
	    	Button btn = (Button) findViewById( R.id.alert_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
	    	btn.setEnabled(true); 
	    	showAlert(v);
		}
	
//		Now we need to get the rest of the tags and fill the display with data
    	cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
		"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
		"id_info_table.id_infoid, id_info_table.tag_date_off " +
		"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
		"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
		"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
		"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
		"where id_type_table.id_typeid = 1 and id_info_table.tag_date_off is null and id_info_table.sheep_id='%s'", ii);
    	
    	crsr = dbh.exec( cmd );
    	dbh.moveToFirstRecord();
    	
		if( dbh.getSize() == 0 )
		{ // This sheep does not have a federal tag installed
			TV = (TextView) findViewById( R.id.fed_colorText );
			TV.setText( "No tag" );
    	} else {
        	fedtagid = dbh.getInt( 6 ); // Get the id_info_table.id_infoid from the database   	
        	TV = (TextView) findViewById(R.id.fedText)	;
        	TV.setText(dbh.getStr(4));
        	TV = (TextView) findViewById(R.id.fed_colorText);
        	TV.setText(dbh.getStr(3));
        	TV = (TextView) findViewById(R.id.fed_locationText);
        	TV.setText(dbh.getStr(5));
        	ii = dbh.getInt(1);
    	}
    	}    
        

    // user clicked 'remove fed tag' button   
    public void removeFedTag( View v )
    	{
    	if( fedtagid != 0 )
    		{
    		AlertDialog.Builder builder = new AlertDialog.Builder( this );
    		builder.setMessage( R.string.delete_tag )
    	           .setTitle( R.string.delete_warning );
    		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
    	           public void onClick(DialogInterface dialog, int idx) {
    	               // User clicked OK button -- remove the federal tag
    	        	   // add a tag_date_off of today to the tag   	       		
    	        	   	String today = TodayIs();
    	        	   	Log.i("removefedtag", String.valueOf(fedtagid));
    	        	   	String cmd = String.format( "update id_info_table SET tag_date_off = '" + today + "' where id_infoid=%d", fedtagid );
    	       		   	dbh.exec( cmd );
//    	    		   	Clear the display of the tags
    	    		   	TextView TV = (TextView) findViewById(R.id.fedText)	;
    	           	    TV.setText(null);
    	           	    TV = (TextView) findViewById(R.id.fed_colorText);
    	           		TV.setText("");
    	           		TV = (TextView) findViewById(R.id.fed_locationText);
    	           		TV.setText("");
    	           		fedtagid = 0;
    	               }
    	       });
    		builder.setNegativeButton( R.string.cancel_btn, new DialogInterface.OnClickListener() {
    	           public void onClick(DialogInterface dialog, int idx) {
    	               // User cancelled the dialog
    	           }
    	       });
    		
    		AlertDialog dialog = builder.create();
    		dialog.show();
    		}
    	}    
    
    // user clicked 'remove farm tag' button   
    public void removeFarmTag( View v )
    	{
    	if( farmtagid != 0 )
    		{
    		AlertDialog.Builder builder = new AlertDialog.Builder( this );
    		builder.setMessage( R.string.delete_tag )
    	           .setTitle( R.string.delete_warning );
    		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
    	           public void onClick(DialogInterface dialog, int idx) {
    	               // User clicked OK button -- remove the farm tag
    	        	   //add a tag_date_off of today to the tag
    	        	   String today = TodayIs();
 //   	        	   Log.i("removefarmtag", today);
    	        	   Log.i("removefarmtag", String.valueOf(farmtagid));
    	       		   String cmd = String.format( "update id_info_table SET tag_date_off = '" + today + "' where id_infoid=%d", farmtagid );
    	    		   dbh.exec( cmd );
//   	    		   	Clear the display of the tags
   	    		   	TextView TV = (TextView) findViewById(R.id.farmText)	;
   	           	    TV.setText(null);
   	           		TV = (TextView) findViewById(R.id.farm_colorText);
   	           		TV.setText("");
   	           		TV = (TextView) findViewById(R.id.farm_locationText);
   	           		TV.setText("");  
   	           		farmtagid = 0;
   	           		}
    	       });
    		builder.setNegativeButton( R.string.cancel_btn, new DialogInterface.OnClickListener() {
    	           public void onClick(DialogInterface dialog, int idx) {
    	               // User cancelled the dialog
    	           }
    	       });
    		
    		AlertDialog dialog = builder.create();
    		dialog.show();
    		}
    	}  
    private String TodayIs() {
		Calendar calendar = Calendar.getInstance();
		int day = calendar.get(Calendar.DAY_OF_MONTH);
		int month = calendar.get(Calendar.MONTH);
		int year = calendar.get(Calendar.YEAR);
		return year + "-" + Make2Digits(month + 1) + "-" +  Make2Digits(day) ;
	}
    private String Make2Digits(int i) {
		if (i &lt; 10) {
			return "0" + i;
		} else {
			return Integer.toString(i);
		}
	}
//     user clicked 'Scan' button    
    public void scanEid( View v){
    	// Here is where I need to get a tag scanned and put the data into the variable LastEID
		if (mService != null) {
		try {
			//Start eidService sending tags
			Message msg = Message.obtain(null, eidService.MSG_SEND_ME_TAGS);
			msg.replyTo = mMessenger;
			mService.send(msg);
		   	//	make the scan eid button green
	    	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0x0000FF00, 0xff00ff00));
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}    	    	
    }
    
    public void updateDatabase( View v ){
    	Object crsr;
    	String sheepnameText, fedText, fed_colorText, fed_locationText;
    	String farmText, farm_colorText, farm_locationText, eidText, eid_colorText, eid_locationText;
    	int		fed_colorid, farm_colorid, eid_colorid, fed_locationid, farm_locationid, eid_locationid;
    	int		fed_number, farm_number;
    	
    	eid_colorid = 0;
    	eid_locationid = 0;
    	eidText = null;
    	
    	// Get the values from the UI screen
    	TextView TV = (TextView) findViewById( R.id.sheepnameText );
    	sheepnameText = TV.getText().toString();
    	Log.i("update everything ", "sheep name " + sheepnameText);
    	
    	Log.i("update everything ", "sheep_id is " + String.valueOf(thissheep_id));
    	
    	Log.i("update everything ", "fed info record " + fedtagid);
   
    	TV  = (TextView) findViewById( R.id.fedText );
	    fedText = TV.getText().toString();
//	    fed_number = Integer.valueOf(fedText);
	    Log.i("update everything ", "fed tag " + fedText);
//	    Log.i("update everything ", "fed tag integer " + String.valueOf(fed_number));
	    
	    Log.i("update everything ", "farm info record " + farmtagid);
	    TV  = (TextView) findViewById( R.id.farmText );
	    farmText = TV.getText().toString();
//	    farm_number = Integer.valueOf(farmText);
	    Log.i("update everything ", "farm number " + farmText);
	    	    
	    Log.i("update everything ", "eid info record " + eidtagid);
	    TV  = (TextView) findViewById( R.id.eidText );
	    eidText = TV.getText().toString();	
	    Log.i("update everything ", "EID Tag " + eidText);
	    
	    if (eidText != null &amp;&amp; !eidText.isEmpty()){
	    	// Get the data from the EID tag section of the screen
	    	eid_tag_color_spinner = (Spinner) findViewById(R.id.eid_tag_color_spinner);
	    	eid_tag_location_spinner = (Spinner) findViewById(R.id.eid_tag_location_spinner);
	    	
	     	eid_tag_color_label = eid_tag_color_spinner.getSelectedItem().toString();
	    	Log.i("update everything ", "EID color is " + eid_tag_color_label);
	    	cmd = String.format("select tag_colors_table.tag_colorsid from tag_colors_table " +
	    			"where tag_color_name='%s'", eid_tag_color_label);
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        dbh.moveToFirstRecord();
	        eid_colorid = dbh.getInt(0);
	        
	    	eid_tag_location_label = eid_tag_location_spinner.getSelectedItem().toString();
	    	Log.i("update everything ", "EID location is " + eid_tag_location_label);
	    	cmd = String.format("select id_location_table.id_locationid from id_location_table " +
	    			"where id_location_abbrev='%s'", eid_tag_location_label);
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        dbh.moveToFirstRecord();
	        eid_locationid = dbh.getInt(0);
	    }
	 
	    //	Need to add tests to see what data we really have and only update if there is some
	    String today = TodayIs();
	    if (fedtagid != 0) {
	    	// 	update the Federal tag data if it has changed?
	    	//	not implemented at this time. Assumed we either are adding new tags or taking off tags first
	    	//	no update of an existing tag record is done in this module.
	    	Log.i("updatefed", " tag record id is not zero, but has data changed?");
	    }
	    	else {
	    		// fedtagid is zero so need to test whether there is a federal tag and add a record if there is one
	    		if (fedText != null &amp;&amp; !fedText.isEmpty()){
	    			//have a federal tag but no fedtagid so add a new record;
	    			fed_number = Integer.valueOf(fedText);
	    		    TV = (TextView) findViewById( R.id.fed_colorText );
	    		    fed_colorText = TV.getText().toString();
	    		    Log.i("update everything ", "fed color " + fed_colorText);	    
	    		    cmd = String.format("select tag_colors_table.tag_colorsid from tag_colors_table " +
	    	    			"where tag_color_name='%s'", fed_colorText);
	    	    	crsr = dbh.exec( cmd );
	    	        cursor   = ( Cursor ) crsr;
	    	        dbh.moveToFirstRecord();
	    	        fed_colorid = dbh.getInt(0);
	    	        Log.i("update everything ", "fed color integer " + String.valueOf(fed_colorid));
	    	        	    
	    		    TV = (TextView) findViewById( R.id.fed_locationText );
	    		    fed_locationText = TV.getText().toString();
	    		    Log.i("update everything ", "fed location " + fed_locationText);
	    		    cmd = String.format("select id_location_table.id_locationid from id_location_table " +
	    	    			"where id_location_abbrev='%s'", fed_locationText);
	    	    	crsr = dbh.exec( cmd );
	    	        cursor   = ( Cursor ) crsr;
	    	        dbh.moveToFirstRecord();
	    	        fed_locationid = dbh.getInt(0);
	    	        Log.i("update everything ", "fed location integer " + String.valueOf(fed_locationid));
	    	      
	    			Log.i("updatefed", " tag record id is 0 but have fed tag data need to add a new record to id_info_table here");
	    			Log.i("update everything ", "sheep_id is " + String.valueOf(thissheep_id));
	    			Log.i("update everything ", "fed color integer " + String.valueOf(fed_colorid));
	    			Log.i("update everything ", "fed location integer " + String.valueOf(fed_locationid));
	    			Log.i("update everything ", "today " + today);
	    			Log.i("update everything ", "fed tag integer " + String.valueOf(fed_number));
	    			cmd = String.format("insert into id_info_table (sheep_id, tag_type, tag_color_male, tag_color_female, tag_location, tag_date_on, tag_number) " +
	    					"values ( %s, 1, %s, %s, %s, '%s', %s )", thissheep_id, fed_colorid, fed_colorid, fed_locationid, today, fed_number);
	    			Log.i("update everything ", "before cmd " + cmd);
	    			dbh.exec( cmd );	
	    			Log.i("update everything ", "after cmd exec");
	    		}
	    		else{
	    			// no federal tag to enter so return
	    			Log.i("updatefed", " no federal tag so nothing to do");	
	    		}
	    	}
	    
//	    //Update the Farm Tag data
	    if (farmtagid != 0) {
	    	// update the Farm tag data
	    	//	not implemented at this time. Assumed we either are adding new tags or taking off tags first
	    	//	no update of an existing tag record is done.
	    	Log.i("updatefarm", " tag record id is not zero, but has data changed?");
		    }
	    	else {
	    		// farmtagid is zero so need to test whether there is a farm tag and add a record if there is one
	    		if (farmText != null &amp;&amp; !farmText.isEmpty()){
	    			
	    		    farm_number = Integer.valueOf(farmText);
	    		    TV = (TextView) findViewById( R.id.farm_locationText);
	    		    farm_locationText = TV.getText().toString();
	    		    Log.i("update everything ", "farm location " + farm_locationText);
	    		    cmd = String.format("select id_location_table.id_locationid from id_location_table " +
	    	    			"where id_location_abbrev='%s'", farm_locationText);
	    	    	crsr = dbh.exec( cmd );
	    	        cursor   = ( Cursor ) crsr;
	    	        dbh.moveToFirstRecord();
	    	        farm_locationid = dbh.getInt(0);
	    	        Log.i("update everything ", "farm color integer " + String.valueOf(farm_locationid));
	    	        
	    		    TV = (TextView) findViewById( R.id.farm_colorText );
	    		    farm_colorText = TV.getText().toString();
	    		    Log.i("update everything ", "farm color " + farm_colorText);
	    		    cmd = String.format("select tag_colors_table.tag_colorsid from tag_colors_table " +
	    	    			"where tag_color_name='%s'", farm_colorText);
	    	    	crsr = dbh.exec( cmd );
	    	        cursor   = ( Cursor ) crsr;
	    	        dbh.moveToFirstRecord();
	    	        farm_colorid = dbh.getInt(0);
	    	        Log.i("update everything ", "farm location integer " + String.valueOf(farm_locationid));

	    			//have a farm tag but no farmtagid so add a new record;
	    			Log.i("updatefarm", " tag record id is 0 but have farm tag data need to add a new record to id_info_table here");
	    			cmd = String.format("insert into id_info_table (sheep_id, tag_type, tag_color_male, tag_color_female, tag_location, tag_date_on, tag_number) " +
	    					"values ( %s, 4, %s, %s, %s, '%s', %s )", thissheep_id, farm_colorid, farm_colorid, farm_locationid, today, farm_number);
	    			dbh.exec( cmd );	
	    		}
	    		else{
	    			// no farm tag to enter so return
	    			Log.i("updatefarm", " no farm tag so nothing to do");
	    			
	    		}
	    	}
//	    //Update the EID Tag data
	    if (eidtagid != 0) {
	    	// update the EID tag data
	    	Log.i("updateEID", " tag record id is not zero, needs update here");
		    }
	    	else {
	    		// eidtagid is zero so need to test whether there is an EID tag and add a record if there is one
	    		if (eidText != null &amp;&amp; !eidText.isEmpty()){
	    			//have an EID tag but no eidtagid so add a new record;
	    			Log.i("updateEID", " tag record id is 0 need to add a new record to id_info_table here");
	    			cmd = String.format("insert into id_info_table (sheep_id, tag_type, tag_color_male, tag_color_female, tag_location, tag_date_on, tag_number) " +
	    					"values ( %s, 2, %s, %s, %s, '%s', '%s' )", thissheep_id, eid_colorid, eid_colorid, eid_locationid, today, eidText);
	    			dbh.exec( cmd );	
	    		}
	    		else{
	    			// no EID tag to enter so return
	    			Log.i("updateEID", " no eid tag so nothing to do");
	    		}
	    	}
	    cursor.close();
	    clearBtn( v );
	    }
    public void addNewTag( View v ){
 //   	String temp;
    	Object crsr;
    	
       	btn = (Button) findViewById( R.id.update_display_btn );
    	btn.setEnabled(true); 
    	new_tag_number = null;
       	// Fill the Tag Type Spinner
     	//	Decided to only allow Federal and Farm as tag type options for this task
    	tag_type_spinner = (Spinner) findViewById(R.id.tag_type_spinner);
    	tag_types = new ArrayList&lt;String&gt;();      	
    	tag_types.add("Select a Type");
    	tag_types.add("Federal");
    	tag_types.add("Farm");
    	
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_types);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		tag_type_spinner.setAdapter (dataAdapter);
		tag_type_spinner.setSelection(0);	
    	
    	// Fill the Tag Color Spinner
    	tag_color_spinner = (Spinner) findViewById(R.id.tag_color_spinner);
     	tag_colors = new ArrayList&lt;String&gt;();       	
        // Select All fields from tag colors to build the spinner
        cmd = "select * from tag_colors_table";
        crsr = dbh.exec( cmd );  
        cursor   = ( Cursor ) crsr;
    	dbh.moveToFirstRecord();
    	tag_colors.add("Select a Color");
         // looping through all rows and adding to list
    	for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
    		tag_colors.add(cursor.getString(2));
    	}
    	cursor.close();
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_colors);

		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		tag_color_spinner.setAdapter (dataAdapter);
		tag_color_spinner.setSelection(1);
				
    	// Fill the Tag Location Spinner
		// Only allow ear locations for tags for this task
		tag_location_spinner = (Spinner) findViewById(R.id.tag_location_spinner);
		tag_locations = new ArrayList&lt;String&gt;();        
		tag_locations.add("Select a Location");
		tag_locations.add("Right Ear");		
		tag_locations.add("Left Ear");
		
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_locations);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		tag_location_spinner.setAdapter (dataAdapter);
		tag_location_spinner.setSelection(1);
	}
    
    public void showAlert (View v)
    {
    		String	alert_text;
            String          cmd;    
            Object 			crsr;        
    		// Display alerts here   	
    				AlertDialog.Builder builder = new AlertDialog.Builder( this );
    				cmd = String.format("select sheep_table.alert01 from sheep_table where sheep_id =%d", thissheep_id);
//    				Log.i("get alert ", cmd);  
    				crsr = dbh.exec( cmd );
    		        cursor   = ( Cursor ) crsr;
    		        dbh.moveToFirstRecord();		       
    		        alert_text = (dbh.getStr(0));
//    		        Log.i("get alert ", alert_text); 
    				builder.setMessage( alert_text )
    			           .setTitle( R.string.alert_warning );
    				builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
    			           public void onClick(DialogInterface dialog, int idx) {
    			               // User clicked OK button   	  
    			               }
    			       });		
    				AlertDialog dialog = builder.create();
    				dialog.show();
    				cursor.close();	
    	}
    
    public void updateTag( View v ){
    	Object 			crsr;
    	String 			cmd;
    	TextView 		TV;
    	// Get the data from the add tag section of the screen
    	tag_type_spinner = (Spinner) findViewById(R.id.tag_type_spinner);
    	tag_color_spinner = (Spinner) findViewById(R.id.tag_color_spinner);
    	tag_location_spinner = (Spinner) findViewById(R.id.tag_location_spinner);
    	
    	tag_type_label = tag_type_spinner.getSelectedItem().toString();
//    	Log.i("updateTag", "Tag type is " + tag_type_label);
    	tag_color_label = tag_color_spinner.getSelectedItem().toString();
//    	Log.i("updateTag", "Tag color is " + tag_color_label);
    	tag_location_label = tag_location_spinner.getSelectedItem().toString();
//    	Log.i("updateTag", "Tag location is " + tag_location_label);
    	
    	TV  = (TextView) findViewById( R.id.new_tag_number);
    	new_tag_number = TV.getText().toString();
//    	Log.i("before if", " new tag number " + new_tag_number);
    	
    	// 	Fill the new tag data with where it is in the database tables
    	//	Integers to hold the info new_tag_type, new_tag_color, new_tag_location
    	if (tag_type_label == "Select a Type" || tag_location_label == "Select a Location" || tag_color_label == "Select a Color"
    			|| TV.getText().toString().isEmpty()) {
    		new_tag_type = 0;
    		// Missing data so  display an alert 	
    		AlertDialog.Builder builder = new AlertDialog.Builder( this );
    		builder.setMessage( R.string.convert_fill_fields )
    	           .setTitle( R.string.convert_fill_fields );
    		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
    	           public void onClick(DialogInterface dialog, int idx) {
    	               // User clicked OK button 
     	    		   return;
    	               }
    	       });		
    		AlertDialog dialog = builder.create();
    		dialog.show();		   		
    	}else
    	{
    		cmd = String.format("select id_type_table.id_typeid from id_type_table " +
			"where idtype_name='%s'", tag_type_label);
    		crsr = dbh.exec( cmd );
    		cursor   = ( Cursor ) crsr;
    		dbh.moveToFirstRecord();
    		new_tag_type = dbh.getInt(0);
    		
       		cmd = String.format("select tag_colors_table.tag_colorsid from tag_colors_table " +
       				"where tag_color_name='%s'", tag_color_label);
       	    crsr = dbh.exec( cmd );
    		cursor   = ( Cursor ) crsr;
    		dbh.moveToFirstRecord();
    		new_tag_color = dbh.getInt(0);

    		cmd = String.format("select id_location_table.id_locationid, id_location_table.id_location_abbrev from id_location_table " +
			"where id_location_name='%s'", tag_location_label);
    		crsr = dbh.exec( cmd );
    		cursor   = ( Cursor ) crsr;
    		dbh.moveToFirstRecord();
    		new_tag_location = dbh.getInt(0);
//    		Log.i("New Location ID ", String.valueOf(new_tag_location));
     		tag_location_label = dbh.getStr(1);
//    		Log.i("New Location ", tag_location_label);
    		
        	if (new_tag_type == 1){
        		//	Federal Tag so update federal section and set needs database update
        		Log.i("in if", "Got a new federal tag type");
        	    TV  = (TextView) findViewById( R.id.fedText );
        	    TV.setText(new_tag_number);
        	    TV = (TextView) findViewById( R.id.fed_colorText );
        	    TV.setText(tag_color_label);
        	    TV = (TextView) findViewById( R.id.fed_locationText );
        	    TV.setText(tag_location_label);
        	    fedtagid = 0;
         	}
        	if (new_tag_type == 4){
        		//	Farm Tag so update farm section and set needs database update
        		Log.i("in if", "Got a new farm tag type");
        	    TV  = (TextView) findViewById( R.id.farmText );
        	    TV.setText(new_tag_number);
        	    TV = (TextView) findViewById( R.id.farm_colorText );
        	    TV.setText(tag_color_label);
        	    TV = (TextView) findViewById( R.id.farm_locationText );
        	    TV.setText(tag_location_label);
        	    farmtagid = 0;
        	}
        	//	Clear out the add tag section    	
        	tag_type_spinner = (Spinner) findViewById(R.id.tag_type_spinner);
        	tag_color_spinner = (Spinner) findViewById(R.id.tag_color_spinner);
        	tag_location_spinner = (Spinner) findViewById(R.id.tag_location_spinner);
        	TV  = (TextView) findViewById( R.id.new_tag_number);
        	tag_type_spinner.setSelection(0);
        	tag_color_spinner.setSelection(0);
        	tag_location_spinner.setSelection(0);
        	TV.setText( "" );
        	}
     	}
}
</Text>
        </Document>
        <Document ID="D06EC5A9-30B6-4EF5-A11C-A51558825C16">
            <Title>Beginning info</Title>
            <Text>"This is not your grandfathers user manual"
1st pages enthralling story per Craig Childs Comment re catching the interest
Scene using LambTracker to save sheep - Difficult lambing?
Go by the year with tasks we do</Text>
        </Document>
        <Document ID="1B144CCD-217E-42B2-B3F3-DB6E9A754EBC">
            <Title>Title Page</Title>
            <Text>







&lt;$PROJECTTITLE&gt;

&lt;$author&gt;</Text>
            <Notes>These tags get replaced with the information set in Project &gt; Meta-Data Settingsâ¦ &gt; Project Properties. You can edit those settings or just replace this text altogether.</Notes>
        </Document>
        <Document ID="B615C913-E56C-4B9B-83DD-F72AF6172AEE">
            <Title>Copyright</Title>
            <Text>















Copyright Â© &lt;$year&gt; &lt;$author&gt;
All rights reserved.
ISBN:
ISBN-13:
</Text>
            <Notes>Feel free to delete this document if you donât need it.</Notes>
        </Document>
        <Document ID="A21B5D43-D249-4031-AEBA-8735DEFBF089">
            <Title>EvaluateSheep2 XML</Title>
            <Text>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;
    
       &lt;GridLayout 
        	android:id="@+id/grid1"
	        android:layout_width="wrap_content"
			android:layout_height="wrap_content"
        	android:columnCount="3"
       		android:rowCount="3"&gt;
        
           &lt;TextView
            android:layout_width="150dp"
            android:layout_height="wrap_content"     
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/input_id_lbl" /&gt;
           
           &lt;EditText
            android:id="@+id/inputText"
            android:layout_width="205dp"
            android:layout_height="wrap_content"
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="1"
            android:enabled="true"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
            &lt;requestFocus /&gt;
            &lt;/EditText&gt;
            
  			&lt;TextView
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
        	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
        	android:text="@string/sheep_name_lbl" /&gt;
        
        &lt;TextView
        	android:id="@+id/sheepnameText"
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
           	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:ems="10"
        	android:gravity="left"
        	android:textSize="18sp"
        	android:typeface="monospace" /&gt;    
    
       &lt;/GridLayout&gt;  
     
    &lt;GridLayout
        android:id="@+id/grid2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="6" &gt;

        &lt;Button
            android:id="@+id/search_fed_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFedTag"
            android:text="@string/search_fed_btn" 
            android:textSize="14sp"/&gt;
 
        &lt;Button
            android:id="@+id/search_farm_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="1"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFarmTag"
            android:text="@string/search_farm_btn" 
            android:textSize="14sp"/&gt;
       
        
        &lt;Button
            android:id="@+id/scan_eid_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="scanEid"
            android:text="@string/scan_eid_btn"
            android:textSize="14sp" /&gt;
        
        &lt;Button
            android:id="@+id/save_evaluation_scores_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="3"
            android:layout_gravity="left|top"
            android:layout_row="0"        	
            android:onClick="saveScores"
            android:text="@string/save_evaluation_scores_btn"
            android:textSize="14sp" /&gt;       
  	&lt;/GridLayout&gt; 
    
    &lt;GridLayout
        android:id="@+id/grid3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:columnCount="6"
        android:rowCount="6" &gt;

        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/federal_id_lbl" /&gt;

        &lt;TextView
            android:id="@+id/fedText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="1"
			android:textSize="14sp"
            android:typeface="monospace" /&gt;
        
 		&lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/farm_id_lbl" /&gt;

        &lt;TextView
            android:id="@+id/farmText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:enabled="true"
            android:textSize="14sp"
            android:typeface="monospace" /&gt;
        
        &lt;TextView
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/electronic_id_lbl" /&gt;
        
        &lt;TextView
            android:id="@+id/eidText"
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:textSize="14sp"
            android:typeface="monospace" /&gt;       
    &lt;/GridLayout&gt;
    
  &lt;RelativeLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"&gt;
  &lt;ScrollView
	    android:id="@+id/scroll01"
	    android:layout_width="fill_parent"
	    android:layout_height="75dp"&gt;
			&lt;TableLayout
		       android:id="@+id/TableLayout01"
		       android:layout_width="fill_parent"
		       android:layout_height="wrap_content"&gt;
			&lt;/TableLayout&gt;  
  	&lt;/ScrollView&gt; 
  	
  	&lt;View
	    android:id="@+id/dividerbar"
	    android:layout_width="fill_parent"
	    android:layout_height="2dp"
	    android:background="@android:color/black"
	    android:layout_below="@id/scroll01"&gt;
	&lt;/View&gt;
	
    &lt;ScrollView
	    android:id="@+id/scroll02"
	    android:layout_width="fill_parent"
	    android:layout_height="75dp"
	   	android:layout_below="@id/dividerbar"&gt;
			&lt;TableLayout
		       android:id="@+id/TableLayout02"
		       android:layout_width="fill_parent"
		       android:layout_height="wrap_content"&gt;
			&lt;/TableLayout&gt;  
  	&lt;/ScrollView&gt;   
  	
	&lt;View
	    android:id="@+id/dividerbar02"
	    android:layout_width="fill_parent"
	    android:layout_height="2dp"
	    android:background="@android:color/black"
	    android:layout_below="@id/scroll02"&gt;
	&lt;/View&gt;
	
    &lt;TextView
        android:id="@+id/radioGroup1_lbl"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="18sp"
        android:typeface="monospace"
        android:layout_below="@id/dividerbar02" /&gt;  
            
    &lt;RadioGroup
        android:id="@+id/radioGroup1"
        android:layout_width="wrap_content"
        android:layout_height="175dp"
        android:layout_below="@id/radioGroup1_lbl"&gt;
  	&lt;/RadioGroup&gt;
  
	&lt;/RelativeLayout&gt;
	
    &lt;RelativeLayout
    	android:id="@+id/RelativeLayout02"
    	android:orientation="horizontal" 
  		android:layout_width="fill_parent"
  		android:layout_height="wrap_content"&gt;
        
       	&lt;Button
            android:id="@+id/back_to_main_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_alignParentLeft="true"
            android:onClick="backBtn"
            android:text="@string/back_btn"
            android:textSize="14sp" /&gt;
       	
       	&lt;Button
            android:id="@+id/alert_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_toRightOf="@+id/back_to_main_btn"
            android:onClick="showAlert"
            android:text="@string/alert_btn"
            android:textSize="14sp" /&gt;
       	&lt;Button
            android:id="@+id/clear_form_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/alert_btn"
            android:onClick="clearBtn"
            android:text="@string/clear_btn"
            android:textSize="14sp" /&gt;
       		
       	&lt;Button
           android:id="@+id/help_btn"
           android:layout_width="100dp"
           android:layout_height="50dp"
           android:layout_alignParentRight="true"
           android:onClick="helpBtn"
           android:text="@string/help_btn"
           android:textSize="14sp" /&gt;
  &lt;/RelativeLayout&gt;        
  
&lt;/LinearLayout&gt;
</Text>
        </Document>
        <Document ID="9A1EEECF-1CB9-4D8C-8E4C-7DB8EB2D03A3">
            <Title>Character Sketch</Title>
            <Text>Character Name

	Role in Story:	
	Occupation:	
Â 	

Physical Description:	

	Personality:	

	Habits/Mannerisms:	
Â 	

	Background:	

	Internal Conflicts:	

	External Conflicts:	 
Â 	

	Notes:	</Text>
        </Document>
        <Document ID="6C606560-39B4-44D8-8284-42FC633B0CF8">
            <Title>Introduction</Title>
            <Synopsis>âThis is not your Grandfatherâs User Manualâ</Synopsis>
            <Text>Most User Manuals are known for their dry, uninteresting prose. Well hang on to your hat: This is NOT your Grandfatherâs User Manual. 
The LambTracker system is designed by shepherds for shepherds. So put down the crook, tell the dog to heel, pull up a chair and take a look. 
Keeping sheep is seasonal, there are a number of tasks that happen during the shepherding year and these tasks typically repeat at the same time next year. Using the LambTracker system to help you during the year is a great way to learn how to use the program and more importantly, how to adapt it for your own needs. So instead of a typical user manual with dull lists of what menu items are available (which any idiot can determine just by looking at the screen) we have chosen instead to describe how we use LambTracker to handle our yearly tasks. 
If you really want the details of every option, see the appendix, which is a more typical user manual. 
LambTracker is Open Source software and is free. 
If you decide that the standard LambTracker program is not suitable, no worries. We donât care and you are not out any money to test it. If you are working in LambTracker and discover that there is something you wish to do that is not implemented, the full source code is available. LambTracker is written in Java. The underlying database is an SQLite database. While it is not exactly simple, it is certainly possible for a determined shepherd to install a development system on your home computer and go in and modify LambTracker to your exact needs. 
If you really need the new feature or changes, you can contact us. We might integrate it in one of our updates or perhaps we can program it for you. 
General support for LambTracker is available from our web site www.lambtracker.com 
Do keep in mind that LambTracker is only two people and we also run a sheep farm so sometimes we are not really fast at answering questions. If you have a problem during lambing, good luck, but as soon as we surface weâll try to answer your question.
</Text>
        </Document>
        <Document ID="B6DF0DDA-6A85-4301-B188-2D3B78F2AA85">
            <Title>Blank Page</Title>
            <Text>&lt;$BLANK_PAGE&gt;</Text>
            <Notes>During Compile, Scrivener will try to remove any unnecessary blank pages. The &lt;$BLANK_PAGE&gt; tag tells Scrivener to leave this page blank (the tag itself will be removed from the compiled document).</Notes>
        </Document>
        <Document ID="B50F6BEF-61B2-403B-A6C2-7C928145BCB6">
            <Title>Dedication</Title>
            <Text>










Insert dedication here.</Text>
            <Notes>Feel free to delete this document if you donât need it.</Notes>
        </Document>
        <Document ID="921DEB8A-525D-418D-A412-6479282144BC">
            <Title>Define the problem</Title>
        </Document>
        <Document ID="8BF396B3-7074-4C5E-9537-CAB1E2AC44AF">
            <Text>So you have a small or medium sized sheep flock and you need to keep records; </Text>
        </Document>
        <Document ID="1571ED90-EC89-4AFF-8CC0-01384A0AEF56">
            <Title>LookUpSheep XML</Title>
            <Text>&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;

     &lt;GridLayout 
        	android:id="@+id/grid1"
	        android:layout_width="wrap_content"
			android:layout_height="wrap_content"
        	android:columnCount="3"
       		android:rowCount="3"&gt;
        
           &lt;TextView
            android:layout_width="205dp"
            android:layout_height="wrap_content"     
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/input_id_lbl" /&gt;
           
           &lt;EditText
            android:id="@+id/inputText"
            android:layout_width="205dp"
            android:layout_height="wrap_content"
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="1"
            android:enabled="true"
            android:inputType="text"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
			&lt;/EditText&gt;
            
  			&lt;TextView
        	android:layout_width="150dp"
       	 	android:layout_height="wrap_content"
        	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
        	android:text="@string/sheep_name_lbl" /&gt;
        
        &lt;TextView
        	android:id="@+id/sheepnameText"
        	android:layout_width="150dp"
       	 	android:layout_height="wrap_content"
           	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:ems="10"
        	android:gravity="left"
        	android:textSize="18sp"
        	android:typeface="monospace" /&gt;       
       &lt;/GridLayout&gt;  
       
 &lt;RelativeLayout
    android:id="@+id/RelativeLayout02"
    android:orientation="horizontal" 
  	android:layout_width="fill_parent"
  	android:layout_height="wrap_content"&gt;    
     
     &lt;Spinner
        android:id="@+id/tag_type_spinner"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_alignParentLeft="true"
        android:textSize="18sp" /&gt;
     
     &lt;Button
            android:id="@+id/look_up_sheep_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/tag_type_spinner"
            android:onClick="lookForSheep"
            android:text="@string/look_up_sheep_btn"
            android:textSize="14sp" /&gt;
    
     &lt;Button
            android:id="@+id/alert_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/look_up_sheep_btn"
            android:onClick="showAlert"
            android:text="@string/alert_btn"
            android:textSize="14sp" /&gt; 
            
     &lt;Button
            android:id="@+id/scan_eid_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_alignParentRight="true"
            android:onClick="scanEid"
            android:text="@string/scan_eid_btn"
            android:textSize="14sp" /&gt;
     
  &lt;/RelativeLayout&gt;    		
  		
		&lt;GridLayout
	        android:id="@+id/grid2"
	        android:layout_width="match_parent"
	        android:layout_height="wrap_content"
	        android:columnCount="5"&gt;   	    
	     	    
	        &lt;TextView
	            android:layout_width="176dp"
	            android:layout_height="wrap_content"
	            android:layout_column="1"
	            android:layout_gravity="left|top"
	            android:layout_row="0"
	            android:inputType="none"
	            android:text="@string/tag_number_lbl" /&gt;
	        
	        &lt;TextView
	            android:layout_width="65dp"
	            android:layout_height="wrap_content"
	            android:layout_column="2"
	            android:layout_gravity="left"
	            android:layout_row="0"
	            android:inputType="none"
	            android:text="@string/tag_color_abbrev_lbl" /&gt;
	        
	        &lt;TextView
	            android:layout_width="40dp"
	            android:layout_height="wrap_content"
	            android:layout_column="3"
	            android:layout_gravity="left"
	            android:layout_row="0"
	            android:inputType="none"
	            android:text="@string/tag_location_abbrev_lbl" /&gt;
	        
	        &lt;TextView
	            android:layout_width="80dp"
	            android:layout_height="wrap_content"
	            android:layout_column="4"
	            android:layout_gravity="left"
	            android:layout_row="0"
	            android:inputType="none"
	            android:text="@string/tag_type_abbrev_lbl" /&gt;
        
     	&lt;/GridLayout&gt;
    	    
       &lt;ListView 
			android:id="@+id/android:list" 
	  		android:layout_height="350dp"
	  		android:layout_width="fill_parent"&gt;
		&lt;/ListView&gt;

&lt;RelativeLayout
    android:id="@+id/RelativeLayout03"
    android:orientation="horizontal" 
  	android:layout_width="fill_parent"
  	android:layout_height="wrap_content"&gt;
        
       	&lt;Button
            android:id="@+id/back_to_main_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_alignParentLeft="true"
            android:onClick="backBtn"
            android:text="@string/back_btn"
            android:textSize="14sp" /&gt;
       	
       	&lt;Button
            android:id="@+id/update_database_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/back_to_main_btn"
            android:onClick="updateDatabase"
            android:text="@string/update_database_btn"
            android:textSize="14sp" /&gt;
       	&lt;Button
            android:id="@+id/clear_form_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/update_database_btn"
            android:onClick="clearBtn"
            android:text="@string/clear_btn"
            android:textSize="14sp" /&gt;
       	&lt;Button
           android:id="@+id/help_btn"
           android:layout_width="100dp"
           android:layout_height="50dp"
           android:layout_alignParentRight="true"
           android:onClick="helpBtn"
           android:text="@string/help_btn"
           android:textSize="14sp" /&gt;
       	&lt;/RelativeLayout&gt;

&lt;/LinearLayout&gt;</Text>
        </Document>
        <Document ID="C2B0DACC-9BF7-44FF-8A13-6D2506C59A21">
            <Title>Character Sketch</Title>
            <Text>Character Name

	Role in Story:	
	Occupation:	
Â 	

Physical Description:	

	Personality:	

	Habits/Mannerisms:	
Â 	

	Background:	

	Internal Conflicts:	

	External Conflicts:	 
Â 	

	Notes:	</Text>
        </Document>
        <Document ID="725E5C0C-3CFC-407F-AA3F-F0D469D64029">
            <Title>Revision 4 Plans</Title>
            <Text>LambTracker revision 4 Planned Improvements 

Add a diary or general shepherd notes journal that is not related to a single sheep for overall flock notes.
EBV data collection and display
Add beeps from tablet when you press save scores so there is feedback that the data got saved
Calculation of inbreeding according to Wrights Methods
Wards Analysis of a population for clustering of sheep by relationship
</Text>
        </Document>
        <Document ID="CD5650BE-8018-49B3-B987-9C7D93DEB704">
            <Title>August</Title>
            <Synopsis>Weaning</Synopsis>
            <Text>August - Sort for Weaning
Before coming out to work the sheep Keith had set up the sorting task on LambTracker desktop. To set up a sort click the Sheep Management Task icon to get into the task management screen. Select the type of task you wish to do from the following choices
Sort Sheep
Worming or Vaccinations
Hoof Trims
Evaluate Sheep
For today the selection is Sort Sheep
The sort screen appears and  Keith selected one of the standard sort options from the resulting menu: 
Sort Ram Lambs
Sort Ewe Lambs
Select Individual Sheep for Sorting
There were other options (* insert rest of the options here *)
He saved the sort criteria and then selected Download Sheep Tasks to Android. 
What he didnât realize is that behind the scenes LambTracker Desktop created an Alert Message for each male sheep less than 1 year of age that said âSort for weaningâ. The alerts were added to any existing alerts for each specific sheep by inserting a new line character into the alert field and then appending the âSort for weaningâ text. 
He unplugged the kids Android tablet from his desktop Macintosh and grabbed the inexpensive sheep EID reader he had built from directions on the LambTracker web site. Putting on a shooting vest with a large front pocket completed his preparations and he headed outdoors. He grabbed his own sheep crook and met Caitlin at the sheep sweep. 
Caitlin woke up early, the weather had been really hot but the monsoon rains had come and things were cooling off a bit. The lambs were growing well and it was time to wean the ram labs and get them out of the pastures away from the ewes. It was still hot in the afternoons so all sheep work had to be done early. 
Caitlin grabbed the Android tablet computer and the EID reader and headed out the door. In the barn she picked up the sheep crook. Yesterday Caitlin and Keith had worked to get all the fences set to move the sheep into the handling yard. They worked quickly and efficiently, finishing up the last set-ups and getting gates ready.
âBaaa Baa Baaâ, Caitling called, âCome on sheep, sheep, Open Gateâ. Their flock was small enough that they never used a herding dog. It was generally easier to set a few electric fences and train the sheep to come than it would be to deal with a hyper border collie all year long. The sheep flock all looked up and came racing towards the open gate. Ewes and lambs streamed past and headed down to the main barn and the sheep sweep.
Caitlin called the flock down and gotten the first batch of mixed ewes and lambs into the handling facility and set the gates behind to keep sheep moving into the chute system. With only two people to handle the sheep and no herding dog they had worked out a great way to work with LambTracker. Keith kept the handheld and got behind the sheep in the sweep. Caitlin would operate the gates to get sheep into the chute, scan the EID ear tags on the sheep and then sort them based on results Keith called out. The procedure is to fill the chute with a group of sheep. Then Caitlin would go down the line and scan each EID. As she did so Keith would call out the alert messages for that sheep.
âReady?â Caitlin called
âReadyâ said Keith.
The first sheep was scanned easily.
âCheck left hind foot, possible abscessâ said Keith.
Caitlin checked the sheep and then moved to the next one in line. 
âGot itâ, called Keith, âSort for weaningâ.
Caitlin scanned the next sheep.
âNothingâ said Keith
When a chute full was scanned Caitlin would then sort the sheep into the weaned lambs group and the rest of the sheep. They did not own an automatic sort gate. If they had one they could have set up the sort using the EID tags and have the sheep automatically sorted for them. However their procedure was much faster than their previous system. 
They continued this way until all 150 sheep had been sorted. Their sheep sweep only had a two way sort gate. If they needed to sort sheep into more than two separate groups they would sort out the first batch, then run them into their new location and re-sort the remaining sheep until all groups were done. 
Along the way several sheep had alerts to check something else. A few needed their hooves trimmed, some needed to be checked for nose bots and a few had to have their teeth checked. 
âCheck tooth abscess right lower jawâ called out Keith. 
Caitlin grabbed the ewe head and carefully checked the old ewesâ jaw. âSheâs fine now you can remove the alert.â
Keith selected the clear the alert button and removed the note about the teeth on that sheep. 
âAdd an alert, please. Bad tooth lower right, have vet checkâ Said Caitlin. âIf she doesnât get better  sheâll have to go to slaughter this fall.â
Keith selected the add an alert button and typed in the new alert text.
Several sheep seemed to have some sort of new problem or issue. In these cases a new note was added for sheep that had common things that Keith or Caitlin decided needed to be kept in the permanent record for the sheep. 
âAdd a note on this one please.â Said Caitlin âSheâs got a messy butt.â
Keith selected the Add a Note button and then selected âMessy Buttâ from the list of predefined notes. LambTracker comes with a number of predefined notes about sheep installed but the user can add new ones.
A couple other items became alerts for next time. A ewe with a tooth abscess was marked with a new alert to re-check next time the sheep went through the sweep. 
Once all the sheep had been sorted the newly weaned ram lambs were herded into the weaning pen. The ewes and their ewe lambs were sent back out into the pasture. 

</Text>
        </Document>
        <Document ID="A73ACA91-93D4-42D9-B2A3-B9066B22D711">
            <Title>Desktop Set-Up</Title>
            <Text>LambTracker Desktop is the software package that is used to create and set up the handheld for use in the field. It is also the package that allows you to create various reports to access your flock data. 
The general concept is that you set up your defaults and predefined items, select the tasks you plan to do on the handheld and download the current data set and the tasks to the handheld. 
Once you have finished with the sheep tasks any data you have collected during the task are synced back to the desktop system.
LambTracker Desktop has separate screens to set up all the various pre-defined notes, evaluation criteria, identification types, tag colors and so on. 
Setting up the database initially can be a difficult task. 
If you currently use a spreadsheet to store your data and choose not to enter in al the data at once then I strongly suggest using color coding to mark the cells that have already been included so you know whatâs done and what you still need to do. Green works well to show the finished items.
A tool we have used to enter in past data is
Csv2sql.com
This tool takes a .csv file and creates either insert or update statements. You can then cut and past those into an SQLite tool to populate the database.
Before you get going with LambTracker you need to make a basic decision. Will you try to enter in all back data at one time or will you do it in pieces. Either way is fine but there are advantages and disadvantages to each option. To help you make your choice here are some of the issues:
Enter in all Back Data at Once
Advantages:
Once you get it done itâs done. Itâs mostly a matter of creating the initial spreadsheets for each of the various tables and completely filling out the data. Running the Csv2sql tool to create insert statements and then getting them in. 
Disadvantages:
It can be hard to verify that you have the data entered in accurately. There are some cross reference issues that mean that you must populate tables in the database in a specific order or you will get errors. If you have a lot of data it can take many hours before you can finally test and run LambTracker.
Enter in Data in Pieces
Advantages:
You can start with the existing flock of sheep and just enter in them. 
You can avoid adding in all the cross references until you need them. 
Disadvantages:
Updating individual records to add the data for fields you have left off is tedious and prone to errors. 
Like loading all data in initially there are a few cross reference issues but they are a bit easier to deal with as long as you avoid running LambTracker modules that require the tables until you have made the cross links. 
The second major decision you will need to make is how to populate the various defaults and lists. This is not difficult, you can certainly add the data in as you think of it but there may be reason to plan this out a bit more.
Specifically the following table might need to be though out before you start adding in historical data:
evaluation_trait_table - This table holds the various evaluations you will perform on the sheep. Within a given category the items you place in this table will be displayed in the order in which you added them. When you are setting up an evaluation they will show up in that order and when you are actually evaluating sheep they will be in the same order. It is worth a bit of time to think about how you actually evaluate sheep and put the evaluation trait in the same order. For example I evaluate sheep from nose to tail. So I entered in my traits starting with teeth and ending with udder and scrotal circumference. A bit of thinking at this point will save you a lot of time when you actually use LambTracker later in the field. 
location_table - This is the list of the places, fields or farms that you will be using to move sheep to and from. If you use LambTracker to manage your grazing then you need to think about how you will use this field. If you are required to keep movement data you may wish to have a catch-all premise or holding that can be used to document moving animals on and off the entire farm in addition to which field specific animals are in at any given time. 
predefined_notes_table - This table contains the notes that you commonly associate with your sheep. Again, this table is presented in LambTracker in the order in which you enter them. You may wish to look at the types of things you will routinely record for individual sheep and put the most common ones near the top of the list. Having a consistent list of the most common notes will aid you in searching for sheep with a specific note later. For example: We routinely evaluate sheep on behavior and grade sheep with good behavior or bad behavior frequently. We also like to keep sheep that will eat thistles and who are friendly so those are high on my list of predefined notes. Less common notes are further down the list. 
remove_reason_table - This table is also shown to you in the order in which you entered the choices. One key item is that including the word Died in the field will make it easier to locate sheep who were removed due to death later even if you choose to track the cause of death in the reasons.
units_table - I strongly urge you to include both metric and Imperial units. You may receive data from other people in a form that you do not normally use. Rather than convert it to your standard it is often easier to allow LambTracker to do the conversions as required. 
service_type_table - This is where you set up the types of matings you plan. If you will be doing artificial insemination it is suggested that the service_type_table include the AI method (laparoscopic, trans-cervical or vaginal) and the semen type, fresh cooled or frozen. 
gestation_periods - LambTracker does a significant amount of data collection based on knowing the minimum, maximum and average gestation period for your breed or species. You can define these limits when you first start up
Beyond these tables there are many other tables in the database that will be used to collect data for LambTracker. 

Here are the steps if you plan to enter in all data initially.
1. Gather the data before you start. 
You will need all sheep identification
</Text>
        </Document>
        <Document ID="09634235-E484-4DA9-9BD7-4F7BC394D719">
            <Title>NaNoWriMo (Obfuscated)</Title>
            <Text>Tbzos zpses dbtbz szb xsob, pbosopbobez xdzpzspzog otzb. Sbzbz znbopes xdzpzspzog votzb, szb xsob pezses tzbozb vonzpetx sod. Oettx sod ezox bottes. Pzbzo obo tzgetx xb tzgetx sbttzs bospbz oop obo zpses. Sxopooxs obo etbzzpzos otzb. Eb xp ozbs xp ozbs spotozzsqeo pbssbdb. Sespoodzsso xppessxo zzses oop tob sxgzbbzs dzgozsszs. Xoooxo sbttzs zxpetzs sxbbzs. Zobogoz qexs ozbs, ettxspbzpoz xb xepbbz eb, sospoz xp qexs. Dboop ob fotzs vzbxo jesbb txbzoob txbzoob. Oxs oe pezes vot ozst vooooxbzs sbdxtos. Qezsqeo bospbz btxodzb dbtbz, obo ptxpozxb dez bzzsbzqeo pbssbdb. Pezxbzbez spotozzsqeo noodzozzb topbes, txbzoob sospoz dez pbssbdb pbzbx. Sbzbz ettxspbzpoz, zpses bzzsbzqeo sbttzpzbedzo bzzsbzqeo, tob xzpe xppessxo ozbs, pbosoqexb oezssbd zpses sos qezs tzbozb.
Sbzbz eb bbzbbz zpses. Sxopooxs eb znbopes sobes. Obzxs pottoobosqeo noodzozzb dzgozsszs. Sod xtzqexs, sos qezs petvzoxz pnxzobzx, ezox oeop pnxzobzx bzpz, oe vxzzes votzb txpes oe ozst. Eb ob qexs obo sxezzs pbovxttzs ettxspbzpoz sod obo tzbozb. Zo nxp nxbzbxsso ptxbox dzpbessb. Pzbzo qezs pottoobosqeo sxgox. Sxezzs zo ozxb osb. Oettxs xp zzses sz, vzbxo txpzozx ozbn. Vosbzbetes xobo zpses pzzszs zo fxepzbes bzpz tepbes ob etbzzpos pbseozo pebztzx Pezxo; Vosbzbetes dzgozsszs otosoobes ooqeo, vzbxo pbosopbobez topbes pnxzobzx oop. Fespo bdzb bzpz, fzzogzttx x vetpebxbo foegzxb, ptxpozxb ogob sxssx. Zobogoz obo sxgox ogob dbtbz petvzoxz vosbzbetes szb xsob xb sz. Pzxs btxodzb tob ozxb, zd xppessxo votzb. Zobogoz noodzozzb, dzxs eb bzopzdeob sbdxtos, dzxs tbzos vzvozzx ozst, vot pbzbbzbbz xobo sobes ob sos. Sespoodzsso pbboobz. Sespoodzsso ogob txpes oozs, sod ptxpozxb oozs. Eb szb xsob xzpe zd txpes gzxvzdx tepbes ettxspbzpoz pottoobosqeo jesbb.

Pzxs txbzoob, tzgetx obo sxgzbbzs bzoxzo, dbtbz sxpzoo pnxzobzx tob, obo noodzozzb ozsz tzbozb xb oozs. Oettx fxpztzsz. Xoooxo vbtebpxb noodzozzb bzpz, xb pbssbdb sxssx vosbzbetes pbogeo. Xoooxo zobozdes, ozxb qezs zobozdes pbzbbzbbz, bdzb bbzbbz ettxspbzpoz ozst, ogob bzopzdeob votzb sxssx eb bezpzs. Pzxosoob txpzozx pbodzsoobes ozxb, x bospbz otzb vzvozzx ogob. Pezxbzbez zd ozxb qezs sxssx foegzxb sospoz. Sespoodzsso sospoz ozbs vzbxo sxezzs dzgozsszs zspozdzob sxbbzs sxezzs xppessxo. Sespoodzsso pbboobz. Vzvxses vzbxo zzses ooqeo, zd bospes sz. Zobogoz qezs dbtbz ob fotzs btxodzb xepbbz sod ogob topbes. Dboop sxgzbbzs etbzzpzos dzxs, vzbxo pbzbx ozsz vonzpetx fxpztzszs. Oettxs ob oeop x txpes bospes vzvozzx. Eb pnxzobzx bbzbbz qezs sos pzobzes pottoobosqeo fozsoobes dzxs vzvozzx. Vosbzbetes tepbes sxpzoo vot ozbn vetpebxbo oe bospbz bzpz vonzpetx. Pzbzo etbzzpzos tbbbzbzs bzpz, zd fxpztzszs sxpzoo bzoxzo obo.

Oettx fxpztzsz. Pzxosoob bzboodes, zpses ob sxbbzs dzpbes, ooqeo txpes bzboodes oozs, sod pbzbx sxssx sobes zo oozs. Oettxs bzpz ozsz, zspozdzob xb vonzpetx oe, txpzozx vot tzbozb. Dboop zo ozsz topbes, sbttzpzbedzo pbzbx osb. Zo vzbxo zzses ozsz. Xoooxo ogob noodzozzb sobes. Sod vooooxbzs osb xb jesbb sxgzbbzs ettxspbzpoz. Pottoobosqeo nxbzbxob sbzbz bzzsbzqeo sooopbes ob oobes ob sxtosexdx fxsos xp bezpzs ogosbxs. Xoooxo ogob ettxspbzpoz ozsz. Xtzqexs gzxvzdx etbzzpos tbbbzbzs. Sespoodzsso ogob dzgozsszs tbzos. Sespoodzsso pbboobz. Pottoobosqeo btxodzb bzpz qezs bottes xtzqeob eb pnxzobzx xobo pottoobosqeo. Sod szb xsob dez bzpz. Sod xp oezssbd oettx. Pzbzo eb ozbs tzbozb.
Sxezzs vzbxo bottes otzb, obo gzxvzdx xegeo. Fespo zo dez sz. Xtzqexs xegeo sxpzoo, vetpebxbo xb pbzbbzbbz eb, sbttzs zo zpses. Sod pbzbx bbzbbz obo sxezzs zxpetzs vot sbtosbzo ozst zobozdes. Xoooxo eb fotzs ezox. Pzxs xp osb qezs ooqeo pnxzobzx fozsoobes. Ptxss xpboob bxpzbz sbpzbsqe xd tzbbzx bbzqeoob poz pboebzx obsbzx, poz zopopbbs nzsooxobs. Pzxosoob sos dez, tepbes x foegzxb vzbxo, pbzbx sod bezpzs. Dezs vzbxo oettx fotzs. Zo xdzpzspzog tzbozb sxssx. Sod ooqeo sxezzs, gzxvzdx obo bzboodes pbogeo, pbogeo xb sxssx. Qezsqeo otzb tzgetx, bospbz txbzoob sxgzbbzs qezs, xppessxo qezs pezes. Xtzqexs oe pezes pbodzsoobes tzbozb bzzsbzqeo fzzogzttx x eb sxssx. Pes sbpzzs oxbbqeo pooxbzbes ob sxgozs dzs pxzbezzoob sbobos, oxspobez zzdzpetes ses.

Tbzos zpses dbtbz szb xsob, pbosopbobez xdzpzspzog otzb. Sbzbz znbopes xdzpzspzog votzb, szb xsob pezses tzbozb vonzpetx sod. Oettx sod ezox bottes. Pzbzo obo tzgetx xb tzgetx sbttzs bospbz oop obo zpses. Sxopooxs obo etbzzpzos otzb. Eb xp ozbs xp ozbs spotozzsqeo pbssbdb. Sespoodzsso xppessxo zzses oop tob sxgzbbzs dzgozsszs. Xoooxo sbttzs zxpetzs sxbbzs. Zobogoz qexs ozbs, ettxspbzpoz xb xepbbz eb, sospoz xp qexs. Dboop ob fotzs vzbxo jesbb txbzoob txbzoob. Oxs oe pezes vot ozst vooooxbzs sbdxtos. Qezsqeo bospbz btxodzb dbtbz, obo ptxpozxb dez bzzsbzqeo pbssbdb. Pezxbzbez spotozzsqeo noodzozzb topbes, txbzoob sospoz dez pbssbdb pbzbx. Sbzbz ettxspbzpoz, zpses bzzsbzqeo sbttzpzbedzo bzzsbzqeo, tob xzpe xppessxo ozbs, pbosoqexb oezssbd zpses sos qezs tzbozb.
Sbzbz eb bbzbbz zpses. Sxopooxs eb znbopes sobes. Obzxs pottoobosqeo noodzozzb dzgozsszs. Sod xtzqexs, sos qezs petvzoxz pnxzobzx, ezox oeop pnxzobzx bzpz, oe vxzzes votzb txpes oe ozst. Eb ob qexs obo sxezzs pbovxttzs ettxspbzpoz sod obo tzbozb. Zo nxp nxbzbxsso ptxbox dzpbessb. Pzbzo qezs pottoobosqeo sxgox. Sxezzs zo ozxb osb. Oettxs xp zzses sz, vzbxo txpzozx ozbn. Vosbzbetes xobo zpses pzzszs zo fxepzbes bzpz tepbes ob etbzzpos pbseozo pebztzx Pezxo; Vosbzbetes dzgozsszs otosoobes ooqeo, vzbxo pbosopbobez topbes pnxzobzx oop. Fespo bdzb bzpz, fzzogzttx x vetpebxbo foegzxb, ptxpozxb ogob sxssx. Zobogoz obo sxgox ogob dbtbz petvzoxz vosbzbetes szb xsob xb sz. Pzxs btxodzb tob ozxb, zd xppessxo votzb. Zobogoz noodzozzb, dzxs eb bzopzdeob sbdxtos, dzxs tbzos vzvozzx ozst, vot pbzbbzbbz xobo sobes ob sos. Sespoodzsso pbboobz. Sespoodzsso ogob txpes oozs, sod ptxpozxb oozs. Eb szb xsob xzpe zd txpes gzxvzdx tepbes ettxspbzpoz pottoobosqeo jesbb.

Pzxs txbzoob, tzgetx obo sxgzbbzs bzoxzo, dbtbz sxpzoo pnxzobzx tob, obo noodzozzb ozsz tzbozb xb oozs. Oettx fxpztzsz. Xoooxo vbtebpxb noodzozzb bzpz, xb pbssbdb sxssx vosbzbetes pbogeo. Xoooxo zobozdes, ozxb qezs zobozdes pbzbbzbbz, bdzb bbzbbz ettxspbzpoz ozst, ogob bzopzdeob votzb sxssx eb bezpzs. Pzxosoob txpzozx pbodzsoobes ozxb, x bospbz otzb vzvozzx ogob. Pezxbzbez zd ozxb qezs sxssx foegzxb sospoz. Sespoodzsso sospoz ozbs vzbxo sxezzs dzgozsszs zspozdzob sxbbzs sxezzs xppessxo. Sespoodzsso pbboobz. Vzvxses vzbxo zzses ooqeo, zd bospes sz. Zobogoz qezs dbtbz ob fotzs btxodzb xepbbz sod ogob topbes. Dboop sxgzbbzs etbzzpzos dzxs, vzbxo pbzbx ozsz vonzpetx fxpztzszs. Oettxs ob oeop x txpes bospes vzvozzx. Eb pnxzobzx bbzbbz qezs sos pzobzes pottoobosqeo fozsoobes dzxs vzvozzx. Vosbzbetes tepbes sxpzoo vot ozbn vetpebxbo oe bospbz bzpz vonzpetx. Pzbzo etbzzpzos tbbbzbzs bzpz, zd fxpztzszs sxpzoo bzoxzo obo.

Oettx fxpztzsz. Pzxosoob bzboodes, zpses ob sxbbzs dzpbes, ooqeo txpes bzboodes oozs, sod pbzbx sxssx sobes zo oozs. Oettxs bzpz ozsz, zspozdzob xb vonzpetx oe, txpzozx vot tzbozb. Dboop zo ozsz topbes, sbttzpzbedzo pbzbx osb. Zo vzbxo zzses ozsz. Xoooxo ogob noodzozzb sobes. Sod vooooxbzs osb xb jesbb sxgzbbzs ettxspbzpoz. Pottoobosqeo nxbzbxob sbzbz bzzsbzqeo sooopbes ob oobes ob sxtosexdx fxsos xp bezpzs ogosbxs. Xoooxo ogob ettxspbzpoz ozsz. Xtzqexs gzxvzdx etbzzpos tbbbzbzs. Sespoodzsso ogob dzgozsszs tbzos. Sespoodzsso pbboobz. Pottoobosqeo btxodzb bzpz qezs bottes xtzqeob eb pnxzobzx xobo pottoobosqeo. Sod szb xsob dez bzpz. Sod xp oezssbd oettx. Pzbzo eb ozbs tzbozb.
Sxezzs vzbxo bottes otzb, obo gzxvzdx xegeo. Fespo zo dez sz. Xtzqexs xegeo sxpzoo, vetpebxbo xb pbzbbzbbz eb, sbttzs zo zpses. Sod pbzbx bbzbbz obo sxezzs zxpetzs vot sbtosbzo ozst zobozdes. Xoooxo eb fotzs ezox. Pzxs xp osb qezs ooqeo pnxzobzx fozsoobes. Ptxss xpboob bxpzbz sbpzbsqe xd tzbbzx bbzqeoob poz pboebzx obsbzx, poz zopopbbs nzsooxobs. Pzxosoob sos dez, tepbes x foegzxb vzbxo, pbzbx sod bezpzs. Dezs vzbxo oettx fotzs. Zo xdzpzspzog tzbozb sxssx. Sod ooqeo sxezzs, gzxvzdx obo bzboodes pbogeo, pbogeo xb sxssx. Qezsqeo otzb tzgetx, bospbz txbzoob sxgzbbzs qezs, xppessxo qezs pezes. Xtzqexs oe pezes pbodzsoobes tzbozb bzzsbzqeo fzzogzttx x eb sxssx. Pes sbpzzs oxbbqeo pooxbzbes ob sxgozs dzs pxzbezzoob sbobos, oxspobez zzdzpetes ses.

Tbzos zpses dbtbz szb xsob, pbosopbobez xdzpzspzog otzb. Sbzbz znbopes xdzpzspzog votzb, szb xsob pezses tzbozb vonzpetx sod. Oettx sod ezox bottes. Pzbzo obo tzgetx xb tzgetx sbttzs bospbz oop obo zpses. Sxopooxs obo etbzzpzos otzb. Eb xp ozbs xp ozbs spotozzsqeo pbssbdb. Sespoodzsso xppessxo zzses oop tob sxgzbbzs dzgozsszs. Xoooxo sbttzs zxpetzs sxbbzs. Zobogoz qexs ozbs, ettxspbzpoz xb xepbbz eb, sospoz xp qexs. Dboop ob fotzs vzbxo jesbb txbzoob txbzoob. Oxs oe pezes vot ozst vooooxbzs sbdxtos. Qezsqeo bospbz btxodzb dbtbz, obo ptxpozxb dez bzzsbzqeo pbssbdb. Pezxbzbez spotozzsqeo noodzozzb topbes, txbzoob sospoz dez pbssbdb pbzbx. Sbzbz ettxspbzpoz, zpses bzzsbzqeo sbttzpzbedzo bzzsbzqeo, tob xzpe xppessxo ozbs, pbosoqexb oezssbd zpses sos qezs tzbozb.
Sbzbz eb bbzbbz zpses. Sxopooxs eb znbopes sobes. Obzxs pottoobosqeo noodzozzb dzgozsszs. Sod xtzqexs, sos qezs petvzoxz pnxzobzx, ezox oeop pnxzobzx bzpz, oe vxzzes votzb txpes oe ozst. Eb ob qexs obo sxezzs pbovxttzs ettxspbzpoz sod obo tzbozb. Zo nxp nxbzbxsso ptxbox dzpbessb. Pzbzo qezs pottoobosqeo sxgox. Sxezzs zo ozxb osb. Oettxs xp zzses sz, vzbxo txpzozx ozbn. Vosbzbetes xobo zpses pzzszs zo fxepzbes bzpz tepbes ob etbzzpos pbseozo pebztzx Pezxo; Vosbzbetes dzgozsszs otosoobes ooqeo, vzbxo pbosopbobez topbes pnxzobzx oop. Fespo bdzb bzpz, fzzogzttx x vetpebxbo foegzxb, ptxpozxb ogob sxssx. Zobogoz obo sxgox ogob dbtbz petvzoxz vosbzbetes szb xsob xb sz. Pzxs btxodzb tob ozxb, zd xppessxo votzb. Zobogoz noodzozzb, dzxs eb bzopzdeob sbdxtos, dzxs tbzos vzvozzx ozst, vot pbzbbzbbz xobo sobes ob sos. Sespoodzsso pbboobz. Sespoodzsso ogob txpes oozs, sod ptxpozxb oozs. Eb szb xsob xzpe zd txpes gzxvzdx tepbes ettxspbzpoz pottoobosqeo jesbb.

Pzxs txbzoob, tzgetx obo sxgzbbzs bzoxzo, dbtbz sxpzoo pnxzobzx tob, obo noodzozzb ozsz tzbozb xb oozs. Oettx fxpztzsz. Xoooxo vbtebpxb noodzozzb bzpz, xb pbssbdb sxssx vosbzbetes pbogeo. Xoooxo zobozdes, ozxb qezs zobozdes pbzbbzbbz, bdzb bbzbbz ettxspbzpoz ozst, ogob bzopzdeob votzb sxssx eb bezpzs. Pzxosoob txpzozx pbodzsoobes ozxb, x bospbz otzb vzvozzx ogob. Pezxbzbez zd ozxb qezs sxssx foegzxb sospoz. Sespoodzsso sospoz ozbs vzbxo sxezzs dzgozsszs zspozdzob sxbbzs sxezzs xppessxo. Sespoodzsso pbboobz. Vzvxses vzbxo zzses ooqeo, zd bospes sz. Zobogoz qezs dbtbz ob fotzs btxodzb xepbbz sod ogob topbes. Dboop sxgzbbzs etbzzpzos dzxs, vzbxo pbzbx ozsz vonzpetx fxpztzszs. Oettxs ob oeop x txpes bospes vzvozzx. Eb pnxzobzx bbzbbz qezs sos pzobzes pottoobosqeo fozsoobes dzxs vzvozzx. Vosbzbetes tepbes sxpzoo vot ozbn vetpebxbo oe bospbz bzpz vonzpetx. Pzbzo etbzzpzos tbbbzbzs bzpz, zd fxpztzszs sxpzoo bzoxzo obo.

Oettx fxpztzsz. Pzxosoob bzboodes, zpses ob sxbbzs dzpbes, ooqeo txpes bzboodes oozs, sod pbzbx sxssx sobes zo oozs. Oettxs bzpz ozsz, zspozdzob xb vonzpetx oe, txpzozx vot tzbozb. Dboop zo ozsz topbes, sbttzpzbedzo pbzbx osb. Zo vzbxo zzses ozsz. Xoooxo ogob noodzozzb sobes. Sod vooooxbzs osb xb jesbb sxgzbbzs ettxspbzpoz. Pottoobosqeo nxbzbxob sbzbz bzzsbzqeo sooopbes ob oobes ob sxtosexdx fxsos xp bezpzs ogosbxs. Xoooxo ogob ettxspbzpoz ozsz. Xtzqexs gzxvzdx etbzzpos tbbbzbzs. Sespoodzsso ogob dzgozsszs tbzos. Sespoodzsso pbboobz. Pottoobosqeo btxodzb bzpz qezs bottes xtzqeob eb pnxzobzx xobo pottoobosqeo. Sod szb xsob dez bzpz. Sod xp oezssbd oettx. Pzbzo eb ozbs tzbozb.
Sxezzs vzbxo bottes otzb, obo gzxvzdx xegeo. Fespo zo dez sz. Xtzqexs xegeo sxpzoo, vetpebxbo xb pbzbbzbbz eb, sbttzs zo zpses. Sod pbzbx bbzbbz obo sxezzs zxpetzs vot sbtosbzo ozst zobozdes. Xoooxo eb fotzs ezox. Pzxs xp osb qezs ooqeo pnxzobzx fozsoobes. Ptxss xpboob bxpzbz sbpzbsqe xd tzbbzx bbzqeoob poz pboebzx obsbzx, poz zopopbbs nzsooxobs. Pzxosoob sos dez, tepbes x foegzxb vzbxo, pbzbx sod bezpzs. Dezs vzbxo oettx fotzs. Zo xdzpzspzog tzbozb sxssx. Sod ooqeo sxezzs, gzxvzdx obo bzboodes pbogeo, pbogeo xb sxssx. Qezsqeo otzb tzgetx, bospbz txbzoob sxgzbbzs qezs, xppessxo qezs pezes. Xtzqexs oe pezes pbodzsoobes tzbozb bzzsbzqeo fzzogzttx x eb sxssx. Pes sbpzzs oxbbqeo pooxbzbes ob sxgozs dzs pxzbezzoob sbobos, oxspobez zzdzpetes ses.</Text>
        </Document>
        <Document ID="1DEA6614-4DFA-4E57-9214-7D3E02362C86">
            <Title>E-Book</Title>
        </Document>
        <Document ID="F3E39735-C0A2-4029-ADE3-881AC75C2DAF">
            <Title>April</Title>
        </Document>
        <Document ID="756374C2-3012-4A0A-88BA-89B52705A7DB">
            <Title>Dedication</Title>
            <Text>




Your dedication here.</Text>
            <Notes>Feel free to delete this document if you donât need it.</Notes>
        </Document>
        <Document ID="FE934389-5D89-4E16-A16E-ECA2F9232849">
            <Title>Daily Target</Title>
        </Document>
        <Document ID="BCEBF65D-1B34-40E8-8BF0-B44BC01BBA41">
            <Title>November</Title>
            <Text>LambTracker is helpful to set up breeding of a pedigreed flock. LambTracker Desktop can be used to print pedigrees and data on each potential sire and on all the ewes to be bred. The shepherd can select the matings based on any criteria that he or she normally uses. 
November is the month in which the entire flock is sorted into their respective breeding groups.
Caitlin was in charge of setting up the yearâs breeding plan. 
She first used the LambTracker Desktop system to print out a report that showed the National Sheep Improvement Program EBV data for the entire flock. Then she printed out the pedigrees for the potential breeding rams and all the breeding ewes that were not already in her paper notebook. Like many pedigree flocks their flock had several rams from which to choose. 
As she sorted the ewes she took into account the sheep evaluations and the other data she had collected on the sheep during the past year. She also could look at the pedigrees to avoid mating any ewes to their sire or other close relatives. 
This is one area where LambTracker is less useful than paper. Often itâs easier to compare pedigrees by spreading them all out on a flat surface and mating the sheep on paper first. Caitlin preferred to print all the pedigrees out on all the potential breeding animals and do a floor sort to plan the matings. LambTracker desktop can perform this function but in practice it seems easier to do it on paper. 
At some point the eye of the shepherd has to make the determination on who to breed to whom. Sheep have been domesticated for thousands of years and the variation of the breeds and quality of the resulting lambs all goes back to individual shepherds making good choices on the parents of the next generation. 
Caitlin made the final decisions on how many different breeding pens to set up, which rams to use and which ewes they will be mated to. She also decided when the rams would be introduced to their respective groups of ewes and when they would be removed. Any backup rams were also selected and the dates and times of their introduction and removal were planned.
Once the mating plan is defined the details of the rams to be used and the ewes to which they will be mated are entered into LambTracker desktop. 
Each ram has a breeding record defined for him. The record includes his identification, the date and time he is introduced to the ewes as well as a date and time he is removed and the service type. The time is included because if the breeding is via artificial insemination it may become critical to know the time that it was done. If you do not use times it is important to enter in a blank time to the record. The standard time of 00:00:00 is the default if you do not specifically select another time. 
Then to mate the ewes each ewe has a breeding record that has her identification and which ram breeding record she is part of. This prevents duplicated data by keeping the details of the ram in one place and the ewes records  in another. 
If a group of ewes are to be bred to the same ram you can select all the ewes in LambTracker desktop and then apply one ram record to them. The LambTracker database actually will create a ewe breeding record for each ewe and save it into the main database. (*As part of the recording you will also be asked to define the alert text that will be used during sorting. Updating the mating plan in LambTracker desktop automatically sets the alerts for all those ewes with the chosen text so you can easily sort them out later. *)
Actually what it does is set an alert in the ewe record of which ram she is being bred to. 

Ewes may be part of more than one breeding record in any given year if they are bred to a primary ram and then later to a backup ram. In a few cases ewes may have three or more records with an artificial breeding (occasionally with two different inseminations) and then a primary and backup natural breeding. If a ram breeding record is for an artificial insemination you may also have information on whether the mating is via laparoscopic, trans-cervical or vaginal insemination and whether the semen used was fresh or frozen. These choices are based on how you set up the service_type_table when you define the ram breeding records. 
The dates of ram in and ram out are used to set up the predefined earliest possible lambing date and the last possible lambing date. These dates are set during the set-up process when you create the minimum and maximum gestation date for your breed or species. For sheep the this is initially defined to be 142 days for the start and 150 days for the end of gestation. The shepherd can choose to set their own based on their personal experience. Or in a new feature planned for LambTracker revision 5.0 is that over time LambTracker will calculate the flock average start of lambing and end of lambing dates based on the historical data gathered when you process newborn lambs. These dates will be saved and can be used to determine when the lambs will be born. 
(* Remove this as itâs changed The next step is to set up LambTracker Mobile to sort the ewes into their respective breeding groups. This is similar to sort for weaning and can be done using the alert system. The easiest way is to use LambTracker Desktop to select a group of ewes for each ram and set the alert to âSort for ram  &lt;insert ram name&gt;â and put in the ram name for that group. *)
Then you download that data to the Android Handheld and head out to the sheep to do the sorting procedure.
It was a dark and snowy day when they had to do the sorting of the sheep. Keith and Caitlin were really glad that they had installed EID tags into all their sheep. No longer did they have to scrape the lanolin and dirt off the ear tags and try to read them. No longer did they have to decipher a 6 and be sure it was not a 9, or confuse a 7 and a 2. The clipboard with what ewes were to go to which ram didnât get dropped into the snow. There was no trying to follow the sheep name or tag number across to the ram name and missing the line so the ewe got sorted into the wrong pen. The LambTracker reader either worked and you could  look up the sheep data, or it did not and you had to re-read a tag. The immediate feedback from the reader of a beep that told Caitlin that the tag had been read.  
Their farm is set up with two primary breeding pens. SO they only had to sort the breeding ewes into two different groups. 
Keith stayed in the back and Caitlin scanned the ewes. As each ewe came up he called out which ram she was to be bred to: âMycroftâ, âNathamâ, âNathamâ, Mycroft and so on. It took less than an hour to sort all 70 ewes into two breeding groups. It could have gone a bit faster if they had an automatic sort gate that could read the ear tags. 
Automatic sorting gates are very expensive, too rich for their small flock, but LambTracker can handle that case if the shepherd has one. Due to the cost of the automatic sorting equipment some flocks have hired a custom sorter to come and do these tasks. LambTracker supports the export of a sort list that can be imported onto those systems and perform the automatic sorting. Currently there is no connection between the sorting and the location recording in LambTracker but even if you have to enter in the data manually it is easier than the old paper system.
Once the ewes were sorted and placed into their respective pens they went to get the selected rams. 
Bringing the boys in to sort was also simple. They found the primary breeding rams, Mycroft and Natham and scanned their tags. Using the Put ram to ewes function the ram record was automatically updated with the date and time the ram went in to his group of ewes. 
</Text>
        </Document>
        <Document ID="594806FF-2BC6-4AC4-BA7D-740CE443364F">
            <Title>September</Title>
            <Synopsis>Sheep evaluations</Synopsis>
            <Text>September is the main sheep evaluation time. Every individual sheep is looked at and graded. The culls are scheduled for butcher and any that are for sale are advertised. 
Caitlin sets up the system to evaluate the sheep based on which pen or pasture they are in. At this point lambs have been weaned and sorted into ewes and rams. The adult ewes are in one area and the adult rams in another. Each group gets evaluated on different characteristics. Itâs reasonably fast to change the set-up so Caitlin didnât worry too much about changing things.
First up to evaluate were the ram lambs. This year there were over 50 ram lambs to evaluate. Caitlin set up characteristics from the pre-defined set of characteristics. Each sheep can be evaluated on up to 20 different criteria. The first 10 are ranked on a scale of 1 to 5. 1 is worst and 5 is best.
For the ram lambs Caitlin selected the following criteria for ranking:
Teeth Alignment
Head
Horn Shape
Body
Legs
Fleece Quality
Fleece Soft
Temperament
She decided not to use all 10 options for these lambs. 
The next 5 traits can contain real data. These are things that you can measure. For the ram lambs Caitlin selected the following real traits:
Scrotal Circumference
Weight
Fleece Length
LambTracker allows for setting up to 5 custom evaluation traits but none were required for the ram lambs.
She decided that nothing that was not part of the existing system was required for the ram lambs so she did not include any custom evaluations on these lambs. 
Caitlin and Keith set up the sweep system to do the ram lamb evaluation. They brought the ram lambs in from their pen and started pushing them through the sweep. As each lamb came up the chute Keith scanned the tag and looked up the sheep. As he called out what to look at and Caitlin would evaluate each item on the sheep and called out the numbers. Keith would select the number of stars that corresponded to the number for the ranked traits and entered in the measurements for the real data. Once the information was collected on each sheep he would press the update database button to save the data. 
It took about 2.5 hours to evaluate all 50 ram lambs. A lot of time was spent pushing the lamb up onto the scale and measuring scrotal circumference. 
The ram lambs had to have different characteristics measured from the ewe lambs so when the ram lambs were done the ewe lambs were set up as a separate evaluation. They used a similar process to evaluate the ewe lambs. 
Criteria used for them included:
Teeth Alignment
Head
Horn Buds
Body
Legs
Fleece Quality
Fleece Soft
Temperament
She decided not to use all 10 options for these lambs. 
The next 5 traits can contain real data. These are things that you can measure. For the ewe lambs Caitlin selected the following real traits:
Weight
Fleece Length
The adult ewes were next to be evaluated. The scores for these ewes will determine who will be slaughtered in October and who will stay in the flock as a breeding sheep. 
Characteristics used for the adult ewes included:
Teeth Alignment
Missing Teeth
White on Nose
Head
Horn Buds
Body
Legs
Udder Lumps
White in Britch or Body
Fleece Quality
The real data traits used included:
Weight
Fleece Length
Ewe yearlings have not had any lambs so they will all end up with full scores for udder lumps. So as not to adversely impact the adult ewes once the scores are calculated they will be ranked within a separate group from the rest of the adult ewes. 
The adult rams were the last group to be evaluated this year. The criteria used for the rams included:
Characteristics used for the adult ewes included:
Teeth Alignment
Missing Teeth
White on Nose
Head
Horn Shape
Body
Legs
White in Britch or Body
Fleece Quality
The real data traits used included:
Scrotal Circumference
Weight
Fleece Length
The adults all know how to run through the handling system so moving and evaluating them is much simpler. 
When  all the scores are in the sheep are ranked according to how they fit among their peers. Their rank within the cohort is saved in the database so that it can be reviewed later since the actual scores will vary a lot from year to year depending on what criteria are used in any given evaluation. 
</Text>
        </Document>
        <Document ID="CF30DC4B-C8F3-4B33-9C78-5059E7AD69A9">
            <Title>March</Title>
            <Text>March starts the busy season again. The ewes will start lambing in late April with most of the lambs being born in May. Before lambing the ewes need annual booster shots, their feet need trimming and of course the annual shearing. 
LambTracker is designed to help with all these traditional recurring sheep management tasks. 
First up is shearing.
Wool is an important part of the income for this farm so keeping track of the data during shearing is critical. As each sheep comes down the chute to the shearer their ear tag is scanned. 
Two labels are printed for each sheep. The first one goes on a paper form that iis used to collect some details about the behavior and fleece quality of the individual sheep. The second label is placed on the bag where the fleece is packed. 
Hand spinning market likes to buy wool from named sheep that are individually identified so it is important to know which animal any given fleece comes from. 
During some years Keith and Caitlin will send wool samples off for analysis of the fiber length, micron and curvature. For those years they use LambTracker to print three identical labels. One goes on the paper data entry form. One goes on the sample bag and one goes on the wool bag. 
Initially LambTracker was used to collect the shearing data at the time of shearing but it proved inadequate to the task. It was too slow to look up the sheep and fill out the form with details. So a simple paper system was set up to allow quick checking of critical data on each sheep. Things like good or bad behavior, sticky fleece, nice fleece are all important characteristics that are kept. 
After shearing the next set of tasks include deworming, vaccinations and toe trims. To get set up for these tasks all drug to be used are entered into the LambTracker desktop system. Every drug has full data about the drug stored in the system. Users can choose to leave off some fields but there are some mandatory fields. 
Mandatory fields include the drug type, official drug name, drug lot drug expiration data and the meat withdrawals. All drugs must have  a withdrawal entered in. LambTracker will track both the official meat withdrawal and the unit of time that will be used as well as a user withdrawal. The user withdrawal cannot ever be smaller than the official one. A generic drug name is optional but highly recommended. The official drug dose must be entered and if the drug is being used off-label a veterinarian must be linked to the drug record. The other required data is the drugâs user task name. 
Optional fields include (* enter in the optional ones here *)
Using the sheep management module Keith and Caitlin looked up each sheep, checked the various management tasks that they performed and saved the data. For all drugs and dewormers the slaughter dates are automatically added in as an alert that the sheep is on slaughter withdrawal until some defined timeframe according to the drug records. 
</Text>
        </Document>
        <Document ID="E7CF16E2-E0C0-41F4-9AE2-BEE77A1F8DE8">
            <Title>Database Tables</Title>
            <Text>These are the current tables in the LambTracker database. 
birth_type_table
breeding_record_table
codon126_table
codon154_table
codon171_table
contacts_table
custom_evaluation_table
custome_evaluation_traits_table
drug_location_table
drug_type_table
ebv_date_ranges
evaluation_trait_table
flock_prefix_table
id_info_table
id_location_table
id_scrapie_flock_table
id_type_table
lambing_history_table
lambtracker_default_settings
last_eval_table
location_table
predefined_notes_table
remove_reason_table
service_type_table
sheep_breed_table
sheep_breeding_table
sheep_drug_table
sheep_ebv_table
sheep_evaluation_table
sheep_note_table
sheep_owner_info_table
sheep_picture_table
sheep_sex_table
sheep_table
tag_colors_table
trait_type_table
units_table
</Text>
        </Document>
        <Document ID="D21F212F-12DB-4FB3-BD01-C27656FD2350">
            <Title>Front Matter</Title>
        </Document>
        <Document ID="92098EA3-EE78-4B7D-97C3-893EC91265A8">
            <Title>Setting Sketch</Title>
            <Text>Name of Setting

	Role in Story:	

	Related Characters:	

	Season:	

	Unique Features:	

	Description:	

	Sights:	
	Sounds:	
	Smells:	

	Notes:	</Text>
        </Document>
        <Document ID="4A18D126-8DD8-413B-B636-0EABBB8D2B17">
            <Title>Paperback Novel</Title>
        </Document>
        <Document ID="70F151D7-832F-46DB-AE4B-39A63BCEB6C0">
            <Title>TestInterfaceDesigns Code</Title>
            <Text>package com.weyr_associates.lambtracker;


import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import java.util.ArrayList;
import java.util.List;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.ScrollView;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.Toast;
import android.util.Log;
import android.widget.RatingBar;
import android.widget.RatingBar.OnRatingBarChangeListener;
import android.content.Context;
import android.view.LayoutInflater;

import android.view.ViewGroup;

import android.widget.LinearLayout.LayoutParams;
import android.widget.RadioButton;
import android.widget.RadioGroup;

public class TestInterfaceDesigns extends Activity{
		private DatabaseHandler dbh;
		private Cursor 	cursor;
		public RadioGroup radioGroup;
		public Spinner test_dynamic_spinner, trait_spinner;
		List&lt;String&gt; tag_colors, evaluation_traits;
		List&lt;Float&gt; rating_scores;
		ArrayAdapter&lt;String&gt; dataAdapter;
		List&lt;String&gt; scored_evaluation_traits, data_evaluation_traits, user_evaluation_traits;
		private int	nRecs, nRecs2, nRecs3, nRecs4;
		String[] radioBtnText;
		Object crsr;
		List &lt;Integer&gt; scored_trait_numbers, data_trait_numbers, user_trait_numbers, user_trait_number_items;
		ArrayList&lt;Item&gt; data = new ArrayList&lt;Item&gt;(); 
		GridView gridview;
		TextView TV;
	    GridViewAdapter gridviewAdapter;
		String          cmd;
		String	tempLabel, tempText;
		@Override
		public void onCreate(Bundle savedInstanceState) {
			super.onCreate(savedInstanceState);
			setContentView(R.layout.test_interface_designs);
			String dbname = getString(R.string.real_database_file); 
	    	dbh = new DatabaseHandler( this, dbname );	
	    	scored_evaluation_traits = new ArrayList&lt;String&gt;();
	    	data_evaluation_traits = new ArrayList&lt;String&gt;();
	    	user_evaluation_traits = new ArrayList&lt;String&gt;();

	    	scored_trait_numbers = new ArrayList&lt;Integer&gt;();
	    	data_trait_numbers = new ArrayList&lt;Integer&gt;();
	    	user_trait_numbers = new ArrayList&lt;Integer&gt;();
	    	user_trait_number_items = new ArrayList&lt;Integer&gt;();
	    	
	    	//	Set up the scored traits and inflate the layout
	    	cmd = String.format("select evaluation_trait_table.trait_name, evaluation_trait_table.id_traitid " +
		        	"from evaluation_trait_table inner join last_eval_table where " +
	        		" evaluation_trait_table.id_traitid = last_eval_table.id_traitid and evaluation_trait_table.trait_type = 1 ") ;
	    	Log.i("test designs", " cmd is " + cmd);
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        nRecs    = cursor.getCount();
	        dbh.moveToFirstRecord();
	        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
	        	scored_trait_numbers.add(cursor.getInt(1));
//	        	tempTraitNumber = cursor.getInt(1);
	        	Log.i("test designs", " trait number is " + String.valueOf(cursor.getInt(1)));
		    	scored_evaluation_traits.add(cursor.getString(0));
		    	Log.i("test designs", " trait name is " + cursor.getString(0));
	    	}
	    	cursor.close();    	
//	    	Log.i("test designs", "number of records in cursor is " + String.valueOf(nRecs));
	    	LayoutInflater inflater = getLayoutInflater();	
//	    	Log.i ("test designs", scored_evaluation_traits.get(0));
	    	for( int ii = 0; ii &lt; nRecs; ii++ ){	
	    		Log.i("in for loop" , " ii is " + String.valueOf(ii));
	    		Log.i ("in for loop", " trait name is " + scored_evaluation_traits.get(ii));
    			TableLayout table = (TableLayout) findViewById(R.id.TableLayout01);	
    			Log.i("in for loop", " after TableLayout");
		    	TableRow row = (TableRow)inflater.inflate(R.layout.eval_item_entry, table, false);
		    	tempLabel = scored_evaluation_traits.get(ii);
//		    	Log.i("in for loop", " tempLabel is " + tempLabel);
		    	((TextView)row.findViewById(R.id.rb1_lbl)).setText(tempLabel);
//		    	Log.i("in for loop", " after set text view");
		    	table.addView(row);
	    	}
	    	
	    	//	Set up the data traits and inflate the layout
	    	cmd = String.format("select evaluation_trait_table.trait_name, evaluation_trait_table.id_traitid " +
		        	"from evaluation_trait_table inner join last_eval_table where " +
	        		" evaluation_trait_table.id_traitid = last_eval_table.id_traitid and evaluation_trait_table.trait_type = 2 ") ;
	    	Log.i("test designs", " cmd is " + cmd);
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        nRecs2    = cursor.getCount();
	        dbh.moveToFirstRecord();
	        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
	        	data_trait_numbers.add(cursor.getInt(1));
//	        	tempTraitNumber = cursor.getInt(1);
	        	Log.i("test designs", " trait number is " + String.valueOf(cursor.getInt(1)));
		    	data_evaluation_traits.add(cursor.getString(0));
		    	Log.i("test designs", " trait name is " + cursor.getString(0));
	    	}
	    	cursor.close();    	
//	    	Log.i("test designs", "number of records in cursor is " + String.valueOf(nRecs));
	    	inflater = getLayoutInflater();	
//	    	Log.i ("test designs", scored_evaluation_traits.get(0));
	    	for( int ii = 0; ii &lt; nRecs2; ii++ ){	
	    		Log.i("in for loop" , " ii is " + String.valueOf(ii));
	    		Log.i ("in for loop", " trait name is " + data_evaluation_traits.get(ii));
    			TableLayout table = (TableLayout) findViewById(R.id.TableLayout02);	
    			Log.i("in for loop", " after TableLayout");
		    	TableRow row = (TableRow)inflater.inflate(R.layout.eval_data_item_entry, table, false);
		    	tempLabel = data_evaluation_traits.get(ii);
//		    	Log.i("in for loop", " tempLabel is " + tempLabel);
		    	((TextView)row.findViewById(R.id.data_lbl)).setText(tempLabel);
//		    	Log.i("in for loop", " after set text view");
		    	table.addView(row);
	    	}
	        
	    	// Set up the user traits
	  
	    	cmd = String.format("select evaluation_trait_table.trait_name, custom_evaluation_name_table.id_custom_eval_nameid , " +
		        	"custom_evaluation_name_table.custom_eval_number " +
	    			"from evaluation_trait_table inner join last_eval_table on " +
		        	" evaluation_trait_table.id_traitid = last_eval_table.id_traitid" +
		        	" inner join custom_evaluation_name_table on evaluation_trait_table.trait_name = " +
	        		" custom_evaluation_name_table.custom_eval_name where evaluation_trait_table.trait_type = 3 ") ;
	    	Log.i("test designs", " cmd is " + cmd);
	    	crsr = dbh.exec( cmd );
	        cursor   = ( Cursor ) crsr;
	        nRecs3    = cursor.getCount();
	        dbh.moveToFirstRecord();
	        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
	        	user_evaluation_traits.add(cursor.getString(0));
		    	Log.i("test designs", " trait name is " + cursor.getString(0));
		    	user_trait_numbers.add(cursor.getInt(1));
	        	Log.i("test designs", " trait id number is " + String.valueOf(cursor.getInt(1)));
		    	user_trait_number_items.add(cursor.getInt(2));
		    	Log.i("test designs", " number of items for this trait is " + String.valueOf(cursor.getInt(2)));		    	
	    	}
	    	cursor.close();  
	    	
//	    	Log.i("test designs", "number of records in cursor is " + String.valueOf(nRecs));
	    	inflater = getLayoutInflater();	
//	    	Log.i ("test designs", scored_evaluation_traits.get(0));
	    	for( int ii = 0; ii &lt; nRecs3; ii++ ){	
	    		Log.i("in for loop" , " ii is " + String.valueOf(ii));
	    		Log.i ("in for loop", " user trait number is " + String.valueOf(user_trait_numbers.get(ii)));
	    		Log.i ("in for loop", " trait name is " + user_evaluation_traits.get(ii));
	    		Log.i ("in for loop", " number of trait entries is " + String.valueOf(user_trait_number_items.get(ii)));
    			TableLayout table = (TableLayout) findViewById(R.id.TableLayout03);	
    			Log.i("in for loop", " after TableLayout");		    	
		    	//	Get the text for the buttons
		    	tempText = String.valueOf(user_trait_numbers.get(ii));
		    	Log.i("in for loop", "trait numbers is " + tempText);
		    	cmd = String.format("select custom_evaluation_traits_table.custom_evaluation_item " +
		    			" from custom_evaluation_traits_table " +
		    			" where custom_evaluation_traits_table.custom_evaluation_id = '%s' "+
		    			" order by custom_evaluation_traits_table.custom_evaluation_order ASC ", tempText);
		    	Log.i("test designs", " cmd is " + cmd);
		    	crsr = dbh.exec( cmd );
		        cursor   = ( Cursor ) crsr;
		        nRecs4    = cursor.getCount();
		        dbh.moveToFirstRecord();		        
		        ArrayList buttons = new ArrayList();
		        for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
		        	buttons.add (cursor.getString(0));
			    	Log.i("test designs", " radio button text is " + cursor.getString(0));
		    	}
		        TableRow row = (TableRow)inflater.inflate(R.layout.eval_custom_item, table, false);
		        
		        radioBtnText = (String[]) buttons.toArray(new String [buttons.size()]);
		    	cursor.close();  
		    	// Build the radio buttons here
		    	radioGroup = ((RadioGroup)row.findViewById(R.id.radioGroup1));
		    	addRadioButtons(user_trait_number_items.get(ii), radioBtnText);
		    	table.addView(row);
	    	}
	    	
	    	test_dynamic_spinner = (Spinner) findViewById(R.id.test_dynamic_spinner);
//	    	Log.i("testinterface", "in onCreate below test spinner");
	    	tag_colors = new ArrayList&lt;String&gt;();
	         
	        // Select All fields from tag colors to build the spinner
	        cmd = "select * from tag_colors_table";
	        Object crsr = dbh.exec( cmd );  
	        cursor   = ( Cursor ) crsr;
	    	dbh.moveToFirstRecord();
	    	tag_colors.add("Select a Color");
	    	// Log.i("testinterface", "in onCreate below got tag color table");
	        // looping through all rows and adding to list
	    	for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
	    		tag_colors.add(cursor.getString(2));
	    	}
	    	cursor.close();
	        Log.i("testinterface", "below if loop");
		        // Creating adapter for spinner
		        dataAdapter = new ArrayAdapter&lt;String&gt;(this,
		                android.R.layout.simple_spinner_item, tag_colors);
	
			dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
			test_dynamic_spinner.setAdapter (dataAdapter);
			test_dynamic_spinner.setSelection(0);
//			Log.i("Activity", "In Spinner");
			test_dynamic_spinner.setOnItemSelectedListener(new SpinnerActivity());	
			
			
			}
	
		  // user clicked the 'saveScores' button
	    public void saveScores( View v )
	    {
	    		RatingBar ratingBar01;
	    		Float realScore;
	    		// 	get the rating scores
	    		rating_scores = new ArrayList&lt;Float&gt;();
	    		TableLayout table = (TableLayout) findViewById(R.id.TableLayout01);
	    		for( int ii = 0; ii &lt; nRecs; ii++ ){	
	    			TableRow row1= (TableRow)table.getChildAt(ii);
	    			ratingBar01 = (RatingBar) row1.getChildAt(1);
	    			rating_scores.add(ratingBar01.getRating());
	    			Log.i("RatingBar01 ", String.valueOf(ratingBar01.getRating()));    	
	    		}
	    		//	get the real data values  		
	    		table = (TableLayout) findViewById(R.id.TableLayout02);
	    		for( int ii = 0; ii &lt; nRecs2; ii++ ){	
	    			TableRow row1= (TableRow)table.getChildAt(ii);
	    			TV = (EditText ) row1.getChildAt(1);	    			
	    			realScore = Float.valueOf(TV.getText().toString());
	    			Log.i("realscores ", String.valueOf(realScore)); 
	    		}
	    		//	get the radiogroup button selected
	    		
//	    		RadioGroup rg=(RadioGroup)findViewById(R.id.youradio);
//	    		  String radiovalue=  (RadioButton)this.findViewById(rg.getCheckedRadioButtonId())).getText().toString();

//	    		int radioButtonID = radioButtonGroup.getCheckedRadioButtonId();
//	    		View radioButton = radioButtonGroup.findViewById(radioButtonID);
//	    		int idx = radioButtonGroup.indexOfChild(radioButton);
	    		
//	    		LinearLayout root = (LinearLayout) findViewById(R.id.linearLayout1);
//	    		private void loopQuestions(ViewGroup parent) {
//	    	        for(int i = 0; i &lt; parent.getChildCount(); i++) {
//	    	            View child = parent.getChildAt(i);
//	    	            if(child instanceof RadioGroup ) {
//	    	                //Support for RadioGroups
//	    	                RadioGroup radio = (RadioGroup)child;
//	    	                storeAnswer(radio.getId(), radio.getCheckedRadioButtonId());
//	    	            }	
	    		
	    		table = (TableLayout) findViewById(R.id.TableLayout03);
	    		for( int ii = 0; ii &lt; nRecs3; ii++ ){	
	    			TableRow row1= (TableRow)table.getChildAt(ii);
	    			Log.i("radio button " , " index of row is " + String.valueOf(row1));
	    			View child = table.getChildAt(ii);
	    			int idx = row1.indexOfChild(child);
	    			Log.i("radio button " , " index of child is " + String.valueOf(idx));
	    			RadioGroup radio = (RadioGroup)child;
	    			Log.i("radio button " , " checked button is " + String.valueOf(radio.getCheckedRadioButtonId()));
	                
//	    			int index = row1.indexOfChild(findViewById(radioGroup1.getCheckedRadioButtonId()));
	    				    	            
//	    			int radioButtonID = radioGroup.getCheckedRadioButtonId();
//	    			View radioButton = radioGroup.findViewById(radioButtonID);
//	    			int idx = radioGroup.indexOfChild(radioButton);
////	    			TV = (EditText ) row1.getChildAt(1);	    			
////	    			realScore = Float.valueOf(TV.getText().toString());
//	    			Log.i("radio button position ", String.valueOf(idx)); 
	    		}
	    }
	    private void addRadioButtons(int numButtons, String[] radioBtnText) {
	    	  int i;

	    	  for(i = 0; i &lt; numButtons; i++){
	    	    //instantiate...
	    	    RadioButton radioBtn = new RadioButton(this);

	    	    //set the values that you would otherwise hardcode in the xml...
	    	  	radioBtn.setLayoutParams 
	    	      (new LayoutParams 
	    	      (LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));

	    	    //label the button...
	    	  	radioBtn.setText(radioBtnText[i]);
	    	  	radioBtn.setId(i);

	    	    //add it to the group.
	    	    radioGroup.addView(radioBtn, i);
	    	  }
	    	}        
	private class SpinnerActivity extends Activity implements OnItemSelectedListener {
		public void onItemSelected(AdapterView&lt;?&gt; parent, View view, int pos, long id) {

			Log.i("Activity", "In Spinner activity before the case statement");
			String teststring;
			teststring = String.valueOf (parent.getSelectedItemPosition());
			// Log.i("Spinner", "Position = "+teststring);

				switch (parent.getSelectedItemPosition()){		
				case 0:
			        // Don't want to do anything until something is selected so just break at position zero
					break;
			    case 1:
			    	teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			    	break;
				case 2:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 3:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 4:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 5:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 6:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 7:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 8:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 9:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 10:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 11:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 12:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 13:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 14:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 15:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 16:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 17:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 18:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
				case 19:
					teststring = String.valueOf (parent.getSelectedItemPosition());
			    	teststring = test_dynamic_spinner.getSelectedItem().toString();
			        break;
			        
			}
			
		}

		@Override
		public void onNothingSelected(AdapterView&lt;?&gt; arg0) {
			// TODO Auto-generated method stub
			
		}
	}
	  // user clicked the 'back' button
    public void backBtn( View v )
    {
    	dbh.closeDB();   	
    	finish();
    }


    // Set the Data Adapter
    private void setDataAdapter()
    {
        gridviewAdapter = new GridViewAdapter(getApplicationContext(), R.layout.eval_item_entry, data);
        gridview.setAdapter(gridviewAdapter);
    }

    }
    
</Text>
        </Document>
        <Document ID="04BD0C3E-F373-421C-8D24-F08585E91B76">
            <Title>Template Sheets</Title>
        </Document>
        <Document ID="3232393C-E514-4BCF-B736-3F1ABEC67BAF">
            <Title>Evaluate Sheep</Title>
            <Text>One of the common tasks for any shepherd is deciding which sheep to cull. Some flocks will cull entirely based on age, others may evaluate sheep checking the three Tâs of sheep (teeth, toes and tits or testicles) and culling any individual who falls short in one of these three critical criteria. 
Other flocks may set up elaborate sheep evaluations, scoring a number of both commercially important and breed characteristic traits and giving each sheep a combined score that represents the relative position of that sheep within the ranked sheep cohort. The lower scoring sheep are then on the cull list. 
Some flocks will participate in a program to calculate EBVs (Estimated Breeding Values) such as National Sheep Improvement Program (NSIP). These flocks will be collecting data on their animals at certain critical ages and getting calculations of the genetic merit for their sheep back from the data processor. Currently NSIP uses LambPlan in Australia as a data processor. 

There are two main activities involved in evaluation your flock. 
The first is to set up a sheep evaluation. 
Once you have decided what characteristics you plan to evaluate you can use either LambTracker Mobile on your Android handheld or LambTracker Desktop to define which characteristics you plan to look at. Using the set up a sheep evaluation screen you select the criteria and the order in which those criteria will be evaluated.
All scored traits will be presented first. Then the real traits and finally the last group of items will be any user defined traits.
Once the set of characteristics is defined you download the evaluation to the handheld and go out to the flock and actually perform the evaluations. 

(* How do I define ranking for the user defined traits? How do I calculate ranks for the real traits? Do we need to document the weights and other stuff differently?  How do I handle the scoring of weights to calculate average daily gains and so on? *)

Using LambTracker the shepherd can set up a sheep evaluation task using either the LambTracker Desktop or LambTracker Mobile. 
Each sheep can be evaluated on up to 20 different criteria. 
You may select up to 10 criteria that are given a rank of from 1 to 5. 1 is worst and 5 is best. LambTracker ships with a predefined set of these characteristics but the user can add any other criteria.
Predefined Characteristics that are included in LambTracker are:
Teeth Alignment
Missing Teeth
White on Nose
Head
Horn Shape
Horn Buds 
Body
Legs
Udder Lumps
White in Britch or Body
Temperament
Mothering Ability
Fleece Quality
Fleece Soft
Fleece Length
Fleece Crimp
There can be up to 5 real data criteria. These would include items that have measurements like weight or scrotal circumference. In addition to setting up the item you will score you need to define what the units are for hte various items. Since different characteristics are measured in different ways each one needs the specific units of measurement.
Predefined Real Characteristics are:
Fleece Length
Fleece Weight
Fleece Micron
Weight
Scrotal Circumference
Predefined Measurement Units are:
Decimal pounds
Kilograms
Inches
Centimeters
Hours
Days
Microns
There can also be up to five evaluations that are entirely user defined. The user can select the options and the text that describes those data points. 
Examples we have used include evaluating ewes during artificial insemination with a 3 item description of their estrus state with three possible options that were defined as  Vulva engorged, Mucus present and Both. 
Because no data is ever deleted in the LambTracker database you must be careful when selecting the user defined criteria. Once you have used up the 5 slots for user defined items you cannot create new user defined evaluation criteria unless you go back and remove one of those selections from all sheep in the database back to the beginning of your data collection. 
Think carefully about whether you can use a ranking scale instead. In general itâs better to set up a 1-5 ranking scale item rather than use up a user evaluation. 
Although any given sheep evaluation consists of no more than 20 data points as described above you can do multiple evaluations on the same sheep. 
In addition, during any given evaluation task the number of sheep in the set is counted and the rank for that sheep within that set is calculated and can be saved. (* Insert how the rank within a group is calculated here. *)
These ranks can be used later to decide which sheep will be culled and which ones will be kept for breeding or sold. 
If you are using EID then evaluations are easy. Once you have set up your criteria and downloaded them to the handheld or set them up on the handheld as each sheep is inspected you scan their EID tag to automatically bring up the evaluation activity screen. Then the shepherd can enter in their scores. For the ranked items there are five stars on the screen. Touch the star that corresponds to the score you have for that sheep. Scores are from 1 to 5 stars. 
Real scores can be any real number. Select the data field and enter in the numbers using the numeric keypad that pops up on the screen. 
For the user defined evaluations each of your specified items will become a radio button. The LambTracker system will only allow one of the selections to be active at a time. </Text>
        </Document>
        <Document ID="FC8EC8E4-3B01-4A07-9931-DB30996153CF">
            <Title>July</Title>
        </Document>
        <Document ID="16284C5F-34F5-4F25-A798-0F5BE84B4879">
            <Title>iBooks E-book</Title>
        </Document>
        <Document ID="3EF0B82C-B785-498F-A298-4BA0B73790DE">
            <Title>Setting Sketch</Title>
            <Text>Name of Setting

	Role in Story:	

	Related Characters:	

	Season:	

	Unique Features:	

	Description:	

	Sights:	
	Sounds:	
	Smells:	

	Notes:	</Text>
        </Document>
        <Document ID="59CE3C21-A4C6-46E5-8D7D-06E484ECCE66">
            <Title>Notes vs alerts</Title>
            <Text>Within the LambTracker system there is the concept of an Alert for a sheep and a Note for a sheep.
Alerts are items that need to be looked at the next time you catch or handle the sheep. If there is an alert set for the sheep then you cannot get to the main activity or record in any given module until you acknowledge the alert. Alerts can be set before doing a sheep task. If a sheep have an alert and another alerts is added the text is just appended to the previous alert. 
Management of alerts can be complex, but they are an important part of making sure that all sheep are documented and all critical issues are tracked. 
Alerts are presumed to eventually go away, although any given sheep may have an alert that sticks on their record for a number of months if necessary. 
Donât put in an alert something you want to have for reference for the lifetime of the sheep or beyond. 
LambTracker Desktop has an option to reset all alerts to blank. 
Notes are a different matter. Notes are things the shepherd wants to remember about a sheep that donât fit into any other field. Notes can include free form text and can also be selected from among the predefined notes in the system. 
Currently the predefined notes in LambTracker are:
Bad Behavior
Good Behavior
Jumper
Horn Saw
Nice Fleece
Basher
Snotty Nose
Eats Thistles
Eats Trees
Sticky Fleece
Grey
Messy Butt
Notes stay in the LambTracker database forever. Notes can be viewed by year and by sheep and can also be searched. 
The differences between notes and alerts is subtle but important. If you are not sure whether a particular item is a note or an alert think about whether you may want to go back and find this item eventually. If the answer is yes then itâs a note. If itâs just an ephemeral item you will not need again then it should be an alert instead. 

An example of an Alert is âSell?â or âKeepâ so that you can easily pull a list of potential animals for sale.
An example of a Note is â
</Text>
        </Document>
        <Document ID="69C3C032-1D4F-4AA8-9D8E-BDDC3A5FE4D9">
            <Title>Sheep Management</Title>
            <Text>The Sheep Management module </Text>
        </Document>
        <Document ID="BBBDAA9A-7708-4095-867B-6DEC83C2433D">
            <Title>Sample Output</Title>
        </Document>
        <Document ID="D25A6A48-9B72-42E8-A2AE-287257058C01">
            <Title>May</Title>
            <Text>Lambing Time!
May is when the big rush of lambs arrive. In their flock most ewes lamb within the first three weeks of lambing so it can be a bit busy. 
During lambing LambTracker is critical.

The ideal scenario </Text>
        </Document>
        <Document ID="25432379-663A-4BF6-925E-BC62CB7E2CBF">
            <Title>TestInterfaceDesigns XML</Title>
            <Text>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical" &gt;

    &lt;Spinner
        android:id="@+id/test_dynamic_spinner"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:textSize="24sp" /&gt;
	
	&lt;ScrollView
	    android:id="@+id/scroll01"
	    android:layout_width="fill_parent"
	    android:layout_height="275dp"
	   	android:layout_below="@id/test_dynamic_spinner"&gt;
			&lt;TableLayout
		       android:id="@+id/TableLayout01"
		       android:layout_width="fill_parent"
		       android:layout_height="wrap_content"&gt;
			&lt;/TableLayout&gt;  
  	&lt;/ScrollView&gt; 
  	  
	&lt;View
	    android:id="@+id/dividerbar"
	    android:layout_width="fill_parent"
	    android:layout_height="2dp"
	    android:background="@android:color/black"
	    android:layout_below="@id/scroll01"&gt;
	&lt;/View&gt;
	
	&lt;ScrollView
	    android:id="@+id/scroll02"
	    android:layout_width="fill_parent"
	    android:layout_height="125dp"
	   	android:layout_below="@id/dividerbar"&gt;
			&lt;TableLayout
		       android:id="@+id/TableLayout02"
		       android:layout_width="fill_parent"
		       android:layout_height="wrap_content"&gt;
			&lt;/TableLayout&gt;  
  	&lt;/ScrollView&gt;   
  	
	&lt;View
	    android:id="@+id/dividerbar02"
	    android:layout_width="fill_parent"
	    android:layout_height="2dp"
	    android:background="@android:color/black"
	    android:layout_below="@id/scroll02"&gt;
	&lt;/View&gt;
	
	&lt;ScrollView
	    android:id="@+id/scroll03"
	    android:layout_width="fill_parent"
	    android:layout_height="100dp"
	   	android:layout_below="@id/dividerbar02"&gt;
			&lt;TableLayout
		       android:id="@+id/TableLayout03"
		       android:layout_width="fill_parent"
		       android:layout_height="wrap_content"&gt;
			&lt;/TableLayout&gt;  
  	&lt;/ScrollView&gt;   
 		
  	&lt;RadioGroup
        android:id="@+id/radioGroup1"
        android:orientation="horizontal"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content" 
   		android:layout_below="@id/scroll02"&gt;
  &lt;/RadioGroup&gt;
    
    &lt;Button
        android:id="@+id/back_to_main_btn"
        android:layout_width="100dp"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentLeft="true"
        android:onClick="backBtn"
        android:text="@string/back_btn" /&gt;

    &lt;Button
        android:id="@+id/save_evaluation_scores_btn"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_alignParentRight="true"
        android:layout_alignParentBottom="true"
        android:onClick="saveScores"
        android:text="@string/save_evaluation_scores_btn" /&gt;
&lt;/RelativeLayout&gt;</Text>
        </Document>
        <Document ID="985A54C3-95DA-4E13-A513-EAAC4C4B8DC3">
            <Title>Caitlin Morgan</Title>
            <Text>Caitlin Morgan

	Role in Story:	Shepherd
	Occupation:	Sheep Farmer
Â 	

Physical Description:	

	Personality:	

	Habits/Mannerisms:	
Â 	

	Background:	

	Internal Conflicts:	

	External Conflicts:	 
Â 	

	Notes:	</Text>
        </Document>
        <Document ID="BC128C31-B5D9-45C1-80AB-BA5DB6029B2A">
            <Title>Convert to EID</Title>
            <Text>Once a flock owner has decided to convert the flock to using electronic id there is a lot of set up that needs to be done.
If the flock owner want to have a very accurate and complete database then all the existing tag numbers and identification should to be added to the database. 
Depending on your flock needs LambTracker supports keeping a full lifetime history of all previous identification types as well. 
The defaults for sheep id types include:
Federal
Electronic
Paint
Farm
Tattoo
Split
Notch
Name
If you have the data and want to include it you can start with your first sheep and all the tags or identification marks it has had up until now. Flocks that are in the United Stated federal Flock Scrapie Certification Program that have a requirement to maintain a full record of all tags can use the LambTracker system to maintain those required federal records. Reports of all the tag data can be produced for any sheep in the system. 
During the conversion to EID the shepherd will have the opportunity to delete any tags that need to be removed to make room for the electronic tag. 
A given tag record for a sheep has an identification type, the tag color for the male part of a two piece tag, the tag color for the female part of a two piece tag, the location, the date the tag was put on, the date the tag was removed and the number. 
One piece tags use the same color for both parts.
Temporary identification like paint brands can be added if desired. 


</Text>
        </Document>
        <Document ID="A894F918-4193-44F4-8470-9751F727250F">
            <Title>Revision 5 Plans</Title>
            <Text>Additions to manage a registration database
Printing registration certificates
Handle owners membership data

Pasture management and grazing plans. 
Use EID to run an automatic sort gate. 
</Text>
        </Document>
        <Document ID="95FE2021-C644-4208-A90B-0EA2C177E9D1">
            <Title>EID Not Required</Title>
            <Text>LambTracker does not require that you use electronic identification on your sheep. All LambTracker modules can be accessed using a farm, or federal id or by name if you know all of your sheep. 
However, if you wish to implement EID in your flock you will be able to take advantage of much faster selection of sheep records when you are working within a module. 
There are a number of EID tags available for sheep at a variety of price points. Most of the tags available in the Unites States are fairly large. If you have a smaller breed of sheep they may not be suitable for your animals. 
We use and recommend the Shearwell, UK SET tags. These loop style tags are small and easy to put in even newborn lamb ears. They come in a variety of colors and can be either electronic or visual. As a bonus for United States producers, Shearwell tags are approved as official US federal scrapie identification so can be your only tag system. However, we also generally recommend double tagging all purebred sheep where you must have accurate pedigree data. It is heartbreaking to have a wonderful ewe or ram lost to the breeding flock because tags got lost and you cannot verify who this animal is. 
To effectively use EID you will also need an EID tag reader. There are a number of commercially available readers ranging from wands to panel readers to EID enabled automatic sorting gates. 
Many of these options are very expensive.
If you are interested in EID but want a lower cost option you can build your own EID reader. Plans for an inexpensive reader can be found on LambTracker.com This reader uses parts you buy yourself from vendors in Australia and China and simple plumbing parts to build an inexpensive handheld reader. We have been using our own home-built readers since March 2014 and they have worked well. 

</Text>
        </Document>
        <Document ID="91E6CCCA-C8C1-4ADD-9B22-7C3E89BF4C62">
            <Title>Misc stuff from elsewhere</Title>
            <Text>The heads up display Caitlin wore as sun glasses pulled up Jasmineâs record. 
</Text>
        </Document>
        <Document ID="7972F186-93CF-4A40-8CC5-07EDB7CD3DA9">
            <Title>Title Page</Title>
            <Synopsis>Title page to the manuscript.</Synopsis>
            <Text>oogiemcguire 
Your Address



Your phone number
Your e-mail address

(Your agentâs name)
(Your agentâs address)
&lt;$wc100&gt; words.










&lt;$PROJECTTITLE&gt;

by &lt;$fullname&gt;</Text>
            <Notes>This is the title page of the manuscript. Note that âCompile As-Isâ is ticked - this ensures that the title pageâs formatting doesnât get changed during the Compile process, even though the formatting of other text documents will be overridden to use a standard 12-point manuscript font.

The &lt;$PROJECTTITLE&gt; and &lt;$fullname&gt; tags get replaced with the information set in Project &gt; Meta-Data Settingsâ¦ &gt; Project Properties. You can edit those settings or just replace this text altogether. (Other information is taken from Address Book when the project is created.)</Notes>
        </Document>
        <Document ID="683DC5DC-B80C-495A-81F9-CC3987F344F8">
            <Title>February</Title>
            <Text>February  is one of the slowest months in the shepherding year. The biggest issue is keeping the sheep fed and filling water tanks. </Text>
        </Document>
        <Document ID="089F6040-2102-44CE-8E1A-7ED53FAA6F3D">
            <Title>LookUpSheep Code</Title>
            <Text>package com.weyr_associates.lambtracker;

import java.util.ArrayList;
import java.util.List;

import android.app.ListActivity;
import android.widget.ArrayAdapter;
import android.widget.AdapterView;

import com.weyr_associates.lambtracker.ConvertToEID.IncomingHandler;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.graphics.LightingColorFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.os.Messenger;
import android.os.RemoteException;
import android.util.Log;
import android.view.View;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.ListView;
import android.widget.SimpleCursorAdapter;
import android.widget.Spinner;
import android.widget.TextView;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.database.sqlite.SQLiteException;

public class LookUpSheep extends ListActivity
	{
	private DatabaseHandler dbh;
	int             id;
	String 			logmessages;
	public int 		thissheep_id;
	int             fedtagid, farmtagid, eidtagid;
	
	public String 	tag_type_label, tag_color_label, tag_location_label, eid_tag_color_label ;
	public String 	eid_tag_location_label, eidText, alert_text;
	public Cursor 	cursor, cursor2;

	public Spinner tag_type_spinner, tag_location_spinner, tag_color_spinner ;
	public List&lt;String&gt; tag_types, tag_locations, tag_colors;
	
	public String[] this_sheeps_tags ;
	
	private int             nRecs;
	private int			    recNo;
	private String[]        colNames;
	
	int[] tagViews;

	ArrayAdapter&lt;String&gt; dataAdapter;
	String     	cmd;
	Integer 	i;	
	public Button btn;

	/////////////////////////////////////////////////////
	Messenger mService = null;
	boolean mIsBound;

	final Messenger mMessenger = new Messenger(new IncomingHandler());
	// variable to hold the string
	public String LastEID ;

	class IncomingHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case eidService.MSG_UPDATE_STATUS:
				Bundle b1 = msg.getData();

				break;
			case eidService.MSG_NEW_EID_FOUND:
				Bundle b2 = msg.getData();

				LastEID = (b2.getString("info1"));
				//We have a good whole EID number	
				Log.i ("in handler case" , "got eid of " + LastEID);
				gotEID ();	
				break;			
			case eidService.MSG_UPDATE_LOG_APPEND:
				//Bundle b3 = msg.getData();
				//Log.i("Convert", "Add to Log.");

				break;
			case eidService.MSG_UPDATE_LOG_FULL:
				//Log.i("Convert", "Log Full.");

				break;
			case eidService.MSG_THREAD_SUICIDE:
				Log.i("Convert", "Service informed Activity of Suicide.");
				doUnbindService();
				stopService(new Intent(LookUpSheep.this, eidService.class));

				break;
			default:
				super.handleMessage(msg);
			}
		}
	}

	public ServiceConnection mConnection = new ServiceConnection() {
		public void onServiceConnected(ComponentName className, IBinder service) {
			mService = new Messenger(service);
			Log.i("Convert", "At Service.");
			try {
				//Register client with service
				Message msg = Message.obtain(null, eidService.MSG_REGISTER_CLIENT);
				msg.replyTo = mMessenger;
				mService.send(msg);

				//Request a status update.
				//msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
				//				mService.send(msg);

				//Request full log from service.
				//				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
				//				mService.send(msg);

			} catch (RemoteException e) {
				// In this case the service has crashed before we could even do anything with it
			}
		}
		public void onServiceDisconnected(ComponentName className) {
			// This is called when the connection with the service has been unexpectedly disconnected - process crashed.
			mService = null;
		}
	};    	

	private void CheckIfServiceIsRunning() {
		//If the service is running when the activity starts, we want to automatically bind to it.
		Log.i("Convert", "At isRunning?.");
		if (eidService.isRunning()) {
			//Log.i("Convert", "is.");
			doBindService();
		} else {
			//Log.i("Convert", "is not, start it");
			startService(new Intent(LookUpSheep.this, eidService.class));
			doBindService();
		}
		//Log.i("Convert", "Done isRunning.");
	} 	

	void doBindService() {
		// Establish a connection with the service.  We use an explicit
		// class name because there is no reason to be able to let other
		// applications replace our component.
		//Log.i("Convert", "At doBind1.");
		bindService(new Intent(this, eidService.class), mConnection, Context.BIND_AUTO_CREATE);
		//Log.i("Convert", "At doBind2.");

		mIsBound = true;

		if (mService != null) {
			//Log.i("Convert", "At doBind3.");
			try {
				//Request status update
				Message msg = Message.obtain(null, eidService.MSG_UPDATE_STATUS, 0, 0);
				msg.replyTo = mMessenger;
				mService.send(msg);
				Log.i("Convert", "At doBind4.");
				//Request full log from service.
				msg = Message.obtain(null, eidService.MSG_UPDATE_LOG_FULL, 0, 0);
				mService.send(msg);
			} catch (RemoteException e) {}
		}
		//Log.i("Convert", "At doBind5.");
	}
	void doUnbindService() {
		//Log.i("Convert", "At DoUnbindservice");
		if (mService != null) {
			try {
				//Stop eidService from sending tags
				Message msg = Message.obtain(null, eidService.MSG_NO_TAGS_PLEASE);
				msg.replyTo = mMessenger;
				mService.send(msg);

			} catch (RemoteException e) {
				// In this case the service has crashed before we could even do anything with it
			}
		}
		if (mIsBound) {
			// If we have received the service, and hence registered with it, then now is the time to unregister.
			if (mService != null) {
				try {
					Message msg = Message.obtain(null, eidService.MSG_UNREGISTER_CLIENT);
					msg.replyTo = mMessenger;
					mService.send(msg);
				} catch (RemoteException e) {
					// There is nothing special we need to do if the service has crashed.
				}
			}
			// Detach our existing connection.
			unbindService(mConnection);
			mIsBound = false;
		}
	}    	

	public void gotEID( )
	{
		Object crsr;
		//	make the scan eid button red
		btn = (Button) findViewById( R.id.scan_eid_btn );
		btn.getBackground().setColorFilter(new LightingColorFilter(0xFF000000, 0xFFCC0000));
		String eid = this.getIntent().getExtras().getString("com.weyr_associates.lambtracker.LastEID");
    	Log.i("LookUpSheep", " before input text " + eid);  
    	
		// 	Display the EID number
		TextView TV = (TextView) findViewById (R.id.inputText);
		TV.setText( LastEID );
		Log.i("in gotEID ", "with LastEID of " + LastEID);
		lookForSheep ();
	}	
	/////////////////////////////////////////////////////	
	@Override
    public void onCreate(Bundle savedInstanceState)	
    {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.lookup_sheep);
        Log.i("LookUpSheep", " after set content view");
        View v = null;
        String 	dbfile = getString(R.string.real_database_file) ;
        Log.i("LookUpSheep", " after get database file");
    	dbh = new DatabaseHandler( this, dbfile );
    	Object crsr;
    	int     nrCols;
//		Added the variable definitions here    	
      	String          cmd;
      	String 			results, results2;
    	Boolean			exists;

    	 //////////////////////////////////// 
		CheckIfServiceIsRunning();
		Log.i("Convert", "back from isRunning");  	
		////////////////////////////////////    	
		
     	// Fill the Tag Type Spinner
     	tag_type_spinner = (Spinner) findViewById(R.id.tag_type_spinner);
    	tag_types = new ArrayList&lt;String&gt;();      	
    	
    	// Select All fields from id types to build the spinner
        cmd = "select * from id_type_table";
        crsr = dbh.exec( cmd );  
        cursor   = ( Cursor ) crsr;
    	dbh.moveToFirstRecord();
    	tag_types.add("Select a Type");
         // looping through all rows and adding to list
    	for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()){
    		tag_types.add(cursor.getString(1));
    	}
    	cursor.close();    	
    	
    	// Creating adapter for spinner
    	dataAdapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_spinner_item, tag_types);
		dataAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
		tag_type_spinner.setAdapter (dataAdapter);
		tag_type_spinner.setSelection(1);	

		// 		here is where I put the actual rcvd eid into the eid variable
//    	Log.i("LookUpSheep", " Before get extras");
    	String eid = this.getIntent().getExtras().getString("com.weyr_associates.lambtracker.LastEID");
    	Log.i("LookUpSheep", " before input text " + eid);  
        TextView TV = (TextView) findViewById( R.id.inputText );
        TV.setText (eid);
        eidText = eid;
       
        // Moved the rest of the code into a separate method so I can call it from several places.
        
        Log.i("LookUpSheep", " after set text " + eid);         
        exists = true;
       
        exists = tableExists("sheep_table");
        if (exists){
        	if( eid != null &amp;&amp; eid.length() &gt; 0 ){
//        		Get the sheep id from the id table for this EID tag number
	        	cmd = String.format( "select sheep_id from id_info_table where tag_number='%s'", eid );  
	        	
	        	dbh.exec( cmd );
	        	dbh.moveToFirstRecord();
	        	thissheep_id = dbh.getInt(0);
	        
	        	Log.i("LookUpSheep", "This sheep is record " + String.valueOf(thissheep_id));
	        	Log.i("LookUpSheep", " Before finding all tags");
	        	
	    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
	    				"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
	    				"id_info_table.id_infoid as _id, id_info_table.tag_date_off, sheep_table.alert01 " +
	    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
	    				"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
	    				"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
	    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
	    				"where id_info_table.sheep_id ='%s' and id_info_table.tag_date_off is null order by idtype_name asc", thissheep_id);

	    		crsr = dbh.exec( cmd ); 
	    		
	    		cursor   = ( Cursor ) crsr; 
	    		startManagingCursor(cursor);

	    		recNo    = 1;
				nRecs    = cursor.getCount();
				colNames = cursor.getColumnNames();
				nrCols   = colNames.length;
				
				cursor.moveToFirst();				
				TV = (TextView) findViewById( R.id.sheepnameText );
		        TV.setText (dbh.getStr(0));
		        
		    	Log.i("LookUpSheep", " before formatting results");
				
				//	Get set up to try to use the CursorAdapter to display all the tag data
				//	Select only the columns I need for the tag display section
		        String[] fromColumns = new String[ ]{ "tag_number", "tag_color_name", "id_location_abbrev", "idtype_name"};
				//	Set the views for each column for each line. A tag takes up 1 line on the screen
		        int[] toViews = new int[] { R.id.tag_number, R.id.tag_color_name, R.id.id_location_abbrev, R.id.idtype_name};
				SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, R.layout.list_entry, cursor ,fromColumns, toViews, 0);
				setListAdapter(adapter);

				// Now we need to get the alert text for this sheep
				alert_text = dbh.getStr(8);
				//	Now to test of the sheep has an alert and if so then display the alert
				if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
			       	// Show the alert		  
					showAlert(v);
	        	}
        	}else{
	        	return;
	        }
	        Log.i("LookUpSheep", " out of the if statement");
        	dbh.moveToFirstRecord();
        	if( dbh.getSize() == 0 ){
        		TV = (TextView) findViewById( R.id.eidText );
            	TV.setText( eid );
            	TV = (TextView) findViewById( R.id.sheepnameText );
            	TV.setText( "Cannot find requested EID tag." );
            	return;
        	} 
        	}
    		else {
    			clearBtn( null );
            	TV = (TextView) findViewById( R.id.sheepnameText );
                TV.setText( "Sheep Database does not exist." );    			
        	}
//        	lookForSheep ();
        }
	public void lookForSheep (){
		View v = null;
		int     nrCols;
		Object crsr;
		Boolean exists;
		TextView TV;
        exists = true;
        Log.i("LookForSheep", " got to lookForSheep with EID text of " + LastEID);
        exists = tableExists("sheep_table");
        if (exists){
        	if( LastEID != null &amp;&amp; LastEID.length() &gt; 0 ){
//        		Get the sheep id from the id table for this EID tag number
	        	cmd = String.format( "select sheep_id from id_info_table where tag_number='%s'", LastEID );  
	        	
	        	dbh.exec( cmd );
	        	dbh.moveToFirstRecord();
	        	thissheep_id = dbh.getInt(0);
	        
	        	Log.i("LookForSheep", "This sheep is record " + String.valueOf(thissheep_id));
	        	Log.i("LookForSheep", " Before finding all tags");
	        	
	    		cmd = String.format( "select sheep_table.sheep_name, sheep_table.sheep_id, id_type_table.idtype_name, " +
	    				"tag_colors_table.tag_color_name, id_info_table.tag_number, id_location_table.id_location_abbrev, " +
	    				"id_info_table.id_infoid as _id, id_info_table.tag_date_off, sheep_table.alert01 " +
	    				"from sheep_table inner join id_info_table on sheep_table.sheep_id = id_info_table.sheep_id " +
	    				"left outer join tag_colors_table on id_info_table.tag_color_male = tag_colors_table.tag_colorsid " +
	    				"left outer join id_location_table on id_info_table.tag_location = id_location_table.id_locationid " +
	    				"inner join id_type_table on id_info_table.tag_type = id_type_table.id_typeid " +
	    				"where id_info_table.sheep_id ='%s' and id_info_table.tag_date_off is null order by idtype_name asc", thissheep_id);

	    		crsr = dbh.exec( cmd ); 
	    		
	    		cursor   = ( Cursor ) crsr; 
	    		startManagingCursor(cursor);

	    		recNo    = 1;
				nRecs    = cursor.getCount();
				colNames = cursor.getColumnNames();
				nrCols   = colNames.length;
				
				cursor.moveToFirst();				
				TV = (TextView) findViewById( R.id.sheepnameText );
		        TV.setText (dbh.getStr(0));
		        
		    	Log.i("lookForSheep", " before formatting results");
				
				//	Get set up to try to use the CursorAdapter to display all the tag data
				//	Select only the columns I need for the tag display section
		        String[] fromColumns = new String[ ]{ "tag_number", "tag_color_name", "id_location_abbrev", "idtype_name"};
				//	Set the views for each column for each line. A tag takes up 1 line on the screen
		        int[] toViews = new int[] { R.id.tag_number, R.id.tag_color_name, R.id.id_location_abbrev, R.id.idtype_name};
				SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, R.layout.list_entry, cursor ,fromColumns, toViews, 0);
				setListAdapter(adapter);

				// Now we need to get the alert text for this sheep
				alert_text = dbh.getStr(8);
				//	Now to test of the sheep has an alert and if so then display the alert
				if (alert_text != null &amp;&amp; !alert_text.isEmpty()){
//				if (alert_text != null &amp;&amp; !alert_text.isEmpty() &amp;&amp; !alert_text.trim().isEmpty()){
						// Show the alert		  
					
					showAlert(v);
	        	}
        	}else{
	        	return;
	        }
	        Log.i("lookForSheep", " out of the if statement");
        	dbh.moveToFirstRecord();
        	if( dbh.getSize() == 0 ){
        		TV = (TextView) findViewById( R.id.eidText );
            	TV.setText( LastEID );
            	TV = (TextView) findViewById( R.id.sheepnameText );
            	TV.setText( "Cannot find requested EID tag." );
            	return;
        	} 
        	}
    		else {
    			clearBtn( null );
            	TV = (TextView) findViewById( R.id.sheepnameText );
                TV.setText( "Sheep Database does not exist." );    			
        	}
	}
//  user clicked 'Scan' button    
 public void scanEid( View v){
 	// Here is where I need to get a tag scanned and put the data into the variable LastEID
		if (mService != null) {
		try {
			//Start eidService sending tags
			Message msg = Message.obtain(null, eidService.MSG_SEND_ME_TAGS);
			msg.replyTo = mMessenger;
			mService.send(msg);
		   	//	make the scan eid button  0x0000FF00, 0xff00ff00
	    	Button btn = (Button) findViewById( R.id.scan_eid_btn );
	    	btn.getBackground().setColorFilter(new LightingColorFilter(0x0000FF00, 0xff00ff00));
			
		} catch (RemoteException e) {
			// In this case the service has crashed before we could even do anything with it
		}
		}    	    	
 } 
	public boolean tableExists (String table){
		try {
	        dbh.exec("select * from "+ table);   
	        return true;
		} catch (SQLiteException e) {
			return false;
	        		}
	        	}

    public void helpBtn( View v )
    {
   	// Display help here   	
		AlertDialog.Builder builder = new AlertDialog.Builder( this );
		builder.setMessage( R.string.help_ground_truth_tags )
	           .setTitle( R.string.help_warning );
		builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
	           public void onClick(DialogInterface dialog, int idx) {
	               // User clicked OK button 
	        	  
	    		   clearBtn( null );
	               }
	       });		
		AlertDialog dialog = builder.create();
		dialog.show();		
    }
    
    // user clicked the 'back' button
    public void backBtn( View v )
	    {
    	doUnbindService();
		stopService(new Intent(LookUpSheep.this, eidService.class));   	
    	// Added this to close the database if we go back to the main activity  	
    	stopManagingCursor (cursor);
    	dbh.closeDB();
    	clearBtn( null );
    	//Go back to main
      	finish();
	    }
 
    public void showAlert (View v){
//    		String	alert_text;
            String          cmd;    
            Object 			crsr2;
            
    		// Display alerts here   	
    				AlertDialog.Builder builder = new AlertDialog.Builder( this );
    				Log.i("ShowAlert", "Alert Text is" + alert_text);
    				builder.setMessage( alert_text )
    			           .setTitle( R.string.alert_warning );
    				builder.setPositiveButton( R.string.ok, new DialogInterface.OnClickListener() {
    			           public void onClick(DialogInterface dialog, int idx) {
    			               // User clicked OK button   	  
    			               }
    			       });		
    				AlertDialog dialog = builder.create();
    				dialog.show();
//    				cursor2.close();	
    	}

   
    // user clicked 'clear' button
    public void clearBtn( View v )
	    {
		TextView TV ;
		Button btn;
		TV = (TextView) findViewById( R.id.inputText );
		TV.setText( "" );		
		TV = (TextView) findViewById( R.id.sheepnameText );
		TV.setText( "" );
		//	Need to clear out the rest of the tags here as well but not sure how to do that
		
    }
    private String formatRecord( Cursor crsr )
	{
    	String        line;
    	Log.i("formatRecord", " Got to the format record section");
	StringBuilder sb       = new StringBuilder();
	Log.i("formatRecord", " After the String Builder definition");
	int           nrCols   = colNames.length;
//	Log.i("formatRecord", " number of columns is " + String.valueOf (nrCols));
//	line     = String.format( "Record %d of %d:\n", recNo, nRecs );
	Log.i("formatRecord", " number of records is " + String.valueOf (nRecs));
//	sb.append( line );
	
	Log.i("formatRecord", " number of columns is " + String.valueOf (nrCols));
	
	for( int ii = 0; ii &lt; nRecs; ii++ )
	{	
		for( int i = 0; i &lt; nrCols; i++ )
			{
			switch( cursor.getType(i) )
				{
				case Cursor.FIELD_TYPE_FLOAT:
					line = String.format( "  %s: %f\n", colNames[i], cursor.getFloat(i) );
//					line = String.format( "%f\n", cursor.getFloat(i) );
					break;
				
				case Cursor.FIELD_TYPE_INTEGER:
					line = String.format( "  %s: %d\n", colNames[i], cursor.getInt(i) );
//					line = String.format( "%d\n", cursor.getInt(i) );
					break;
				
				case Cursor.FIELD_TYPE_NULL:
					line = String.format( "  %s: null\n", colNames[i] );
//					line = String.format( "null\n", colNames[i] );
					break;
				
				case Cursor.FIELD_TYPE_STRING:
					line = String.format( "  %s: %s\n", colNames[i], cursor.getString(i) );
//					line = String.format( "%s\n", cursor.getString(i) );
					break;
					
				default:
					line = String.format( "  %s: ?? %s ??", colNames[i], cursor.getString(i) );
//					line = String.format( "%s ", cursor.getString(i) );
					break;
				}			
			Log.i ("format record ", "Before building first line");
			sb.append( line );
			}
		Log.i ("format record ", "Before cursor move to next");
		cursor.moveToNext();
	}
	return sb.toString();
	}   
    
	}
</Text>
        </Document>
        <Document ID="B70EF1CB-C8A9-45B0-900B-343D827EAB33">
            <Title>EvaluateSheep XML</Title>
            <Text>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    android:orientation="vertical" &gt;
    
       &lt;GridLayout 
        	android:id="@+id/grid1"
	        android:layout_width="wrap_content"
			android:layout_height="wrap_content"
        	android:columnCount="3"
       		android:rowCount="3"&gt;
        
           &lt;TextView
            android:layout_width="150dp"
            android:layout_height="wrap_content"     
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/input_id_lbl" /&gt;
           
           &lt;EditText
            android:id="@+id/inputText"
            android:layout_width="205dp"
            android:layout_height="wrap_content"
            android:layout_gravity="left"
            android:layout_column="0"
            android:layout_row="1"
            android:enabled="true"
            android:inputType="number"
            android:textSize="18sp"
            android:typeface="monospace" &gt;
            &lt;requestFocus /&gt;
            &lt;/EditText&gt;
            
  			&lt;TextView
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
        	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
        	android:text="@string/sheep_name_lbl" /&gt;
        
        &lt;TextView
        	android:id="@+id/sheepnameText"
        	android:layout_width="200dp"
       	 	android:layout_height="wrap_content"
           	android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:ems="10"
        	android:gravity="left"
        	android:textSize="18sp"
        	android:typeface="monospace" /&gt;    
    
       &lt;/GridLayout&gt;  
     
    &lt;GridLayout
        android:id="@+id/grid2"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="6" &gt;

        &lt;Button
            android:id="@+id/search_fed_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="0"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFedTag"
            android:text="@string/search_fed_btn" 
            android:textSize="14sp"/&gt;
 
        &lt;Button
            android:id="@+id/search_farm_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="1"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="searchFarmTag"
            android:text="@string/search_farm_btn" 
            android:textSize="14sp"/&gt;
       
        
        &lt;Button
            android:id="@+id/scan_eid_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="0"
            android:onClick="scanEid"
            android:text="@string/scan_eid_btn"
            android:textSize="14sp" /&gt;
        
        &lt;Button
            android:id="@+id/save_evaluation_scores_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_column="3"
            android:layout_gravity="left|top"
            android:layout_row="0"        	
            android:onClick="saveScores"
            android:text="@string/save_evaluation_scores_btn"
            android:textSize="14sp" /&gt;
        
        
       &lt;/GridLayout&gt; 
    
    &lt;GridLayout
        android:id="@+id/grid3"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:columnCount="6"
        android:rowCount="6" &gt;

        &lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/federal_id_lbl" /&gt;

        &lt;TextView
            android:id="@+id/fedText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="0"
            android:layout_gravity="left"
            android:layout_row="1"
			android:textSize="14sp"
            android:typeface="monospace" /&gt;
        
 		&lt;TextView
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/farm_id_lbl" /&gt;

        &lt;TextView
            android:id="@+id/farmText"
            android:layout_width="90dp"
            android:layout_height="wrap_content"
            android:layout_column="1"
            android:layout_gravity="left"
            android:layout_row="1"
            android:enabled="true"
            android:textSize="14sp"
            android:typeface="monospace" /&gt;
        
        &lt;TextView
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left"
            android:layout_row="0"
            android:inputType="none"
            android:text="@string/electronic_id_lbl" /&gt;
        
        &lt;TextView
            android:id="@+id/eidText"
            android:layout_width="200dp"
            android:layout_height="wrap_content"
            android:layout_column="2"
            android:layout_gravity="left|top"
            android:layout_row="1"
            android:textSize="14sp"
            android:typeface="monospace" /&gt;
        
    &lt;/GridLayout&gt;
  &lt;ScrollView
    android:layout_width="fill_parent"
    android:layout_height="275dp" &gt;
   	      
    &lt;GridLayout
        android:id="@+id/grid4"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="2"&gt;
        
       &lt;TextView
        android:id="@+id/trait01_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="0"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait01_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="0"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait02_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="1"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait02_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="1"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait03_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="2"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
          
    &lt;RatingBar
        android:id="@+id/trait03_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="2"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait04_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="3"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait04_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="3"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait05_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="4"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait05_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="4"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait06_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="5"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait06_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="5"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait07_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="6"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait07_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="6"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait08_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="7"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait08_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="7"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    
    &lt;TextView
        android:id="@+id/trait09_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="8"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait09_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="8"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;TextView
        android:id="@+id/trait10_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_gravity="left|center"
        android:layout_row="9"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait10_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_column="1"
        android:layout_gravity="right|center"
        android:layout_row="9"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
    &lt;/GridLayout&gt;
    &lt;/ScrollView&gt; 
    &lt;ScrollView
    android:layout_width="fill_parent"
    android:layout_height="125dp" &gt;
    &lt;GridLayout
        android:id="@+id/grid5"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:columnCount="4" &gt;
    
        &lt;TextView
        android:id="@+id/trait11_lbl"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_row="0"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;EditText
        android:id="@+id/trait11_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:layout_column="1"
         android:layout_row="0"
        android:inputType="numberDecimal"
        android:imeOptions="actionDone"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;TextView
        android:id="@+id/trait12_lbl"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_column="2"
        android:layout_row="0"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;EditText
        android:id="@+id/trait12_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:layout_column="3"
       	android:layout_row="0"
        android:inputType="numberDecimal"
        android:imeOptions="actionDone"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
    
        &lt;TextView
        android:id="@+id/trait13_lbl"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_row="1"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;EditText
        android:id="@+id/trait13_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:layout_column="1"
         android:layout_row="1"
        android:inputType="numberDecimal"
        android:imeOptions="actionDone"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;TextView
        android:id="@+id/trait14_lbl"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_column="2"
        android:layout_row="1"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;EditText
        android:id="@+id/trait14_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:layout_column="3"
       	android:layout_row="1"
        android:inputType="numberDecimal"
        android:imeOptions="actionDone"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;TextView
        android:id="@+id/trait15_lbl"
        android:layout_width="110dp"
        android:layout_height="wrap_content"
        android:layout_column="0"
        android:layout_row="2"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
        &lt;EditText
        android:id="@+id/trait15_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:layout_column="1"
         android:layout_row="2"
        android:inputType="numberDecimal"
        android:imeOptions="actionDone"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
        
     &lt;/GridLayout&gt; 
     &lt;/ScrollView&gt;  
    &lt;RelativeLayout
    	android:id="@+id/RelativeLayout02"
    	android:orientation="horizontal" 
  		android:layout_width="fill_parent"
  		android:layout_height="wrap_content"&gt;
        
       	&lt;Button
            android:id="@+id/back_to_main_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_alignParentLeft="true"
            android:onClick="backBtn"
            android:text="@string/back_btn"
            android:textSize="14sp" /&gt;
       	
       	&lt;Button
            android:id="@+id/alert_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
           	android:layout_toRightOf="@+id/back_to_main_btn"
            android:onClick="showAlert"
            android:text="@string/alert_btn"
            android:textSize="14sp" /&gt;
       	&lt;Button
            android:id="@+id/clear_form_btn"
            android:layout_width="100dp"
            android:layout_height="50dp"
            android:layout_toRightOf="@+id/alert_btn"
            android:onClick="clearBtn"
            android:text="@string/clear_btn"
            android:textSize="14sp" /&gt;
       		
       	&lt;Button
           android:id="@+id/help_btn"
           android:layout_width="100dp"
           android:layout_height="50dp"
           android:layout_alignParentRight="true"
           android:onClick="helpBtn"
           android:text="@string/help_btn"
           android:textSize="14sp" /&gt;
  &lt;/RelativeLayout&gt;        
  
&lt;/LinearLayout&gt;
</Text>
        </Document>
        <Document ID="96FE4B66-8E10-4A81-90A7-3D5E3CCBB9CF">
            <Title>Daily Target</Title>
        </Document>
        <Document ID="BBF94872-BAF4-4052-9F31-D01EAD287CA7">
            <Title>June</Title>
            <Text>Late lambers
The last of the lambs are born in June. A pedigree flock must keep accurate records of the sire of each and every lamb. Keith and Caitlin also want to ensure that every ewes has at least two rams to mate with in a given year. To maintain the sire data the rams are separated in time. 
The last of the ewes who have not lambed are sorted out from the main lambing bunch and put in a separate pasture. Any ewes who fail to lamb are scanned and an alert put in to mark them for slaughter later in the year. 
Meanwhile the early lambs are getting old enough to be weighed.
Since their flock is recorded with the National Sheep Improvement Program (NSIP) they collect a number of critical weight records.
During the initial set-up of LambTracker they entered in the date ranges for each group according to both the LambPlan and NSIP rules. </Text>
        </Document>
        <Document ID="0A6F0996-04BB-4717-8158-B41BCA8E4E85">
            <Title>Keith Morgan</Title>
            <Text>Keith  Morgan

	Role in Story:	Shepherd
	Occupation:	
Â 	

Physical Description:	

	Personality:	

	Habits/Mannerisms:	
Â 	

	Background:	

	Internal Conflicts:	

	External Conflicts:	 
Â 	

	Notes:	</Text>
        </Document>
        <Document ID="8C067347-D1BF-4320-9B0C-953EAD0FF894">
            <Title>Misc XML</Title>
            <Text>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TableRow xmlns:android="http://schemas.android.com/apk/res/android"&gt;

    &lt;RadioGroup
        android:id="@+id/radioGroup1"
        android:orientation="horizontal"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"&gt;
  &lt;/RadioGroup&gt;

&lt;/TableRow&gt;


&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TableRow xmlns:android="http://schemas.android.com/apk/res/android"&gt;

    &lt;TextView
        android:id="@+id/data_lbl"
        android:layout_width="250dp"
        android:layout_height="wrap_content"
        android:layout_gravity="left|center"
         android:textSize="18sp"
        android:typeface="monospace" /&gt;
        
	&lt;EditText
        android:id="@+id/trait_data"
        android:layout_width="85dp"
        android:layout_height="wrap_content"
        android:inputType="numberDecimal"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
 
&lt;/TableRow&gt;

&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;TableRow xmlns:android="http://schemas.android.com/apk/res/android"&gt;

    &lt;TextView
        android:id="@+id/rb1_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:layout_gravity="left|center"
        android:textSize="18sp"
        android:typeface="monospace" /&gt;
    
    &lt;RatingBar
        android:id="@+id/ratingBar"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="right|center"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;

&lt;/TableRow&gt;

&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="horizontal" &gt;         
       &lt;TextView
        android:id="@+id/trait_lbl"
        android:layout_width="150dp"
        android:layout_height="wrap_content"
        android:textSize="14sp"
        android:typeface="monospace" /&gt;
       
    &lt;RatingBar
        android:id="@+id/trait_ratingbar"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_toRightOf="@+id/trait_lbl"
        android:numStars="5"
        android:rating="0.0"
        android:stepSize="1.0" /&gt;
   
&lt;/RelativeLayout&gt;
</Text>
        </Document>
        <Document ID="1972995C-FB4A-4E8B-A919-617D4DE20EE0">
            <Title>Misc Stuf to Add</Title>
            <Text>LambTracker Features
	Can deal with dead sheep having lambs
	no need to define founder population


paper options
spreadsheet options

Discuss total conversion vs stepwise 
	start with exisitng sheep and add background as you have time

Need info on creating mating plans


Make a list of all the tables in LambTracker </Text>
        </Document>
    </Documents>
</SearchIndexes>